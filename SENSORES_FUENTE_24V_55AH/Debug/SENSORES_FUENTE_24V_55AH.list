
SENSORES_FUENTE_24V_55AH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000538c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005444  08005444  00006444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054cc  080054cc  0000708c  2**0
                  CONTENTS
  4 .ARM          00000000  080054cc  080054cc  0000708c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054cc  080054cc  0000708c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054cc  080054cc  000064cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054d0  080054d0  000064d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080054d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000840  2000008c  08005560  0000708c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  08005560  000078cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a34  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002772  00000000  00000000  00019ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  0001c260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c07  00000000  00000000  0001d1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001789e  00000000  00000000  0001ddc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138c7  00000000  00000000  00035665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092516  00000000  00000000  00048f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db442  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b18  00000000  00000000  000db488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000defa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000008c 	.word	0x2000008c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800542c 	.word	0x0800542c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000090 	.word	0x20000090
 80000fc:	0800542c 	.word	0x0800542c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <transmitir_spi>:
 *  Created on: Jan 8, 2024
 *      Author: A.R.T.
 */
#include "ethernet.h"

void transmitir_spi(uint8_t *p, uint8_t len) { //Solo Transmite para modificar o acceder o escribir a cierto registro.
 80003ec:	b5b0      	push	{r4, r5, r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	000a      	movs	r2, r1
 80003f6:	1cfb      	adds	r3, r7, #3
 80003f8:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef res = HAL_ERROR;
 80003fa:	240f      	movs	r4, #15
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	2201      	movs	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin( w5500_hw.nssPort, w5500_hw.nssPin, GPIO_PIN_RESET); // pull the pin low
 8000402:	4b15      	ldr	r3, [pc, #84]	@ (8000458 <transmitir_spi+0x6c>)
 8000404:	6858      	ldr	r0, [r3, #4]
 8000406:	4b14      	ldr	r3, [pc, #80]	@ (8000458 <transmitir_spi+0x6c>)
 8000408:	891b      	ldrh	r3, [r3, #8]
 800040a:	2200      	movs	r2, #0
 800040c:	0019      	movs	r1, r3
 800040e:	f002 faf7 	bl	8002a00 <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(w5500_hw.spi, p, len, HAL_MAX_DELAY);
 8000412:	4b11      	ldr	r3, [pc, #68]	@ (8000458 <transmitir_spi+0x6c>)
 8000414:	6818      	ldr	r0, [r3, #0]
 8000416:	1cfb      	adds	r3, r7, #3
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	b29a      	uxth	r2, r3
 800041c:	0025      	movs	r5, r4
 800041e:	193c      	adds	r4, r7, r4
 8000420:	2301      	movs	r3, #1
 8000422:	425b      	negs	r3, r3
 8000424:	6879      	ldr	r1, [r7, #4]
 8000426:	f003 fb2b 	bl	8003a80 <HAL_SPI_Transmit>
 800042a:	0003      	movs	r3, r0
 800042c:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(w5500_hw.nssPort, w5500_hw.nssPin, GPIO_PIN_SET); // pull the pin high
 800042e:	4b0a      	ldr	r3, [pc, #40]	@ (8000458 <transmitir_spi+0x6c>)
 8000430:	6858      	ldr	r0, [r3, #4]
 8000432:	4b09      	ldr	r3, [pc, #36]	@ (8000458 <transmitir_spi+0x6c>)
 8000434:	891b      	ldrh	r3, [r3, #8]
 8000436:	2201      	movs	r2, #1
 8000438:	0019      	movs	r1, r3
 800043a:	f002 fae1 	bl	8002a00 <HAL_GPIO_WritePin>
	if (res != HAL_OK)
 800043e:	197b      	adds	r3, r7, r5
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <transmitir_spi+0x5e>
		Error_Handler();
 8000446:	f000 fee3 	bl	8001210 <Error_Handler>
	HAL_Delay(10);
 800044a:	200a      	movs	r0, #10
 800044c:	f001 f962 	bl	8001714 <HAL_Delay>
}
 8000450:	46c0      	nop			@ (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	b004      	add	sp, #16
 8000456:	bdb0      	pop	{r4, r5, r7, pc}
 8000458:	200000a8 	.word	0x200000a8

0800045c <transmitir_recibir_spi>:

/////////////////////////////////////////////////////////////////////////////////////////////////
void transmitir_recibir_spi(uint8_t *p_t, uint8_t len_t, uint8_t *p_r,
		uint16_t len_r) { //manda un comando (Transmite) para recibir data que envía el chip w5500
 800045c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045e:	b087      	sub	sp, #28
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	0008      	movs	r0, r1
 8000466:	607a      	str	r2, [r7, #4]
 8000468:	0019      	movs	r1, r3
 800046a:	240b      	movs	r4, #11
 800046c:	193b      	adds	r3, r7, r4
 800046e:	1c02      	adds	r2, r0, #0
 8000470:	701a      	strb	r2, [r3, #0]
 8000472:	2308      	movs	r3, #8
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	1c0a      	adds	r2, r1, #0
 8000478:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef res;
	HAL_GPIO_WritePin( w5500_hw.nssPort, w5500_hw.nssPin, GPIO_PIN_RESET); // pull the pin low
 800047a:	4b1c      	ldr	r3, [pc, #112]	@ (80004ec <transmitir_recibir_spi+0x90>)
 800047c:	6858      	ldr	r0, [r3, #4]
 800047e:	4b1b      	ldr	r3, [pc, #108]	@ (80004ec <transmitir_recibir_spi+0x90>)
 8000480:	891b      	ldrh	r3, [r3, #8]
 8000482:	2200      	movs	r2, #0
 8000484:	0019      	movs	r1, r3
 8000486:	f002 fabb 	bl	8002a00 <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(w5500_hw.spi, p_t, len_t, HAL_MAX_DELAY);
 800048a:	4b18      	ldr	r3, [pc, #96]	@ (80004ec <transmitir_recibir_spi+0x90>)
 800048c:	6818      	ldr	r0, [r3, #0]
 800048e:	193b      	adds	r3, r7, r4
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	b29a      	uxth	r2, r3
 8000494:	2617      	movs	r6, #23
 8000496:	19bc      	adds	r4, r7, r6
 8000498:	2301      	movs	r3, #1
 800049a:	425b      	negs	r3, r3
 800049c:	68f9      	ldr	r1, [r7, #12]
 800049e:	f003 faef 	bl	8003a80 <HAL_SPI_Transmit>
 80004a2:	0003      	movs	r3, r0
 80004a4:	7023      	strb	r3, [r4, #0]
	res = HAL_SPI_Receive(w5500_hw.spi, p_r, len_r, HAL_MAX_DELAY);
 80004a6:	4b11      	ldr	r3, [pc, #68]	@ (80004ec <transmitir_recibir_spi+0x90>)
 80004a8:	6818      	ldr	r0, [r3, #0]
 80004aa:	19bc      	adds	r4, r7, r6
 80004ac:	2301      	movs	r3, #1
 80004ae:	425d      	negs	r5, r3
 80004b0:	2308      	movs	r3, #8
 80004b2:	18fb      	adds	r3, r7, r3
 80004b4:	881a      	ldrh	r2, [r3, #0]
 80004b6:	6879      	ldr	r1, [r7, #4]
 80004b8:	002b      	movs	r3, r5
 80004ba:	f003 fc41 	bl	8003d40 <HAL_SPI_Receive>
 80004be:	0003      	movs	r3, r0
 80004c0:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin( w5500_hw.nssPort, w5500_hw.nssPin, GPIO_PIN_SET); // pull the pin high
 80004c2:	4b0a      	ldr	r3, [pc, #40]	@ (80004ec <transmitir_recibir_spi+0x90>)
 80004c4:	6858      	ldr	r0, [r3, #4]
 80004c6:	4b09      	ldr	r3, [pc, #36]	@ (80004ec <transmitir_recibir_spi+0x90>)
 80004c8:	891b      	ldrh	r3, [r3, #8]
 80004ca:	2201      	movs	r2, #1
 80004cc:	0019      	movs	r1, r3
 80004ce:	f002 fa97 	bl	8002a00 <HAL_GPIO_WritePin>

	if (res != HAL_OK)
 80004d2:	19bb      	adds	r3, r7, r6
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <transmitir_recibir_spi+0x82>
		Error_Handler();
 80004da:	f000 fe99 	bl	8001210 <Error_Handler>
	HAL_Delay(10);
 80004de:	200a      	movs	r0, #10
 80004e0:	f001 f918 	bl	8001714 <HAL_Delay>
}
 80004e4:	46c0      	nop			@ (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b007      	add	sp, #28
 80004ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ec:	200000a8 	.word	0x200000a8

080004f0 <common_register_block>:

/////////////////////////////////////////////////////////////////////////////////////////////////
void common_register_block(uint8_t *buff, uint16_t address, uint8_t *data,
		uint8_t len) { // Configuración de los registros comunes: encargados de la dirección IP y dirección MAC
 80004f0:	b5b0      	push	{r4, r5, r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	0008      	movs	r0, r1
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	0019      	movs	r1, r3
 80004fe:	240a      	movs	r4, #10
 8000500:	193b      	adds	r3, r7, r4
 8000502:	1c02      	adds	r2, r0, #0
 8000504:	801a      	strh	r2, [r3, #0]
 8000506:	2309      	movs	r3, #9
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	1c0a      	adds	r2, r1, #0
 800050c:	701a      	strb	r2, [r3, #0]
	uint8_t bsb = 0x00;
 800050e:	211b      	movs	r1, #27
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
	uint8_t rwb = 0x01 << 2; // write
 8000516:	201a      	movs	r0, #26
 8000518:	183b      	adds	r3, r7, r0
 800051a:	2204      	movs	r2, #4
 800051c:	701a      	strb	r2, [r3, #0]
	uint8_t om = 00; // VDM
 800051e:	2519      	movs	r5, #25
 8000520:	197b      	adds	r3, r7, r5
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
	uint8_t c_phase = bsb | rwb | om;
 8000526:	187a      	adds	r2, r7, r1
 8000528:	183b      	adds	r3, r7, r0
 800052a:	7812      	ldrb	r2, [r2, #0]
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	4313      	orrs	r3, r2
 8000530:	b2da      	uxtb	r2, r3
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	4313      	orrs	r3, r2
 8000538:	b2da      	uxtb	r2, r3
 800053a:	2518      	movs	r5, #24
 800053c:	197b      	adds	r3, r7, r5
 800053e:	701a      	strb	r2, [r3, #0]
	uint16_t os_address = address;
 8000540:	2116      	movs	r1, #22
 8000542:	187b      	adds	r3, r7, r1
 8000544:	193a      	adds	r2, r7, r4
 8000546:	8812      	ldrh	r2, [r2, #0]
 8000548:	801a      	strh	r2, [r3, #0]
	os_address = os_address << 8;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	021b      	lsls	r3, r3, #8
 8000550:	b29a      	uxth	r2, r3
 8000552:	187b      	adds	r3, r7, r1
 8000554:	801a      	strh	r2, [r3, #0]
	p = buff;
 8000556:	4b1f      	ldr	r3, [pc, #124]	@ (80005d4 <common_register_block+0xe4>)
 8000558:	68fa      	ldr	r2, [r7, #12]
 800055a:	601a      	str	r2, [r3, #0]
	memcpy(p, &os_address, 2);
 800055c:	4b1d      	ldr	r3, [pc, #116]	@ (80005d4 <common_register_block+0xe4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	1879      	adds	r1, r7, r1
 8000562:	2202      	movs	r2, #2
 8000564:	0018      	movs	r0, r3
 8000566:	f004 ff0d 	bl	8005384 <memcpy>
	p += 2;
 800056a:	4b1a      	ldr	r3, [pc, #104]	@ (80005d4 <common_register_block+0xe4>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	1c9a      	adds	r2, r3, #2
 8000570:	4b18      	ldr	r3, [pc, #96]	@ (80005d4 <common_register_block+0xe4>)
 8000572:	601a      	str	r2, [r3, #0]
	memcpy(p, &c_phase, 1);
 8000574:	4b17      	ldr	r3, [pc, #92]	@ (80005d4 <common_register_block+0xe4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	197a      	adds	r2, r7, r5
 800057a:	7812      	ldrb	r2, [r2, #0]
 800057c:	701a      	strb	r2, [r3, #0]
	p += 1;
 800057e:	4b15      	ldr	r3, [pc, #84]	@ (80005d4 <common_register_block+0xe4>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	1c5a      	adds	r2, r3, #1
 8000584:	4b13      	ldr	r3, [pc, #76]	@ (80005d4 <common_register_block+0xe4>)
 8000586:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
 800058c:	e00e      	b.n	80005ac <common_register_block+0xbc>
		memcpy(p, &data[i], 1);
 800058e:	4b11      	ldr	r3, [pc, #68]	@ (80005d4 <common_register_block+0xe4>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	69fa      	ldr	r2, [r7, #28]
 8000594:	6879      	ldr	r1, [r7, #4]
 8000596:	188a      	adds	r2, r1, r2
 8000598:	7812      	ldrb	r2, [r2, #0]
 800059a:	701a      	strb	r2, [r3, #0]
		p += 1;
 800059c:	4b0d      	ldr	r3, [pc, #52]	@ (80005d4 <common_register_block+0xe4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	1c5a      	adds	r2, r3, #1
 80005a2:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <common_register_block+0xe4>)
 80005a4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	3301      	adds	r3, #1
 80005aa:	61fb      	str	r3, [r7, #28]
 80005ac:	2109      	movs	r1, #9
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	69fa      	ldr	r2, [r7, #28]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	dbea      	blt.n	800058e <common_register_block+0x9e>
	}
	transmitir_spi(buff, (3 + len));
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	3303      	adds	r3, #3
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	0011      	movs	r1, r2
 80005c4:	0018      	movs	r0, r3
 80005c6:	f7ff ff11 	bl	80003ec <transmitir_spi>
	//free(buff);
}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b008      	add	sp, #32
 80005d0:	bdb0      	pop	{r4, r5, r7, pc}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	20000370 	.word	0x20000370

080005d8 <eth_write_reg>:
//////////////////////////////////////////////////////////////////////////////////////////////////
void eth_write_reg(uint8_t bsb, uint16_t address, uint8_t *data, uint16_t len) { // Los registros de socket brindan la comunicación del canal. Con BSB[4:0] se puede seleccionar el socket a utilizar
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b089      	sub	sp, #36	@ 0x24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	0004      	movs	r4, r0
 80005e0:	0008      	movs	r0, r1
 80005e2:	60ba      	str	r2, [r7, #8]
 80005e4:	0019      	movs	r1, r3
 80005e6:	230f      	movs	r3, #15
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	1c22      	adds	r2, r4, #0
 80005ec:	701a      	strb	r2, [r3, #0]
 80005ee:	230c      	movs	r3, #12
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	1c02      	adds	r2, r0, #0
 80005f4:	801a      	strh	r2, [r3, #0]
 80005f6:	1dbb      	adds	r3, r7, #6
 80005f8:	1c0a      	adds	r2, r1, #0
 80005fa:	801a      	strh	r2, [r3, #0]

	uint8_t *buff;
	buff = malloc(sizeof(uint8_t) * len + 3);
 80005fc:	1dbb      	adds	r3, r7, #6
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	3303      	adds	r3, #3
 8000602:	0018      	movs	r0, r3
 8000604:	f004 fdb2 	bl	800516c <malloc>
 8000608:	0003      	movs	r3, r0
 800060a:	61bb      	str	r3, [r7, #24]
	if (buff == NULL)
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <eth_write_reg+0x3e>
		Error_Handler();
 8000612:	f000 fdfd 	bl	8001210 <Error_Handler>

	uint16_t os_address;
	uint8_t rwb;
	uint8_t om;
	uint8_t c_phase;
	uint8_t t = 3 + len;
 8000616:	1dbb      	adds	r3, r7, #6
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	2317      	movs	r3, #23
 800061e:	18fb      	adds	r3, r7, r3
 8000620:	3203      	adds	r2, #3
 8000622:	701a      	strb	r2, [r3, #0]
	bsb = bsb << 3;
 8000624:	210f      	movs	r1, #15
 8000626:	187b      	adds	r3, r7, r1
 8000628:	187a      	adds	r2, r7, r1
 800062a:	7812      	ldrb	r2, [r2, #0]
 800062c:	00d2      	lsls	r2, r2, #3
 800062e:	701a      	strb	r2, [r3, #0]
	rwb = 0x01 << 2; // write
 8000630:	2016      	movs	r0, #22
 8000632:	183b      	adds	r3, r7, r0
 8000634:	2204      	movs	r2, #4
 8000636:	701a      	strb	r2, [r3, #0]
	om = 00; // VDM
 8000638:	2415      	movs	r4, #21
 800063a:	193b      	adds	r3, r7, r4
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
	c_phase = bsb | rwb | om;
 8000640:	187a      	adds	r2, r7, r1
 8000642:	183b      	adds	r3, r7, r0
 8000644:	7812      	ldrb	r2, [r2, #0]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4313      	orrs	r3, r2
 800064a:	b2da      	uxtb	r2, r3
 800064c:	193b      	adds	r3, r7, r4
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4313      	orrs	r3, r2
 8000652:	b2da      	uxtb	r2, r3
 8000654:	2411      	movs	r4, #17
 8000656:	193b      	adds	r3, r7, r4
 8000658:	701a      	strb	r2, [r3, #0]
	os_address = (address << 8) + ((address >> 8) & 0x00FF);
 800065a:	230c      	movs	r3, #12
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	ba5b      	rev16	r3, r3
 8000662:	b29a      	uxth	r2, r3
 8000664:	2112      	movs	r1, #18
 8000666:	187b      	adds	r3, r7, r1
 8000668:	801a      	strh	r2, [r3, #0]
	p = buff;
 800066a:	4b20      	ldr	r3, [pc, #128]	@ (80006ec <eth_write_reg+0x114>)
 800066c:	69ba      	ldr	r2, [r7, #24]
 800066e:	601a      	str	r2, [r3, #0]
	memcpy(p, &os_address, 2);
 8000670:	4b1e      	ldr	r3, [pc, #120]	@ (80006ec <eth_write_reg+0x114>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	1879      	adds	r1, r7, r1
 8000676:	2202      	movs	r2, #2
 8000678:	0018      	movs	r0, r3
 800067a:	f004 fe83 	bl	8005384 <memcpy>
	p += 2;
 800067e:	4b1b      	ldr	r3, [pc, #108]	@ (80006ec <eth_write_reg+0x114>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	1c9a      	adds	r2, r3, #2
 8000684:	4b19      	ldr	r3, [pc, #100]	@ (80006ec <eth_write_reg+0x114>)
 8000686:	601a      	str	r2, [r3, #0]
	memcpy(p, &c_phase, 1);
 8000688:	4b18      	ldr	r3, [pc, #96]	@ (80006ec <eth_write_reg+0x114>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	193a      	adds	r2, r7, r4
 800068e:	7812      	ldrb	r2, [r2, #0]
 8000690:	701a      	strb	r2, [r3, #0]
	p += 1;
 8000692:	4b16      	ldr	r3, [pc, #88]	@ (80006ec <eth_write_reg+0x114>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	1c5a      	adds	r2, r3, #1
 8000698:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <eth_write_reg+0x114>)
 800069a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
 80006a0:	e00e      	b.n	80006c0 <eth_write_reg+0xe8>
		memcpy(p, &data[i], 1);
 80006a2:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <eth_write_reg+0x114>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	69fa      	ldr	r2, [r7, #28]
 80006a8:	68b9      	ldr	r1, [r7, #8]
 80006aa:	188a      	adds	r2, r1, r2
 80006ac:	7812      	ldrb	r2, [r2, #0]
 80006ae:	701a      	strb	r2, [r3, #0]
		p += 1;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <eth_write_reg+0x114>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	1c5a      	adds	r2, r3, #1
 80006b6:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <eth_write_reg+0x114>)
 80006b8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	3301      	adds	r3, #1
 80006be:	61fb      	str	r3, [r7, #28]
 80006c0:	1dbb      	adds	r3, r7, #6
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	69fa      	ldr	r2, [r7, #28]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	dbeb      	blt.n	80006a2 <eth_write_reg+0xca>
	}
	transmitir_spi(buff, t);
 80006ca:	2317      	movs	r3, #23
 80006cc:	18fb      	adds	r3, r7, r3
 80006ce:	781a      	ldrb	r2, [r3, #0]
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	0011      	movs	r1, r2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f7ff fe89 	bl	80003ec <transmitir_spi>
	free(buff);
 80006da:	69bb      	ldr	r3, [r7, #24]
 80006dc:	0018      	movs	r0, r3
 80006de:	f004 fd4f 	bl	8005180 <free>
}
 80006e2:	46c0      	nop			@ (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b009      	add	sp, #36	@ 0x24
 80006e8:	bd90      	pop	{r4, r7, pc}
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	20000370 	.word	0x20000370

080006f0 <socket_write_register>:

void socket_write_register(uint8_t *buff, uint16_t address, uint8_t bsb,
		uint8_t *data, uint16_t len) { // Los registros de socket brindan la comunicación del canal. Con BSB[4:0] se puede seleccionar el socket a utilizar
 80006f0:	b5b0      	push	{r4, r5, r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	0008      	movs	r0, r1
 80006fa:	0011      	movs	r1, r2
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	240a      	movs	r4, #10
 8000700:	193b      	adds	r3, r7, r4
 8000702:	1c02      	adds	r2, r0, #0
 8000704:	801a      	strh	r2, [r3, #0]
 8000706:	2009      	movs	r0, #9
 8000708:	183b      	adds	r3, r7, r0
 800070a:	1c0a      	adds	r2, r1, #0
 800070c:	701a      	strb	r2, [r3, #0]
	uint16_t os_address;
	uint8_t rwb;
	uint8_t om;
	uint8_t c_phase;
	uint8_t t = 3 + len;
 800070e:	2328      	movs	r3, #40	@ 0x28
 8000710:	2208      	movs	r2, #8
 8000712:	189b      	adds	r3, r3, r2
 8000714:	19db      	adds	r3, r3, r7
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	231b      	movs	r3, #27
 800071c:	18fb      	adds	r3, r7, r3
 800071e:	3203      	adds	r2, #3
 8000720:	701a      	strb	r2, [r3, #0]
	bsb = bsb << 3;
 8000722:	0001      	movs	r1, r0
 8000724:	187b      	adds	r3, r7, r1
 8000726:	187a      	adds	r2, r7, r1
 8000728:	7812      	ldrb	r2, [r2, #0]
 800072a:	00d2      	lsls	r2, r2, #3
 800072c:	701a      	strb	r2, [r3, #0]
	rwb = 0x01 << 2; // write
 800072e:	201a      	movs	r0, #26
 8000730:	183b      	adds	r3, r7, r0
 8000732:	2204      	movs	r2, #4
 8000734:	701a      	strb	r2, [r3, #0]
	om = 00; // VDM
 8000736:	2519      	movs	r5, #25
 8000738:	197b      	adds	r3, r7, r5
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
	c_phase = bsb | rwb | om;
 800073e:	187a      	adds	r2, r7, r1
 8000740:	183b      	adds	r3, r7, r0
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	4313      	orrs	r3, r2
 8000748:	b2da      	uxtb	r2, r3
 800074a:	197b      	adds	r3, r7, r5
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	4313      	orrs	r3, r2
 8000750:	b2da      	uxtb	r2, r3
 8000752:	2515      	movs	r5, #21
 8000754:	197b      	adds	r3, r7, r5
 8000756:	701a      	strb	r2, [r3, #0]
	//os_address_1 = address << 8;
	os_address = (address << 8) + ((address >> 8) & 0x00FF);
 8000758:	193b      	adds	r3, r7, r4
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	ba5b      	rev16	r3, r3
 800075e:	b29a      	uxth	r2, r3
 8000760:	2116      	movs	r1, #22
 8000762:	187b      	adds	r3, r7, r1
 8000764:	801a      	strh	r2, [r3, #0]
	p = buff;
 8000766:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <socket_write_register+0xf4>)
 8000768:	68fa      	ldr	r2, [r7, #12]
 800076a:	601a      	str	r2, [r3, #0]
	memcpy(p, &os_address, 2);
 800076c:	4b1d      	ldr	r3, [pc, #116]	@ (80007e4 <socket_write_register+0xf4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	1879      	adds	r1, r7, r1
 8000772:	2202      	movs	r2, #2
 8000774:	0018      	movs	r0, r3
 8000776:	f004 fe05 	bl	8005384 <memcpy>
	p += 2;
 800077a:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <socket_write_register+0xf4>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	1c9a      	adds	r2, r3, #2
 8000780:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <socket_write_register+0xf4>)
 8000782:	601a      	str	r2, [r3, #0]
	memcpy(p, &c_phase, 1);
 8000784:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <socket_write_register+0xf4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	197a      	adds	r2, r7, r5
 800078a:	7812      	ldrb	r2, [r2, #0]
 800078c:	701a      	strb	r2, [r3, #0]
	p += 1;
 800078e:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <socket_write_register+0xf4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	1c5a      	adds	r2, r3, #1
 8000794:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <socket_write_register+0xf4>)
 8000796:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
 800079c:	e00e      	b.n	80007bc <socket_write_register+0xcc>
		memcpy(p, &data[i], 1);
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <socket_write_register+0xf4>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	69fa      	ldr	r2, [r7, #28]
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	188a      	adds	r2, r1, r2
 80007a8:	7812      	ldrb	r2, [r2, #0]
 80007aa:	701a      	strb	r2, [r3, #0]
		p += 1;
 80007ac:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <socket_write_register+0xf4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	1c5a      	adds	r2, r3, #1
 80007b2:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <socket_write_register+0xf4>)
 80007b4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3301      	adds	r3, #1
 80007ba:	61fb      	str	r3, [r7, #28]
 80007bc:	2328      	movs	r3, #40	@ 0x28
 80007be:	2208      	movs	r2, #8
 80007c0:	189b      	adds	r3, r3, r2
 80007c2:	19db      	adds	r3, r3, r7
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	69fa      	ldr	r2, [r7, #28]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	dbe8      	blt.n	800079e <socket_write_register+0xae>
	}
	transmitir_spi(buff, t);
 80007cc:	231b      	movs	r3, #27
 80007ce:	18fb      	adds	r3, r7, r3
 80007d0:	781a      	ldrb	r2, [r3, #0]
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	0011      	movs	r1, r2
 80007d6:	0018      	movs	r0, r3
 80007d8:	f7ff fe08 	bl	80003ec <transmitir_spi>
}
 80007dc:	46c0      	nop			@ (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b008      	add	sp, #32
 80007e2:	bdb0      	pop	{r4, r5, r7, pc}
 80007e4:	20000370 	.word	0x20000370

080007e8 <eth_read_reg>:

void eth_read_reg(uint8_t BSB_SELECT, uint16_t offset, uint8_t *buffer_r,
		uint16_t buffer_r_len) {
 80007e8:	b5b0      	push	{r4, r5, r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	0004      	movs	r4, r0
 80007f0:	0008      	movs	r0, r1
 80007f2:	60ba      	str	r2, [r7, #8]
 80007f4:	0019      	movs	r1, r3
 80007f6:	250f      	movs	r5, #15
 80007f8:	197b      	adds	r3, r7, r5
 80007fa:	1c22      	adds	r2, r4, #0
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	240c      	movs	r4, #12
 8000800:	193b      	adds	r3, r7, r4
 8000802:	1c02      	adds	r2, r0, #0
 8000804:	801a      	strh	r2, [r3, #0]
 8000806:	1dbb      	adds	r3, r7, #6
 8000808:	1c0a      	adds	r2, r1, #0
 800080a:	801a      	strh	r2, [r3, #0]
	uint16_t offset_address=0; /* esta inicialización*/
 800080c:	211e      	movs	r1, #30
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2200      	movs	r2, #0
 8000812:	801a      	strh	r2, [r3, #0]
	uint8_t buffer_t[3];
	offset_address = offset << 8;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	0020      	movs	r0, r4
 8000818:	183a      	adds	r2, r7, r0
 800081a:	8812      	ldrh	r2, [r2, #0]
 800081c:	0212      	lsls	r2, r2, #8
 800081e:	801a      	strh	r2, [r3, #0]
	uint8_t BSB = BSB_SELECT << 3; // block select bit: 0x01 SOCKET REGISTER, 0x02 SOCKET TX BUFFER, 0x03 SOCKET RX BUFFER
 8000820:	211d      	movs	r1, #29
 8000822:	187b      	adds	r3, r7, r1
 8000824:	197a      	adds	r2, r7, r5
 8000826:	7812      	ldrb	r2, [r2, #0]
 8000828:	00d2      	lsls	r2, r2, #3
 800082a:	701a      	strb	r2, [r3, #0]
	uint8_t RWB = 0x00 << 2; // read
 800082c:	241c      	movs	r4, #28
 800082e:	193b      	adds	r3, r7, r4
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
	uint8_t OM = 00; // VDM
 8000834:	251b      	movs	r5, #27
 8000836:	197b      	adds	r3, r7, r5
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
	uint8_t control_phase = BSB | RWB | OM;
 800083c:	187a      	adds	r2, r7, r1
 800083e:	193b      	adds	r3, r7, r4
 8000840:	7812      	ldrb	r2, [r2, #0]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	4313      	orrs	r3, r2
 8000846:	b2d9      	uxtb	r1, r3
 8000848:	241a      	movs	r4, #26
 800084a:	193b      	adds	r3, r7, r4
 800084c:	197a      	adds	r2, r7, r5
 800084e:	7812      	ldrb	r2, [r2, #0]
 8000850:	430a      	orrs	r2, r1
 8000852:	701a      	strb	r2, [r3, #0]
	buffer_t[0] = (offset >> 8) & 0xFF;
 8000854:	183b      	adds	r3, r7, r0
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	b29b      	uxth	r3, r3
 800085c:	b2da      	uxtb	r2, r3
 800085e:	2114      	movs	r1, #20
 8000860:	187b      	adds	r3, r7, r1
 8000862:	701a      	strb	r2, [r3, #0]
	buffer_t[1] = (offset & 0xFF);
 8000864:	183b      	adds	r3, r7, r0
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	187b      	adds	r3, r7, r1
 800086c:	705a      	strb	r2, [r3, #1]
	buffer_t[2] = control_phase;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	193a      	adds	r2, r7, r4
 8000872:	7812      	ldrb	r2, [r2, #0]
 8000874:	709a      	strb	r2, [r3, #2]
	transmitir_recibir_spi(buffer_t, 3, buffer_r, buffer_r_len);
 8000876:	1dbb      	adds	r3, r7, #6
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	68ba      	ldr	r2, [r7, #8]
 800087c:	1878      	adds	r0, r7, r1
 800087e:	2103      	movs	r1, #3
 8000880:	f7ff fdec 	bl	800045c <transmitir_recibir_spi>
}
 8000884:	46c0      	nop			@ (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b008      	add	sp, #32
 800088a:	bdb0      	pop	{r4, r5, r7, pc}

0800088c <socket_reg_config>:
}

void socket_reg_config(uint8_t buffer[243], uint8_t S_MR, uint8_t S_PORT[2],
		uint8_t S_DHAR[6], uint8_t S_DPORT[2], uint8_t S_MMS[2], uint8_t S_TTL,
		uint8_t S_RXBUF_SIZE, uint8_t S_TXBUF_SIZE, uint8_t S_CR_open,
		uint8_t S_CR_listen) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af02      	add	r7, sp, #8
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	200b      	movs	r0, #11
 800089a:	183b      	adds	r3, r7, r0
 800089c:	1c0a      	adds	r2, r1, #0
 800089e:	701a      	strb	r2, [r3, #0]
	//---------------------- configuration socket register
	socket_write_register(buffer, 0x00, 0x01, (uint8_t*) &S_MR, sizeof(S_MR));
 80008a0:	183b      	adds	r3, r7, r0
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	2201      	movs	r2, #1
 80008a6:	9200      	str	r2, [sp, #0]
 80008a8:	2201      	movs	r2, #1
 80008aa:	2100      	movs	r1, #0
 80008ac:	f7ff ff20 	bl	80006f0 <socket_write_register>
	socket_write_register(buffer, 0x04, 0x01, (uint8_t*) S_PORT,
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	2204      	movs	r2, #4
 80008b6:	9200      	str	r2, [sp, #0]
 80008b8:	2201      	movs	r2, #1
 80008ba:	2104      	movs	r1, #4
 80008bc:	f7ff ff18 	bl	80006f0 <socket_write_register>
			sizeof(S_PORT));
	socket_write_register(buffer, 0x06, 0x01, (uint8_t*) &S_DHAR,
 80008c0:	003b      	movs	r3, r7
 80008c2:	68f8      	ldr	r0, [r7, #12]
 80008c4:	2204      	movs	r2, #4
 80008c6:	9200      	str	r2, [sp, #0]
 80008c8:	2201      	movs	r2, #1
 80008ca:	2106      	movs	r1, #6
 80008cc:	f7ff ff10 	bl	80006f0 <socket_write_register>
			sizeof(S_DHAR));
	socket_write_register(buffer, 0x10, 0x01, (uint8_t*) S_DPORT,
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	2204      	movs	r2, #4
 80008d6:	9200      	str	r2, [sp, #0]
 80008d8:	2201      	movs	r2, #1
 80008da:	2110      	movs	r1, #16
 80008dc:	f7ff ff08 	bl	80006f0 <socket_write_register>
			sizeof(S_DPORT));
	socket_write_register(buffer, 0x12, 0x01, (uint8_t*) &S_MMS, sizeof(S_MMS));
 80008e0:	231c      	movs	r3, #28
 80008e2:	18fb      	adds	r3, r7, r3
 80008e4:	68f8      	ldr	r0, [r7, #12]
 80008e6:	2204      	movs	r2, #4
 80008e8:	9200      	str	r2, [sp, #0]
 80008ea:	2201      	movs	r2, #1
 80008ec:	2112      	movs	r1, #18
 80008ee:	f7ff feff 	bl	80006f0 <socket_write_register>
	socket_write_register(buffer, 0x16, 0x01, (uint8_t*) &S_TTL, sizeof(S_TTL));
 80008f2:	2320      	movs	r3, #32
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	68f8      	ldr	r0, [r7, #12]
 80008f8:	2201      	movs	r2, #1
 80008fa:	9200      	str	r2, [sp, #0]
 80008fc:	2201      	movs	r2, #1
 80008fe:	2116      	movs	r1, #22
 8000900:	f7ff fef6 	bl	80006f0 <socket_write_register>
	socket_write_register(buffer, 0x1E, 0x01, (uint8_t*) &S_RXBUF_SIZE,
 8000904:	2324      	movs	r3, #36	@ 0x24
 8000906:	18fb      	adds	r3, r7, r3
 8000908:	68f8      	ldr	r0, [r7, #12]
 800090a:	2201      	movs	r2, #1
 800090c:	9200      	str	r2, [sp, #0]
 800090e:	2201      	movs	r2, #1
 8000910:	211e      	movs	r1, #30
 8000912:	f7ff feed 	bl	80006f0 <socket_write_register>
			sizeof(S_RXBUF_SIZE));
	socket_write_register(buffer, 0x1F, 0x01, (uint8_t*) &S_TXBUF_SIZE,
 8000916:	2328      	movs	r3, #40	@ 0x28
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	68f8      	ldr	r0, [r7, #12]
 800091c:	2201      	movs	r2, #1
 800091e:	9200      	str	r2, [sp, #0]
 8000920:	2201      	movs	r2, #1
 8000922:	211f      	movs	r1, #31
 8000924:	f7ff fee4 	bl	80006f0 <socket_write_register>
			sizeof(S_TXBUF_SIZE));
	socket_write_register(buffer, 0x01, 0x01, (uint8_t*) &S_CR_open,
 8000928:	232c      	movs	r3, #44	@ 0x2c
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	68f8      	ldr	r0, [r7, #12]
 800092e:	2201      	movs	r2, #1
 8000930:	9200      	str	r2, [sp, #0]
 8000932:	2201      	movs	r2, #1
 8000934:	2101      	movs	r1, #1
 8000936:	f7ff fedb 	bl	80006f0 <socket_write_register>
			sizeof(S_CR_open));
	socket_write_register(buffer, 0x01, 0x01, (uint8_t*) &S_CR_listen,
 800093a:	2330      	movs	r3, #48	@ 0x30
 800093c:	18fb      	adds	r3, r7, r3
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	2201      	movs	r2, #1
 8000942:	9200      	str	r2, [sp, #0]
 8000944:	2201      	movs	r2, #1
 8000946:	2101      	movs	r1, #1
 8000948:	f7ff fed2 	bl	80006f0 <socket_write_register>
			sizeof(S_CR_listen));
}
 800094c:	46c0      	nop			@ (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b004      	add	sp, #16
 8000952:	bd80      	pop	{r7, pc}

08000954 <socket_cmd_cfg>:
	cmd[0] = S_CR_SEND;
	eth_write_reg(sn_reg, S_CR_OFFSET, cmd, sizeof(cmd));

}

void socket_cmd_cfg(uint8_t sn_reg, uint8_t cmd) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	0002      	movs	r2, r0
 800095c:	1dfb      	adds	r3, r7, #7
 800095e:	701a      	strb	r2, [r3, #0]
 8000960:	1dbb      	adds	r3, r7, #6
 8000962:	1c0a      	adds	r2, r1, #0
 8000964:	701a      	strb	r2, [r3, #0]
	// SOCK_ESTABLISHED
	eth_write_reg(sn_reg, S_CR_OFFSET, (uint8_t*) &cmd, sizeof(cmd));
 8000966:	1dba      	adds	r2, r7, #6
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	7818      	ldrb	r0, [r3, #0]
 800096c:	2301      	movs	r3, #1
 800096e:	2101      	movs	r1, #1
 8000970:	f7ff fe32 	bl	80005d8 <eth_write_reg>

}
 8000974:	46c0      	nop			@ (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b002      	add	sp, #8
 800097a:	bd80      	pop	{r7, pc}

0800097c <read_socket_n_rx_buffer_len>:

uint16_t read_socket_n_rx_buffer_len(uint8_t sn_reg) {
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	0002      	movs	r2, r0
 8000984:	1dfb      	adds	r3, r7, #7
 8000986:	701a      	strb	r2, [r3, #0]
	uint8_t s_RX_RS[2];
	eth_read_reg(sn_reg, S_RX_RS_OFFSET, s_RX_RS, sizeof(s_RX_RS));
 8000988:	240c      	movs	r4, #12
 800098a:	193a      	adds	r2, r7, r4
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	7818      	ldrb	r0, [r3, #0]
 8000990:	2302      	movs	r3, #2
 8000992:	2126      	movs	r1, #38	@ 0x26
 8000994:	f7ff ff28 	bl	80007e8 <eth_read_reg>
	return ((s_RX_RS[1]) & 0xFFFF) | ((s_RX_RS[0] << 8) & 0xFFFF);
 8000998:	0021      	movs	r1, r4
 800099a:	187b      	adds	r3, r7, r1
 800099c:	785b      	ldrb	r3, [r3, #1]
 800099e:	b21a      	sxth	r2, r3
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	021b      	lsls	r3, r3, #8
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	4313      	orrs	r3, r2
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	b29b      	uxth	r3, r3
}
 80009ae:	0018      	movs	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b005      	add	sp, #20
 80009b4:	bd90      	pop	{r4, r7, pc}

080009b6 <read_socket_n_rx_buffer_read_addr>:

uint16_t read_socket_n_rx_buffer_read_addr(uint8_t sn_reg) {
 80009b6:	b590      	push	{r4, r7, lr}
 80009b8:	b085      	sub	sp, #20
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	0002      	movs	r2, r0
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	701a      	strb	r2, [r3, #0]
	uint8_t s_RX_RD[2];
	eth_read_reg(sn_reg, S_RX_RD_OFFSET, s_RX_RD, sizeof(s_RX_RD));
 80009c2:	240c      	movs	r4, #12
 80009c4:	193a      	adds	r2, r7, r4
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	7818      	ldrb	r0, [r3, #0]
 80009ca:	2302      	movs	r3, #2
 80009cc:	2128      	movs	r1, #40	@ 0x28
 80009ce:	f7ff ff0b 	bl	80007e8 <eth_read_reg>
	return ((s_RX_RD[1]) & 0xFFFF) | ((s_RX_RD[0] << 8) & 0xFFFF);
 80009d2:	0021      	movs	r1, r4
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	785b      	ldrb	r3, [r3, #1]
 80009d8:	b21a      	sxth	r2, r3
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	4313      	orrs	r3, r2
 80009e4:	b21b      	sxth	r3, r3
 80009e6:	b29b      	uxth	r3, r3
}
 80009e8:	0018      	movs	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b005      	add	sp, #20
 80009ee:	bd90      	pop	{r4, r7, pc}

080009f0 <update_socket_n_rx_buffer_addr>:

void update_socket_n_rx_buffer_addr(uint8_t sn_reg, uint16_t offset_address) {
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	0002      	movs	r2, r0
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	701a      	strb	r2, [r3, #0]
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	1c0a      	adds	r2, r1, #0
 8000a00:	801a      	strh	r2, [r3, #0]
	uint8_t s_RX_RD[2];
	s_RX_RD[0] = (offset_address >> 8) & 0x00FF;
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	0a1b      	lsrs	r3, r3, #8
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	210c      	movs	r1, #12
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	701a      	strb	r2, [r3, #0]
	s_RX_RD[1] = (offset_address) & 0x00FF;
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	705a      	strb	r2, [r3, #1]
	eth_write_reg(sn_reg, S_RX_RD_OFFSET, &(s_RX_RD[0]), 1);
 8000a1c:	000c      	movs	r4, r1
 8000a1e:	187a      	adds	r2, r7, r1
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	7818      	ldrb	r0, [r3, #0]
 8000a24:	2301      	movs	r3, #1
 8000a26:	2128      	movs	r1, #40	@ 0x28
 8000a28:	f7ff fdd6 	bl	80005d8 <eth_write_reg>
	eth_write_reg(sn_reg, S_RX_RD_OFFSET+1, &(s_RX_RD[1]), 1);
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	1c5a      	adds	r2, r3, #1
 8000a30:	1dfb      	adds	r3, r7, #7
 8000a32:	7818      	ldrb	r0, [r3, #0]
 8000a34:	2301      	movs	r3, #1
 8000a36:	2129      	movs	r1, #41	@ 0x29
 8000a38:	f7ff fdce 	bl	80005d8 <eth_write_reg>
}
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b005      	add	sp, #20
 8000a42:	bd90      	pop	{r4, r7, pc}

08000a44 <read_socket_n_rx_buffer>:

uint8_t read_socket_n_rx_buffer(uint8_t sn_reg, uint8_t *data_rcv) {
 8000a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	0002      	movs	r2, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	701a      	strb	r2, [r3, #0]
	uint16_t len_rx;
	uint16_t s_RX_RD_addr;
	uint16_t s_RX_RD_addr_updated;
	len_rx = read_socket_n_rx_buffer_len(sn_reg);
 8000a52:	250e      	movs	r5, #14
 8000a54:	197c      	adds	r4, r7, r5
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f7ff ff8e 	bl	800097c <read_socket_n_rx_buffer_len>
 8000a60:	0003      	movs	r3, r0
 8000a62:	8023      	strh	r3, [r4, #0]

	if (len_rx <= 0)
 8000a64:	197b      	adds	r3, r7, r5
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d101      	bne.n	8000a70 <read_socket_n_rx_buffer+0x2c>
		return (0);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	e029      	b.n	8000ac4 <read_socket_n_rx_buffer+0x80>
	s_RX_RD_addr = read_socket_n_rx_buffer_read_addr(sn_reg);
 8000a70:	250c      	movs	r5, #12
 8000a72:	197c      	adds	r4, r7, r5
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff ff9c 	bl	80009b6 <read_socket_n_rx_buffer_read_addr>
 8000a7e:	0003      	movs	r3, r0
 8000a80:	8023      	strh	r3, [r4, #0]
	eth_read_reg(sn_reg + S_N_RX_OFFSET, s_RX_RD_addr, data_rcv, len_rx);
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	3302      	adds	r3, #2
 8000a88:	b2d8      	uxtb	r0, r3
 8000a8a:	260e      	movs	r6, #14
 8000a8c:	19bb      	adds	r3, r7, r6
 8000a8e:	881c      	ldrh	r4, [r3, #0]
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	197b      	adds	r3, r7, r5
 8000a94:	8819      	ldrh	r1, [r3, #0]
 8000a96:	0023      	movs	r3, r4
 8000a98:	f7ff fea6 	bl	80007e8 <eth_read_reg>

	s_RX_RD_addr_updated = s_RX_RD_addr + len_rx;
 8000a9c:	200a      	movs	r0, #10
 8000a9e:	183b      	adds	r3, r7, r0
 8000aa0:	1979      	adds	r1, r7, r5
 8000aa2:	0034      	movs	r4, r6
 8000aa4:	193a      	adds	r2, r7, r4
 8000aa6:	8809      	ldrh	r1, [r1, #0]
 8000aa8:	8812      	ldrh	r2, [r2, #0]
 8000aaa:	188a      	adds	r2, r1, r2
 8000aac:	801a      	strh	r2, [r3, #0]
	update_socket_n_rx_buffer_addr(sn_reg, s_RX_RD_addr_updated);
 8000aae:	183b      	adds	r3, r7, r0
 8000ab0:	881a      	ldrh	r2, [r3, #0]
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	0011      	movs	r1, r2
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff ff99 	bl	80009f0 <update_socket_n_rx_buffer_addr>

	return len_rx;
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	b2db      	uxtb	r3, r3
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b005      	add	sp, #20
 8000aca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000acc <init_w5500_hw>:



void init_w5500_hw(W5500_HW_t *w5500_hw, SPI_HandleTypeDef *hspi,
		GPIO_TypeDef *nssPort, uint16_t nssPin, GPIO_TypeDef *nrstPort,
		uint16_t nrstPin) {
 8000acc:	b5b0      	push	{r4, r5, r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
 8000ad8:	001a      	movs	r2, r3
 8000ada:	1cbb      	adds	r3, r7, #2
 8000adc:	801a      	strh	r2, [r3, #0]
	assert_param(hspi != NULL);
	assert_param(nssPort != NULL);
	assert_param(nrstPort != NULL);


	w5500_hw->nssPin = nssPin;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	1cba      	adds	r2, r7, #2
 8000ae2:	8812      	ldrh	r2, [r2, #0]
 8000ae4:	811a      	strh	r2, [r3, #8]
	w5500_hw->nssPort = nssPort;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	605a      	str	r2, [r3, #4]
	w5500_hw->nrstPin = nrstPin;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	241c      	movs	r4, #28
 8000af0:	2508      	movs	r5, #8
 8000af2:	1962      	adds	r2, r4, r5
 8000af4:	19d2      	adds	r2, r2, r7
 8000af6:	8812      	ldrh	r2, [r2, #0]
 8000af8:	821a      	strh	r2, [r3, #16]
	w5500_hw->nrstPort = nrstPort;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6a3a      	ldr	r2, [r7, #32]
 8000afe:	60da      	str	r2, [r3, #12]
	w5500_hw->spi = hspi;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 8000b06:	1cbb      	adds	r3, r7, #2
 8000b08:	8819      	ldrh	r1, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f001 ff76 	bl	8002a00 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000b14:	2002      	movs	r0, #2
 8000b16:	f000 fdfd 	bl	8001714 <HAL_Delay>
	HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 8000b1a:	1cbb      	adds	r3, r7, #2
 8000b1c:	8819      	ldrh	r1, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2201      	movs	r2, #1
 8000b22:	0018      	movs	r0, r3
 8000b24:	f001 ff6c 	bl	8002a00 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(nrstPort, nrstPin, GPIO_PIN_SET);
 8000b28:	1963      	adds	r3, r4, r5
 8000b2a:	19db      	adds	r3, r3, r7
 8000b2c:	8819      	ldrh	r1, [r3, #0]
 8000b2e:	6a3b      	ldr	r3, [r7, #32]
 8000b30:	2201      	movs	r2, #1
 8000b32:	0018      	movs	r0, r3
 8000b34:	f001 ff64 	bl	8002a00 <HAL_GPIO_WritePin>


}
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b004      	add	sp, #16
 8000b3e:	bdb0      	pop	{r4, r5, r7, pc}

08000b40 <Read_ADC_Channel>:
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

uint32_t Read_ADC_Channel(uint32_t channel) {
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000b48:	2408      	movs	r4, #8
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	230c      	movs	r3, #12
 8000b50:	001a      	movs	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	f004 fbd0 	bl	80052f8 <memset>
	sConfig.Channel = channel;
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000b6a:	193a      	adds	r2, r7, r4
 8000b6c:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <Read_ADC_Channel+0x74>)
 8000b6e:	0011      	movs	r1, r2
 8000b70:	0018      	movs	r0, r3
 8000b72:	f001 fa2f 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 8000b76:	1e03      	subs	r3, r0, #0
 8000b78:	d001      	beq.n	8000b7e <Read_ADC_Channel+0x3e>
		Error_Handler();
 8000b7a:	f000 fb49 	bl	8001210 <Error_Handler>
	}

	HAL_ADC_Start(&hadc1);
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <Read_ADC_Channel+0x74>)
 8000b80:	0018      	movs	r0, r3
 8000b82:	f001 f8fd 	bl	8001d80 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b86:	2301      	movs	r3, #1
 8000b88:	425a      	negs	r2, r3
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <Read_ADC_Channel+0x74>)
 8000b8c:	0011      	movs	r1, r2
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f001 f980 	bl	8001e94 <HAL_ADC_PollForConversion>
	uint32_t value = HAL_ADC_GetValue(&hadc1);
 8000b94:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <Read_ADC_Channel+0x74>)
 8000b96:	0018      	movs	r0, r3
 8000b98:	f001 fa10 	bl	8001fbc <HAL_ADC_GetValue>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	617b      	str	r3, [r7, #20]
	HAL_ADC_Stop(&hadc1);
 8000ba0:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <Read_ADC_Channel+0x74>)
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f001 f93a 	bl	8001e1c <HAL_ADC_Stop>

	return value;
 8000ba8:	697b      	ldr	r3, [r7, #20]
}
 8000baa:	0018      	movs	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b007      	add	sp, #28
 8000bb0:	bd90      	pop	{r4, r7, pc}
 8000bb2:	46c0      	nop			@ (mov r8, r8)
 8000bb4:	200000bc 	.word	0x200000bc

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bba:	46c6      	mov	lr, r8
 8000bbc:	b500      	push	{lr}
 8000bbe:	b08a      	sub	sp, #40	@ 0x28
 8000bc0:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc2:	f000 fd21 	bl	8001608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc6:	f000 f935 	bl	8000e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bca:	f000 fab1 	bl	8001130 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bce:	f000 f979 	bl	8000ec4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000bd2:	f000 f9e1 	bl	8000f98 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000bd6:	f000 fa1f 	bl	8001018 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000bda:	f000 fa5b 	bl	8001094 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	uint8_t ip[]={0,0,0,0};
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
	init_w5500_hw(&w5500_hw, &hspi1, W5500_NSS_GPIO_Port, W5500_NSS_Pin, W5500_NRST_GPIO_Port, W5500_NRST_Pin);
 8000be4:	4a73      	ldr	r2, [pc, #460]	@ (8000db4 <main+0x1fc>)
 8000be6:	4974      	ldr	r1, [pc, #464]	@ (8000db8 <main+0x200>)
 8000be8:	4874      	ldr	r0, [pc, #464]	@ (8000dbc <main+0x204>)
 8000bea:	2380      	movs	r3, #128	@ 0x80
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	23a0      	movs	r3, #160	@ 0xa0
 8000bf2:	05db      	lsls	r3, r3, #23
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	f7ff ff68 	bl	8000acc <init_w5500_hw>
	eth_read_reg(0,0x0F,ip,4);
 8000bfc:	1d3a      	adds	r2, r7, #4
 8000bfe:	2304      	movs	r3, #4
 8000c00:	210f      	movs	r1, #15
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff fdf0 	bl	80007e8 <eth_read_reg>
	common_register_block(buffer, 0x0F, sipr, sizeof(sipr));
 8000c08:	4a6d      	ldr	r2, [pc, #436]	@ (8000dc0 <main+0x208>)
 8000c0a:	486e      	ldr	r0, [pc, #440]	@ (8000dc4 <main+0x20c>)
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	210f      	movs	r1, #15
 8000c10:	f7ff fc6e 	bl	80004f0 <common_register_block>
	eth_read_reg(0,0x0F,ip,4);
 8000c14:	1d3a      	adds	r2, r7, #4
 8000c16:	2304      	movs	r3, #4
 8000c18:	210f      	movs	r1, #15
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f7ff fde4 	bl	80007e8 <eth_read_reg>


	//PHYSCIS configuration of the chip//
	eth_write_reg(COMMON_REG_OFFSET, PHYCFGR_RST_OFFSET,
 8000c20:	4a69      	ldr	r2, [pc, #420]	@ (8000dc8 <main+0x210>)
 8000c22:	2301      	movs	r3, #1
 8000c24:	212e      	movs	r1, #46	@ 0x2e
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff fcd6 	bl	80005d8 <eth_write_reg>
			(uint8_t*) &_PHYCFGR_RST, sizeof(_PHYCFGR_RST));
	HAL_Delay(500);
 8000c2c:	23fa      	movs	r3, #250	@ 0xfa
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	0018      	movs	r0, r3
 8000c32:	f000 fd6f 	bl	8001714 <HAL_Delay>
	eth_write_reg(COMMON_REG_OFFSET, PHYCFGR_RST_OFFSET,
 8000c36:	4a65      	ldr	r2, [pc, #404]	@ (8000dcc <main+0x214>)
 8000c38:	2301      	movs	r3, #1
 8000c3a:	212e      	movs	r1, #46	@ 0x2e
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff fccb 	bl	80005d8 <eth_write_reg>
			(uint8_t*) &_PHYCFGR_NRST, sizeof(_PHYCFGR_NRST));
	HAL_Delay(200);
 8000c42:	20c8      	movs	r0, #200	@ 0xc8
 8000c44:	f000 fd66 	bl	8001714 <HAL_Delay>


	/*Configuration of common registers*/
	//common_reg_config(buffer, mode, gar, sub_r, shar, sipr);

	common_register_block(buffer, 0x00, (uint8_t*) &mode, sizeof(mode));
 8000c48:	4a61      	ldr	r2, [pc, #388]	@ (8000dd0 <main+0x218>)
 8000c4a:	485e      	ldr	r0, [pc, #376]	@ (8000dc4 <main+0x20c>)
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f7ff fc4e 	bl	80004f0 <common_register_block>
	common_register_block(buffer, 0x01, gar, sizeof(gar));
 8000c54:	4a5f      	ldr	r2, [pc, #380]	@ (8000dd4 <main+0x21c>)
 8000c56:	485b      	ldr	r0, [pc, #364]	@ (8000dc4 <main+0x20c>)
 8000c58:	2304      	movs	r3, #4
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	f7ff fc48 	bl	80004f0 <common_register_block>
	common_register_block(buffer, 0x05, sub_r, sizeof(sub_r));
 8000c60:	4a5d      	ldr	r2, [pc, #372]	@ (8000dd8 <main+0x220>)
 8000c62:	4858      	ldr	r0, [pc, #352]	@ (8000dc4 <main+0x20c>)
 8000c64:	2304      	movs	r3, #4
 8000c66:	2105      	movs	r1, #5
 8000c68:	f7ff fc42 	bl	80004f0 <common_register_block>
	common_register_block(buffer, 0x09, shar, sizeof(shar));
 8000c6c:	4a5b      	ldr	r2, [pc, #364]	@ (8000ddc <main+0x224>)
 8000c6e:	4855      	ldr	r0, [pc, #340]	@ (8000dc4 <main+0x20c>)
 8000c70:	2306      	movs	r3, #6
 8000c72:	2109      	movs	r1, #9
 8000c74:	f7ff fc3c 	bl	80004f0 <common_register_block>
	common_register_block(buffer, 0x0F, sipr, sizeof(sipr));
 8000c78:	4a51      	ldr	r2, [pc, #324]	@ (8000dc0 <main+0x208>)
 8000c7a:	4852      	ldr	r0, [pc, #328]	@ (8000dc4 <main+0x20c>)
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f7ff fc36 	bl	80004f0 <common_register_block>

	socket_reg_config(buffer, S_MR, S_PORT, S_DHAR, S_DPORT, S_MMS, S_TTL,
 8000c84:	4b56      	ldr	r3, [pc, #344]	@ (8000de0 <main+0x228>)
 8000c86:	781e      	ldrb	r6, [r3, #0]
 8000c88:	4b56      	ldr	r3, [pc, #344]	@ (8000de4 <main+0x22c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4a56      	ldr	r2, [pc, #344]	@ (8000de8 <main+0x230>)
 8000c8e:	7812      	ldrb	r2, [r2, #0]
 8000c90:	4956      	ldr	r1, [pc, #344]	@ (8000dec <main+0x234>)
 8000c92:	7809      	ldrb	r1, [r1, #0]
 8000c94:	4856      	ldr	r0, [pc, #344]	@ (8000df0 <main+0x238>)
 8000c96:	7800      	ldrb	r0, [r0, #0]
 8000c98:	4c56      	ldr	r4, [pc, #344]	@ (8000df4 <main+0x23c>)
 8000c9a:	7824      	ldrb	r4, [r4, #0]
 8000c9c:	4d56      	ldr	r5, [pc, #344]	@ (8000df8 <main+0x240>)
 8000c9e:	46a8      	mov	r8, r5
 8000ca0:	4d56      	ldr	r5, [pc, #344]	@ (8000dfc <main+0x244>)
 8000ca2:	46ac      	mov	ip, r5
 8000ca4:	4d47      	ldr	r5, [pc, #284]	@ (8000dc4 <main+0x20c>)
 8000ca6:	9406      	str	r4, [sp, #24]
 8000ca8:	9005      	str	r0, [sp, #20]
 8000caa:	9104      	str	r1, [sp, #16]
 8000cac:	9203      	str	r2, [sp, #12]
 8000cae:	9302      	str	r3, [sp, #8]
 8000cb0:	4b53      	ldr	r3, [pc, #332]	@ (8000e00 <main+0x248>)
 8000cb2:	9301      	str	r3, [sp, #4]
 8000cb4:	4b53      	ldr	r3, [pc, #332]	@ (8000e04 <main+0x24c>)
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	4643      	mov	r3, r8
 8000cba:	4662      	mov	r2, ip
 8000cbc:	0031      	movs	r1, r6
 8000cbe:	0028      	movs	r0, r5
 8000cc0:	f7ff fde4 	bl	800088c <socket_reg_config>
			S_RXBUF_SIZE, S_TXBUF_SIZE, S_CR_open, S_CR_listen);

	memset(ip,0,4);
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	2100      	movs	r1, #0
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f004 fb14 	bl	80052f8 <memset>
	eth_read_reg(0,0x0F,ip,4);
 8000cd0:	1d3a      	adds	r2, r7, #4
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	210f      	movs	r1, #15
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fd86 	bl	80007e8 <eth_read_reg>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		/* Read analog values */

		curr_bat = Read_ADC_Channel(ADC_CHANNEL_0);  // PA0
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f7ff ff2f 	bl	8000b40 <Read_ADC_Channel>
 8000ce2:	0002      	movs	r2, r0
 8000ce4:	4b48      	ldr	r3, [pc, #288]	@ (8000e08 <main+0x250>)
 8000ce6:	601a      	str	r2, [r3, #0]
		curr_up = Read_ADC_Channel(ADC_CHANNEL_1);   // PA1
 8000ce8:	4b48      	ldr	r3, [pc, #288]	@ (8000e0c <main+0x254>)
 8000cea:	0018      	movs	r0, r3
 8000cec:	f7ff ff28 	bl	8000b40 <Read_ADC_Channel>
 8000cf0:	0002      	movs	r2, r0
 8000cf2:	4b47      	ldr	r3, [pc, #284]	@ (8000e10 <main+0x258>)
 8000cf4:	601a      	str	r2, [r3, #0]
		curr_down = Read_ADC_Channel(ADC_CHANNEL_3); // PA3
 8000cf6:	4b47      	ldr	r3, [pc, #284]	@ (8000e14 <main+0x25c>)
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f7ff ff21 	bl	8000b40 <Read_ADC_Channel>
 8000cfe:	0002      	movs	r2, r0
 8000d00:	4b45      	ldr	r3, [pc, #276]	@ (8000e18 <main+0x260>)
 8000d02:	601a      	str	r2, [r3, #0]
		volt_bat = Read_ADC_Channel(ADC_CHANNEL_4);  // PA4
 8000d04:	4b45      	ldr	r3, [pc, #276]	@ (8000e1c <main+0x264>)
 8000d06:	0018      	movs	r0, r3
 8000d08:	f7ff ff1a 	bl	8000b40 <Read_ADC_Channel>
 8000d0c:	0002      	movs	r2, r0
 8000d0e:	4b44      	ldr	r3, [pc, #272]	@ (8000e20 <main+0x268>)
 8000d10:	601a      	str	r2, [r3, #0]
		/* Add your code to process the adcValue */
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
		//HAL_Delay(100);

		// LEER REGISTRO IR
		eth_read_reg(socket_0_register, S_IR_OFFSET, &s_IR, sizeof(s_IR));
 8000d12:	4a44      	ldr	r2, [pc, #272]	@ (8000e24 <main+0x26c>)
 8000d14:	2301      	movs	r3, #1
 8000d16:	2102      	movs	r1, #2
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f7ff fd65 	bl	80007e8 <eth_read_reg>

		if (s_IR & Sn_IR_MASK) {
 8000d1e:	4b41      	ldr	r3, [pc, #260]	@ (8000e24 <main+0x26c>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	001a      	movs	r2, r3
 8000d24:	231f      	movs	r3, #31
 8000d26:	4013      	ands	r3, r2
 8000d28:	d03d      	beq.n	8000da6 <main+0x1ee>
			uint8_t ir_reset;
			if (s_IR & Sn_CONNECT) {  // SOCK_ESTABLISHED
 8000d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e24 <main+0x26c>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	001a      	movs	r2, r3
 8000d30:	2301      	movs	r3, #1
 8000d32:	4013      	ands	r3, r2
 8000d34:	d006      	beq.n	8000d44 <main+0x18c>
				socket_cmd_cfg(socket_0_register, S_CR_CONNECT);
 8000d36:	2104      	movs	r1, #4
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f7ff fe0b 	bl	8000954 <socket_cmd_cfg>
				ir_reset = Sn_CONNECT;
 8000d3e:	1cfb      	adds	r3, r7, #3
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
			}
			if (s_IR & Sn_DISCONNECT) { //FIN/ACK
 8000d44:	4b37      	ldr	r3, [pc, #220]	@ (8000e24 <main+0x26c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	001a      	movs	r2, r3
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d00e      	beq.n	8000d6e <main+0x1b6>
				socket_cmd_cfg(socket_0_register, S_CR_DISCONECT);
 8000d50:	2108      	movs	r1, #8
 8000d52:	2001      	movs	r0, #1
 8000d54:	f7ff fdfe 	bl	8000954 <socket_cmd_cfg>
				socket_cmd_cfg(socket_0_register, S_CR_OPEN);
 8000d58:	2101      	movs	r1, #1
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f7ff fdfa 	bl	8000954 <socket_cmd_cfg>
				socket_cmd_cfg(socket_0_register, S_CR_LISTEN);
 8000d60:	2102      	movs	r1, #2
 8000d62:	2001      	movs	r0, #1
 8000d64:	f7ff fdf6 	bl	8000954 <socket_cmd_cfg>
				ir_reset = Sn_DISCONNECT;
 8000d68:	1cfb      	adds	r3, r7, #3
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	701a      	strb	r2, [r3, #0]
			}

			if ((s_IR & Sn_RECEIVE)) {
 8000d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e24 <main+0x26c>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	001a      	movs	r2, r3
 8000d74:	2304      	movs	r3, #4
 8000d76:	4013      	ands	r3, r2
 8000d78:	d00f      	beq.n	8000d9a <main+0x1e2>
				/*readDataFromEthernet*/
				eth_lenRX = read_socket_n_rx_buffer(socket_0_register,
 8000d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e28 <main+0x270>)
 8000d7c:	0019      	movs	r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f7ff fe60 	bl	8000a44 <read_socket_n_rx_buffer>
 8000d84:	0003      	movs	r3, r0
 8000d86:	001a      	movs	r2, r3
 8000d88:	4b28      	ldr	r3, [pc, #160]	@ (8000e2c <main+0x274>)
 8000d8a:	701a      	strb	r2, [r3, #0]
						eth_bufRX);
				socket_cmd_cfg(socket_0_register, S_CR_RECV);
 8000d8c:	2140      	movs	r1, #64	@ 0x40
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f7ff fde0 	bl	8000954 <socket_cmd_cfg>
				ir_reset = Sn_RECEIVE;
 8000d94:	1cfb      	adds	r3, r7, #3
 8000d96:	2204      	movs	r2, #4
 8000d98:	701a      	strb	r2, [r3, #0]
			}
			eth_write_reg(socket_0_register, S_IR_OFFSET, (uint8_t*) &ir_reset,
 8000d9a:	1cfa      	adds	r2, r7, #3
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	2102      	movs	r1, #2
 8000da0:	2001      	movs	r0, #1
 8000da2:	f7ff fc19 	bl	80005d8 <eth_write_reg>
					sizeof(ir_reset));

		}

		// lectura status del socket
		eth_read_reg(socket_0_register, S_SR_OFFSET, &s_SR, sizeof(s_SR));
 8000da6:	4a22      	ldr	r2, [pc, #136]	@ (8000e30 <main+0x278>)
 8000da8:	2301      	movs	r3, #1
 8000daa:	2103      	movs	r1, #3
 8000dac:	2001      	movs	r0, #1
 8000dae:	f7ff fd1b 	bl	80007e8 <eth_read_reg>
		curr_bat = Read_ADC_Channel(ADC_CHANNEL_0);  // PA0
 8000db2:	e793      	b.n	8000cdc <main+0x124>
 8000db4:	50000400 	.word	0x50000400
 8000db8:	20000174 	.word	0x20000174
 8000dbc:	200000a8 	.word	0x200000a8
 8000dc0:	20000010 	.word	0x20000010
 8000dc4:	2000027c 	.word	0x2000027c
 8000dc8:	20000025 	.word	0x20000025
 8000dcc:	20000026 	.word	0x20000026
 8000dd0:	20000014 	.word	0x20000014
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000004 	.word	0x20000004
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000015 	.word	0x20000015
 8000de4:	2000002e 	.word	0x2000002e
 8000de8:	20000022 	.word	0x20000022
 8000dec:	20000023 	.word	0x20000023
 8000df0:	20000016 	.word	0x20000016
 8000df4:	20000024 	.word	0x20000024
 8000df8:	20000028 	.word	0x20000028
 8000dfc:	20000018 	.word	0x20000018
 8000e00:	20000020 	.word	0x20000020
 8000e04:	2000001c 	.word	0x2000001c
 8000e08:	2000026c 	.word	0x2000026c
 8000e0c:	04000002 	.word	0x04000002
 8000e10:	20000270 	.word	0x20000270
 8000e14:	0c000008 	.word	0x0c000008
 8000e18:	20000274 	.word	0x20000274
 8000e1c:	10000010 	.word	0x10000010
 8000e20:	20000278 	.word	0x20000278
 8000e24:	20000374 	.word	0x20000374
 8000e28:	20000378 	.word	0x20000378
 8000e2c:	20000778 	.word	0x20000778
 8000e30:	20000375 	.word	0x20000375

08000e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b093      	sub	sp, #76	@ 0x4c
 8000e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3a:	2414      	movs	r4, #20
 8000e3c:	193b      	adds	r3, r7, r4
 8000e3e:	0018      	movs	r0, r3
 8000e40:	2334      	movs	r3, #52	@ 0x34
 8000e42:	001a      	movs	r2, r3
 8000e44:	2100      	movs	r1, #0
 8000e46:	f004 fa57 	bl	80052f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	2310      	movs	r3, #16
 8000e50:	001a      	movs	r2, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	f004 fa50 	bl	80052f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e58:	2380      	movs	r3, #128	@ 0x80
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f001 ff2b 	bl	8002cb8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	2202      	movs	r2, #2
 8000e66:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	2280      	movs	r2, #128	@ 0x80
 8000e6c:	0052      	lsls	r2, r2, #1
 8000e6e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	2240      	movs	r2, #64	@ 0x40
 8000e7a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e82:	193b      	adds	r3, r7, r4
 8000e84:	0018      	movs	r0, r3
 8000e86:	f001 ff63 	bl	8002d50 <HAL_RCC_OscConfig>
 8000e8a:	1e03      	subs	r3, r0, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000e8e:	f000 f9bf 	bl	8001210 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2100      	movs	r1, #0
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f002 fa5e 	bl	8003370 <HAL_RCC_ClockConfig>
 8000eb4:	1e03      	subs	r3, r0, #0
 8000eb6:	d001      	beq.n	8000ebc <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000eb8:	f000 f9aa 	bl	8001210 <Error_Handler>
  }
}
 8000ebc:	46c0      	nop			@ (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b013      	add	sp, #76	@ 0x4c
 8000ec2:	bd90      	pop	{r4, r7, pc}

08000ec4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	0018      	movs	r0, r3
 8000ece:	230c      	movs	r3, #12
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	f004 fa10 	bl	80052f8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000eda:	4a2e      	ldr	r2, [pc, #184]	@ (8000f94 <MX_ADC1_Init+0xd0>)
 8000edc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ede:	4b2c      	ldr	r3, [pc, #176]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000ee0:	2280      	movs	r2, #128	@ 0x80
 8000ee2:	05d2      	lsls	r2, r2, #23
 8000ee4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eec:	4b28      	ldr	r3, [pc, #160]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ef2:	4b27      	ldr	r3, [pc, #156]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef8:	4b25      	ldr	r3, [pc, #148]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000efa:	2204      	movs	r2, #4
 8000efc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000efe:	4b24      	ldr	r3, [pc, #144]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000f04:	4b22      	ldr	r3, [pc, #136]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f0a:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000f10:	4b1f      	ldr	r3, [pc, #124]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f16:	4b1e      	ldr	r3, [pc, #120]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000f18:	2220      	movs	r2, #32
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f24:	4b1a      	ldr	r3, [pc, #104]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f2a:	4b19      	ldr	r3, [pc, #100]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000f2c:	222c      	movs	r2, #44	@ 0x2c
 8000f2e:	2100      	movs	r1, #0
 8000f30:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f32:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000f38:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000f46:	223c      	movs	r2, #60	@ 0x3c
 8000f48:	2100      	movs	r1, #0
 8000f4a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f4c:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000f54:	0018      	movs	r0, r3
 8000f56:	f000 fd6b 	bl	8001a30 <HAL_ADC_Init>
 8000f5a:	1e03      	subs	r3, r0, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000f5e:	f000 f957 	bl	8001210 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2201      	movs	r2, #1
 8000f66:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f74:	1d3a      	adds	r2, r7, #4
 8000f76:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <MX_ADC1_Init+0xcc>)
 8000f78:	0011      	movs	r1, r2
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f001 f82a 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 8000f80:	1e03      	subs	r3, r0, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000f84:	f000 f944 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f88:	46c0      	nop			@ (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b004      	add	sp, #16
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200000bc 	.word	0x200000bc
 8000f94:	40012400 	.word	0x40012400

08000f98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800100c <MX_I2C1_Init+0x74>)
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001010 <MX_I2C1_Init+0x78>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <MX_I2C1_Init+0x74>)
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8001014 <MX_I2C1_Init+0x7c>)
 8000fa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	@ (800100c <MX_I2C1_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fae:	4b17      	ldr	r3, [pc, #92]	@ (800100c <MX_I2C1_Init+0x74>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	@ (800100c <MX_I2C1_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fba:	4b14      	ldr	r3, [pc, #80]	@ (800100c <MX_I2C1_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	@ (800100c <MX_I2C1_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	@ (800100c <MX_I2C1_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <MX_I2C1_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <MX_I2C1_Init+0x74>)
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f001 fd31 	bl	8002a3c <HAL_I2C_Init>
 8000fda:	1e03      	subs	r3, r0, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fde:	f000 f917 	bl	8001210 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <MX_I2C1_Init+0x74>)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f001 fdce 	bl	8002b88 <HAL_I2CEx_ConfigAnalogFilter>
 8000fec:	1e03      	subs	r3, r0, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ff0:	f000 f90e 	bl	8001210 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ff4:	4b05      	ldr	r3, [pc, #20]	@ (800100c <MX_I2C1_Init+0x74>)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f001 fe11 	bl	8002c20 <HAL_I2CEx_ConfigDigitalFilter>
 8000ffe:	1e03      	subs	r3, r0, #0
 8001000:	d001      	beq.n	8001006 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001002:	f000 f905 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000120 	.word	0x20000120
 8001010:	40005400 	.word	0x40005400
 8001014:	00303d5b 	.word	0x00303d5b

08001018 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800101c:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <MX_SPI1_Init+0x74>)
 800101e:	4a1c      	ldr	r2, [pc, #112]	@ (8001090 <MX_SPI1_Init+0x78>)
 8001020:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001022:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <MX_SPI1_Init+0x74>)
 8001024:	2282      	movs	r2, #130	@ 0x82
 8001026:	0052      	lsls	r2, r2, #1
 8001028:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800102a:	4b18      	ldr	r3, [pc, #96]	@ (800108c <MX_SPI1_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_SPI1_Init+0x74>)
 8001032:	22e0      	movs	r2, #224	@ 0xe0
 8001034:	00d2      	lsls	r2, r2, #3
 8001036:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001038:	4b14      	ldr	r3, [pc, #80]	@ (800108c <MX_SPI1_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <MX_SPI1_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_SPI1_Init+0x74>)
 8001046:	2280      	movs	r2, #128	@ 0x80
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <MX_SPI1_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <MX_SPI1_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <MX_SPI1_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <MX_SPI1_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001064:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_SPI1_Init+0x74>)
 8001066:	2207      	movs	r2, #7
 8001068:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800106a:	4b08      	ldr	r3, [pc, #32]	@ (800108c <MX_SPI1_Init+0x74>)
 800106c:	2200      	movs	r2, #0
 800106e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_SPI1_Init+0x74>)
 8001072:	2208      	movs	r2, #8
 8001074:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001076:	4b05      	ldr	r3, [pc, #20]	@ (800108c <MX_SPI1_Init+0x74>)
 8001078:	0018      	movs	r0, r3
 800107a:	f002 fc49 	bl	8003910 <HAL_SPI_Init>
 800107e:	1e03      	subs	r3, r0, #0
 8001080:	d001      	beq.n	8001086 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001082:	f000 f8c5 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001086:	46c0      	nop			@ (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000174 	.word	0x20000174
 8001090:	40013000 	.word	0x40013000

08001094 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001098:	4b23      	ldr	r3, [pc, #140]	@ (8001128 <MX_USART1_UART_Init+0x94>)
 800109a:	4a24      	ldr	r2, [pc, #144]	@ (800112c <MX_USART1_UART_Init+0x98>)
 800109c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800109e:	4b22      	ldr	r3, [pc, #136]	@ (8001128 <MX_USART1_UART_Init+0x94>)
 80010a0:	22e1      	movs	r2, #225	@ 0xe1
 80010a2:	0252      	lsls	r2, r2, #9
 80010a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b20      	ldr	r3, [pc, #128]	@ (8001128 <MX_USART1_UART_Init+0x94>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <MX_USART1_UART_Init+0x94>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <MX_USART1_UART_Init+0x94>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <MX_USART1_UART_Init+0x94>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <MX_USART1_UART_Init+0x94>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <MX_USART1_UART_Init+0x94>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ca:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <MX_USART1_UART_Init+0x94>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d0:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <MX_USART1_UART_Init+0x94>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d6:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <MX_USART1_UART_Init+0x94>)
 80010d8:	2200      	movs	r2, #0
 80010da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <MX_USART1_UART_Init+0x94>)
 80010de:	0018      	movs	r0, r3
 80010e0:	f003 fb36 	bl	8004750 <HAL_UART_Init>
 80010e4:	1e03      	subs	r3, r0, #0
 80010e6:	d001      	beq.n	80010ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010e8:	f000 f892 	bl	8001210 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <MX_USART1_UART_Init+0x94>)
 80010ee:	2100      	movs	r1, #0
 80010f0:	0018      	movs	r0, r3
 80010f2:	f003 ff5b 	bl	8004fac <HAL_UARTEx_SetTxFifoThreshold>
 80010f6:	1e03      	subs	r3, r0, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010fa:	f000 f889 	bl	8001210 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <MX_USART1_UART_Init+0x94>)
 8001100:	2100      	movs	r1, #0
 8001102:	0018      	movs	r0, r3
 8001104:	f003 ff92 	bl	800502c <HAL_UARTEx_SetRxFifoThreshold>
 8001108:	1e03      	subs	r3, r0, #0
 800110a:	d001      	beq.n	8001110 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800110c:	f000 f880 	bl	8001210 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <MX_USART1_UART_Init+0x94>)
 8001112:	0018      	movs	r0, r3
 8001114:	f003 ff10 	bl	8004f38 <HAL_UARTEx_DisableFifoMode>
 8001118:	1e03      	subs	r3, r0, #0
 800111a:	d001      	beq.n	8001120 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800111c:	f000 f878 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001120:	46c0      	nop			@ (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	200001d8 	.word	0x200001d8
 800112c:	40013800 	.word	0x40013800

08001130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b089      	sub	sp, #36	@ 0x24
 8001134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	240c      	movs	r4, #12
 8001138:	193b      	adds	r3, r7, r4
 800113a:	0018      	movs	r0, r3
 800113c:	2314      	movs	r3, #20
 800113e:	001a      	movs	r2, r3
 8001140:	2100      	movs	r1, #0
 8001142:	f004 f8d9 	bl	80052f8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	4b30      	ldr	r3, [pc, #192]	@ (8001208 <MX_GPIO_Init+0xd8>)
 8001148:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800114a:	4b2f      	ldr	r3, [pc, #188]	@ (8001208 <MX_GPIO_Init+0xd8>)
 800114c:	2102      	movs	r1, #2
 800114e:	430a      	orrs	r2, r1
 8001150:	635a      	str	r2, [r3, #52]	@ 0x34
 8001152:	4b2d      	ldr	r3, [pc, #180]	@ (8001208 <MX_GPIO_Init+0xd8>)
 8001154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001156:	2202      	movs	r2, #2
 8001158:	4013      	ands	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	4b2a      	ldr	r3, [pc, #168]	@ (8001208 <MX_GPIO_Init+0xd8>)
 8001160:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001162:	4b29      	ldr	r3, [pc, #164]	@ (8001208 <MX_GPIO_Init+0xd8>)
 8001164:	2101      	movs	r1, #1
 8001166:	430a      	orrs	r2, r1
 8001168:	635a      	str	r2, [r3, #52]	@ 0x34
 800116a:	4b27      	ldr	r3, [pc, #156]	@ (8001208 <MX_GPIO_Init+0xd8>)
 800116c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800116e:	2201      	movs	r2, #1
 8001170:	4013      	ands	r3, r2
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, W5500_NSS_Pin|GPIO_PIN_4|USART1_CTRL_Pin, GPIO_PIN_RESET);
 8001176:	4b25      	ldr	r3, [pc, #148]	@ (800120c <MX_GPIO_Init+0xdc>)
 8001178:	2200      	movs	r2, #0
 800117a:	2131      	movs	r1, #49	@ 0x31
 800117c:	0018      	movs	r0, r3
 800117e:	f001 fc3f 	bl	8002a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, W5500_NRST_Pin|NINT_Pin, GPIO_PIN_RESET);
 8001182:	23c0      	movs	r3, #192	@ 0xc0
 8001184:	0099      	lsls	r1, r3, #2
 8001186:	23a0      	movs	r3, #160	@ 0xa0
 8001188:	05db      	lsls	r3, r3, #23
 800118a:	2200      	movs	r2, #0
 800118c:	0018      	movs	r0, r3
 800118e:	f001 fc37 	bl	8002a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AC_ACTIV_Pin */
  GPIO_InitStruct.Pin = AC_ACTIV_Pin;
 8001192:	193b      	adds	r3, r7, r4
 8001194:	2204      	movs	r2, #4
 8001196:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001198:	193b      	adds	r3, r7, r4
 800119a:	2200      	movs	r2, #0
 800119c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	193b      	adds	r3, r7, r4
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(AC_ACTIV_GPIO_Port, &GPIO_InitStruct);
 80011a4:	193a      	adds	r2, r7, r4
 80011a6:	23a0      	movs	r3, #160	@ 0xa0
 80011a8:	05db      	lsls	r3, r3, #23
 80011aa:	0011      	movs	r1, r2
 80011ac:	0018      	movs	r0, r3
 80011ae:	f001 fac3 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pins : W5500_NSS_Pin PB4 USART1_CTRL_Pin */
  GPIO_InitStruct.Pin = W5500_NSS_Pin|GPIO_PIN_4|USART1_CTRL_Pin;
 80011b2:	193b      	adds	r3, r7, r4
 80011b4:	2231      	movs	r2, #49	@ 0x31
 80011b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	193b      	adds	r3, r7, r4
 80011ba:	2201      	movs	r2, #1
 80011bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	193b      	adds	r3, r7, r4
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	193b      	adds	r3, r7, r4
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ca:	193b      	adds	r3, r7, r4
 80011cc:	4a0f      	ldr	r2, [pc, #60]	@ (800120c <MX_GPIO_Init+0xdc>)
 80011ce:	0019      	movs	r1, r3
 80011d0:	0010      	movs	r0, r2
 80011d2:	f001 fab1 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pins : W5500_NRST_Pin NINT_Pin */
  GPIO_InitStruct.Pin = W5500_NRST_Pin|NINT_Pin;
 80011d6:	0021      	movs	r1, r4
 80011d8:	187b      	adds	r3, r7, r1
 80011da:	22c0      	movs	r2, #192	@ 0xc0
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	2201      	movs	r2, #1
 80011e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	187a      	adds	r2, r7, r1
 80011f4:	23a0      	movs	r3, #160	@ 0xa0
 80011f6:	05db      	lsls	r3, r3, #23
 80011f8:	0011      	movs	r1, r2
 80011fa:	0018      	movs	r0, r3
 80011fc:	f001 fa9c 	bl	8002738 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001200:	46c0      	nop			@ (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	b009      	add	sp, #36	@ 0x24
 8001206:	bd90      	pop	{r4, r7, pc}
 8001208:	40021000 	.word	0x40021000
 800120c:	50000400 	.word	0x50000400

08001210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001214:	b672      	cpsid	i
}
 8001216:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001218:	46c0      	nop			@ (mov r8, r8)
 800121a:	e7fd      	b.n	8001218 <Error_Handler+0x8>

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <HAL_MspInit+0x44>)
 8001224:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <HAL_MspInit+0x44>)
 8001228:	2101      	movs	r1, #1
 800122a:	430a      	orrs	r2, r1
 800122c:	641a      	str	r2, [r3, #64]	@ 0x40
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <HAL_MspInit+0x44>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	2201      	movs	r2, #1
 8001234:	4013      	ands	r3, r2
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <HAL_MspInit+0x44>)
 800123c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800123e:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <HAL_MspInit+0x44>)
 8001240:	2180      	movs	r1, #128	@ 0x80
 8001242:	0549      	lsls	r1, r1, #21
 8001244:	430a      	orrs	r2, r1
 8001246:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001248:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <HAL_MspInit+0x44>)
 800124a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800124c:	2380      	movs	r3, #128	@ 0x80
 800124e:	055b      	lsls	r3, r3, #21
 8001250:	4013      	ands	r3, r2
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	46c0      	nop			@ (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b002      	add	sp, #8
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			@ (mov r8, r8)
 8001260:	40021000 	.word	0x40021000

08001264 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b08b      	sub	sp, #44	@ 0x2c
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	2414      	movs	r4, #20
 800126e:	193b      	adds	r3, r7, r4
 8001270:	0018      	movs	r0, r3
 8001272:	2314      	movs	r3, #20
 8001274:	001a      	movs	r2, r3
 8001276:	2100      	movs	r1, #0
 8001278:	f004 f83e 	bl	80052f8 <memset>
  if(hadc->Instance==ADC1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a18      	ldr	r2, [pc, #96]	@ (80012e4 <HAL_ADC_MspInit+0x80>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d129      	bne.n	80012da <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001286:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <HAL_ADC_MspInit+0x84>)
 8001288:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800128a:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <HAL_ADC_MspInit+0x84>)
 800128c:	2180      	movs	r1, #128	@ 0x80
 800128e:	0349      	lsls	r1, r1, #13
 8001290:	430a      	orrs	r2, r1
 8001292:	641a      	str	r2, [r3, #64]	@ 0x40
 8001294:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <HAL_ADC_MspInit+0x84>)
 8001296:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001298:	2380      	movs	r3, #128	@ 0x80
 800129a:	035b      	lsls	r3, r3, #13
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <HAL_ADC_MspInit+0x84>)
 80012a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <HAL_ADC_MspInit+0x84>)
 80012a8:	2101      	movs	r1, #1
 80012aa:	430a      	orrs	r2, r1
 80012ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <HAL_ADC_MspInit+0x84>)
 80012b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b2:	2201      	movs	r2, #1
 80012b4:	4013      	ands	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CURR_BAT_Pin|CURR_BATA1_Pin|CURR_DOWN_Pin|VOLT_BAT_Pin;
 80012ba:	193b      	adds	r3, r7, r4
 80012bc:	221b      	movs	r2, #27
 80012be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c0:	193b      	adds	r3, r7, r4
 80012c2:	2203      	movs	r2, #3
 80012c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	193b      	adds	r3, r7, r4
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	193a      	adds	r2, r7, r4
 80012ce:	23a0      	movs	r3, #160	@ 0xa0
 80012d0:	05db      	lsls	r3, r3, #23
 80012d2:	0011      	movs	r1, r2
 80012d4:	0018      	movs	r0, r3
 80012d6:	f001 fa2f 	bl	8002738 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	46bd      	mov	sp, r7
 80012de:	b00b      	add	sp, #44	@ 0x2c
 80012e0:	bd90      	pop	{r4, r7, pc}
 80012e2:	46c0      	nop			@ (mov r8, r8)
 80012e4:	40012400 	.word	0x40012400
 80012e8:	40021000 	.word	0x40021000

080012ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b091      	sub	sp, #68	@ 0x44
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	232c      	movs	r3, #44	@ 0x2c
 80012f6:	18fb      	adds	r3, r7, r3
 80012f8:	0018      	movs	r0, r3
 80012fa:	2314      	movs	r3, #20
 80012fc:	001a      	movs	r2, r3
 80012fe:	2100      	movs	r1, #0
 8001300:	f003 fffa 	bl	80052f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001304:	2414      	movs	r4, #20
 8001306:	193b      	adds	r3, r7, r4
 8001308:	0018      	movs	r0, r3
 800130a:	2318      	movs	r3, #24
 800130c:	001a      	movs	r2, r3
 800130e:	2100      	movs	r1, #0
 8001310:	f003 fff2 	bl	80052f8 <memset>
  if(hi2c->Instance==I2C1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a22      	ldr	r2, [pc, #136]	@ (80013a4 <HAL_I2C_MspInit+0xb8>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d13e      	bne.n	800139c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800131e:	193b      	adds	r3, r7, r4
 8001320:	2220      	movs	r2, #32
 8001322:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001324:	193b      	adds	r3, r7, r4
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132a:	193b      	adds	r3, r7, r4
 800132c:	0018      	movs	r0, r3
 800132e:	f002 f9c9 	bl	80036c4 <HAL_RCCEx_PeriphCLKConfig>
 8001332:	1e03      	subs	r3, r0, #0
 8001334:	d001      	beq.n	800133a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001336:	f7ff ff6b 	bl	8001210 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <HAL_I2C_MspInit+0xbc>)
 800133c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800133e:	4b1a      	ldr	r3, [pc, #104]	@ (80013a8 <HAL_I2C_MspInit+0xbc>)
 8001340:	2102      	movs	r1, #2
 8001342:	430a      	orrs	r2, r1
 8001344:	635a      	str	r2, [r3, #52]	@ 0x34
 8001346:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <HAL_I2C_MspInit+0xbc>)
 8001348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800134a:	2202      	movs	r2, #2
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001352:	212c      	movs	r1, #44	@ 0x2c
 8001354:	187b      	adds	r3, r7, r1
 8001356:	22c0      	movs	r2, #192	@ 0xc0
 8001358:	0092      	lsls	r2, r2, #2
 800135a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800135c:	187b      	adds	r3, r7, r1
 800135e:	2212      	movs	r2, #18
 8001360:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	187b      	adds	r3, r7, r1
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	187b      	adds	r3, r7, r1
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800136e:	187b      	adds	r3, r7, r1
 8001370:	2206      	movs	r2, #6
 8001372:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001374:	187b      	adds	r3, r7, r1
 8001376:	4a0d      	ldr	r2, [pc, #52]	@ (80013ac <HAL_I2C_MspInit+0xc0>)
 8001378:	0019      	movs	r1, r3
 800137a:	0010      	movs	r0, r2
 800137c:	f001 f9dc 	bl	8002738 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <HAL_I2C_MspInit+0xbc>)
 8001382:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001384:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <HAL_I2C_MspInit+0xbc>)
 8001386:	2180      	movs	r1, #128	@ 0x80
 8001388:	0389      	lsls	r1, r1, #14
 800138a:	430a      	orrs	r2, r1
 800138c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_I2C_MspInit+0xbc>)
 8001390:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001392:	2380      	movs	r3, #128	@ 0x80
 8001394:	039b      	lsls	r3, r3, #14
 8001396:	4013      	ands	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800139c:	46c0      	nop			@ (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	b011      	add	sp, #68	@ 0x44
 80013a2:	bd90      	pop	{r4, r7, pc}
 80013a4:	40005400 	.word	0x40005400
 80013a8:	40021000 	.word	0x40021000
 80013ac:	50000400 	.word	0x50000400

080013b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b08b      	sub	sp, #44	@ 0x2c
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	2414      	movs	r4, #20
 80013ba:	193b      	adds	r3, r7, r4
 80013bc:	0018      	movs	r0, r3
 80013be:	2314      	movs	r3, #20
 80013c0:	001a      	movs	r2, r3
 80013c2:	2100      	movs	r1, #0
 80013c4:	f003 ff98 	bl	80052f8 <memset>
  if(hspi->Instance==SPI1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a1b      	ldr	r2, [pc, #108]	@ (800143c <HAL_SPI_MspInit+0x8c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d130      	bne.n	8001434 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <HAL_SPI_MspInit+0x90>)
 80013d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <HAL_SPI_MspInit+0x90>)
 80013d8:	2180      	movs	r1, #128	@ 0x80
 80013da:	0149      	lsls	r1, r1, #5
 80013dc:	430a      	orrs	r2, r1
 80013de:	641a      	str	r2, [r3, #64]	@ 0x40
 80013e0:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <HAL_SPI_MspInit+0x90>)
 80013e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013e4:	2380      	movs	r3, #128	@ 0x80
 80013e6:	015b      	lsls	r3, r3, #5
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <HAL_SPI_MspInit+0x90>)
 80013f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013f2:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <HAL_SPI_MspInit+0x90>)
 80013f4:	2101      	movs	r1, #1
 80013f6:	430a      	orrs	r2, r1
 80013f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <HAL_SPI_MspInit+0x90>)
 80013fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013fe:	2201      	movs	r2, #1
 8001400:	4013      	ands	r3, r2
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001406:	0021      	movs	r1, r4
 8001408:	187b      	adds	r3, r7, r1
 800140a:	22e0      	movs	r2, #224	@ 0xe0
 800140c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	187b      	adds	r3, r7, r1
 8001410:	2202      	movs	r2, #2
 8001412:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	187b      	adds	r3, r7, r1
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	187b      	adds	r3, r7, r1
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001420:	187b      	adds	r3, r7, r1
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	187a      	adds	r2, r7, r1
 8001428:	23a0      	movs	r3, #160	@ 0xa0
 800142a:	05db      	lsls	r3, r3, #23
 800142c:	0011      	movs	r1, r2
 800142e:	0018      	movs	r0, r3
 8001430:	f001 f982 	bl	8002738 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001434:	46c0      	nop			@ (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	b00b      	add	sp, #44	@ 0x2c
 800143a:	bd90      	pop	{r4, r7, pc}
 800143c:	40013000 	.word	0x40013000
 8001440:	40021000 	.word	0x40021000

08001444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b091      	sub	sp, #68	@ 0x44
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	232c      	movs	r3, #44	@ 0x2c
 800144e:	18fb      	adds	r3, r7, r3
 8001450:	0018      	movs	r0, r3
 8001452:	2314      	movs	r3, #20
 8001454:	001a      	movs	r2, r3
 8001456:	2100      	movs	r1, #0
 8001458:	f003 ff4e 	bl	80052f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800145c:	2414      	movs	r4, #20
 800145e:	193b      	adds	r3, r7, r4
 8001460:	0018      	movs	r0, r3
 8001462:	2318      	movs	r3, #24
 8001464:	001a      	movs	r2, r3
 8001466:	2100      	movs	r1, #0
 8001468:	f003 ff46 	bl	80052f8 <memset>
  if(huart->Instance==USART1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a22      	ldr	r2, [pc, #136]	@ (80014fc <HAL_UART_MspInit+0xb8>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d13d      	bne.n	80014f2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001476:	193b      	adds	r3, r7, r4
 8001478:	2201      	movs	r2, #1
 800147a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800147c:	193b      	adds	r3, r7, r4
 800147e:	2200      	movs	r2, #0
 8001480:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001482:	193b      	adds	r3, r7, r4
 8001484:	0018      	movs	r0, r3
 8001486:	f002 f91d 	bl	80036c4 <HAL_RCCEx_PeriphCLKConfig>
 800148a:	1e03      	subs	r3, r0, #0
 800148c:	d001      	beq.n	8001492 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800148e:	f7ff febf 	bl	8001210 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001492:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <HAL_UART_MspInit+0xbc>)
 8001494:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001496:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <HAL_UART_MspInit+0xbc>)
 8001498:	2180      	movs	r1, #128	@ 0x80
 800149a:	01c9      	lsls	r1, r1, #7
 800149c:	430a      	orrs	r2, r1
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
 80014a0:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <HAL_UART_MspInit+0xbc>)
 80014a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014a4:	2380      	movs	r3, #128	@ 0x80
 80014a6:	01db      	lsls	r3, r3, #7
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <HAL_UART_MspInit+0xbc>)
 80014b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014b2:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <HAL_UART_MspInit+0xbc>)
 80014b4:	2102      	movs	r1, #2
 80014b6:	430a      	orrs	r2, r1
 80014b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80014ba:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <HAL_UART_MspInit+0xbc>)
 80014bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014be:	2202      	movs	r2, #2
 80014c0:	4013      	ands	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014c6:	212c      	movs	r1, #44	@ 0x2c
 80014c8:	187b      	adds	r3, r7, r1
 80014ca:	22c0      	movs	r2, #192	@ 0xc0
 80014cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	2202      	movs	r2, #2
 80014d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	187b      	adds	r3, r7, r1
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	4a06      	ldr	r2, [pc, #24]	@ (8001504 <HAL_UART_MspInit+0xc0>)
 80014ea:	0019      	movs	r1, r3
 80014ec:	0010      	movs	r0, r2
 80014ee:	f001 f923 	bl	8002738 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b011      	add	sp, #68	@ 0x44
 80014f8:	bd90      	pop	{r4, r7, pc}
 80014fa:	46c0      	nop			@ (mov r8, r8)
 80014fc:	40013800 	.word	0x40013800
 8001500:	40021000 	.word	0x40021000
 8001504:	50000400 	.word	0x50000400

08001508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800150c:	46c0      	nop			@ (mov r8, r8)
 800150e:	e7fd      	b.n	800150c <NMI_Handler+0x4>

08001510 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001514:	46c0      	nop			@ (mov r8, r8)
 8001516:	e7fd      	b.n	8001514 <HardFault_Handler+0x4>

08001518 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800151c:	46c0      	nop			@ (mov r8, r8)
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001530:	f000 f8d4 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001534:	46c0      	nop			@ (mov r8, r8)
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001544:	4a14      	ldr	r2, [pc, #80]	@ (8001598 <_sbrk+0x5c>)
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <_sbrk+0x60>)
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001550:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001558:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <_sbrk+0x64>)
 800155a:	4a12      	ldr	r2, [pc, #72]	@ (80015a4 <_sbrk+0x68>)
 800155c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	18d3      	adds	r3, r2, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	429a      	cmp	r2, r3
 800156a:	d207      	bcs.n	800157c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800156c:	f003 fede 	bl	800532c <__errno>
 8001570:	0003      	movs	r3, r0
 8001572:	220c      	movs	r2, #12
 8001574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001576:	2301      	movs	r3, #1
 8001578:	425b      	negs	r3, r3
 800157a:	e009      	b.n	8001590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800157c:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001582:	4b07      	ldr	r3, [pc, #28]	@ (80015a0 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	18d2      	adds	r2, r2, r3
 800158a:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <_sbrk+0x64>)
 800158c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800158e:	68fb      	ldr	r3, [r7, #12]
}
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	b006      	add	sp, #24
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20002000 	.word	0x20002000
 800159c:	00000400 	.word	0x00000400
 80015a0:	2000077c 	.word	0x2000077c
 80015a4:	200008d0 	.word	0x200008d0

080015a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ac:	46c0      	nop			@ (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015b4:	480d      	ldr	r0, [pc, #52]	@ (80015ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015b8:	f7ff fff6 	bl	80015a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015bc:	480c      	ldr	r0, [pc, #48]	@ (80015f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80015be:	490d      	ldr	r1, [pc, #52]	@ (80015f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015c0:	4a0d      	ldr	r2, [pc, #52]	@ (80015f8 <LoopForever+0xe>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c4:	e002      	b.n	80015cc <LoopCopyDataInit>

080015c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ca:	3304      	adds	r3, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d0:	d3f9      	bcc.n	80015c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d2:	4a0a      	ldr	r2, [pc, #40]	@ (80015fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80015d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001600 <LoopForever+0x16>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d8:	e001      	b.n	80015de <LoopFillZerobss>

080015da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015dc:	3204      	adds	r2, #4

080015de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e0:	d3fb      	bcc.n	80015da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015e2:	f003 fea9 	bl	8005338 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80015e6:	f7ff fae7 	bl	8000bb8 <main>

080015ea <LoopForever>:

LoopForever:
  b LoopForever
 80015ea:	e7fe      	b.n	80015ea <LoopForever>
  ldr   r0, =_estack
 80015ec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80015f8:	080054d4 	.word	0x080054d4
  ldr r2, =_sbss
 80015fc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001600:	200008cc 	.word	0x200008cc

08001604 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC1_IRQHandler>
	...

08001608 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001614:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <HAL_Init+0x3c>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b0a      	ldr	r3, [pc, #40]	@ (8001644 <HAL_Init+0x3c>)
 800161a:	2180      	movs	r1, #128	@ 0x80
 800161c:	0049      	lsls	r1, r1, #1
 800161e:	430a      	orrs	r2, r1
 8001620:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001622:	2003      	movs	r0, #3
 8001624:	f000 f810 	bl	8001648 <HAL_InitTick>
 8001628:	1e03      	subs	r3, r0, #0
 800162a:	d003      	beq.n	8001634 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800162c:	1dfb      	adds	r3, r7, #7
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	e001      	b.n	8001638 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001634:	f7ff fdf2 	bl	800121c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001638:	1dfb      	adds	r3, r7, #7
 800163a:	781b      	ldrb	r3, [r3, #0]
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	b002      	add	sp, #8
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40022000 	.word	0x40022000

08001648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001650:	230f      	movs	r3, #15
 8001652:	18fb      	adds	r3, r7, r3
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001658:	4b1d      	ldr	r3, [pc, #116]	@ (80016d0 <HAL_InitTick+0x88>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d02b      	beq.n	80016b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001660:	4b1c      	ldr	r3, [pc, #112]	@ (80016d4 <HAL_InitTick+0x8c>)
 8001662:	681c      	ldr	r4, [r3, #0]
 8001664:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <HAL_InitTick+0x88>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	0019      	movs	r1, r3
 800166a:	23fa      	movs	r3, #250	@ 0xfa
 800166c:	0098      	lsls	r0, r3, #2
 800166e:	f7fe fd47 	bl	8000100 <__udivsi3>
 8001672:	0003      	movs	r3, r0
 8001674:	0019      	movs	r1, r3
 8001676:	0020      	movs	r0, r4
 8001678:	f7fe fd42 	bl	8000100 <__udivsi3>
 800167c:	0003      	movs	r3, r0
 800167e:	0018      	movs	r0, r3
 8001680:	f001 f84d 	bl	800271e <HAL_SYSTICK_Config>
 8001684:	1e03      	subs	r3, r0, #0
 8001686:	d112      	bne.n	80016ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b03      	cmp	r3, #3
 800168c:	d80a      	bhi.n	80016a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	2301      	movs	r3, #1
 8001692:	425b      	negs	r3, r3
 8001694:	2200      	movs	r2, #0
 8001696:	0018      	movs	r0, r3
 8001698:	f001 f82c 	bl	80026f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800169c:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <HAL_InitTick+0x90>)
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	e00d      	b.n	80016c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80016a4:	230f      	movs	r3, #15
 80016a6:	18fb      	adds	r3, r7, r3
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
 80016ac:	e008      	b.n	80016c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016ae:	230f      	movs	r3, #15
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	e003      	b.n	80016c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016b8:	230f      	movs	r3, #15
 80016ba:	18fb      	adds	r3, r7, r3
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80016c0:	230f      	movs	r3, #15
 80016c2:	18fb      	adds	r3, r7, r3
 80016c4:	781b      	ldrb	r3, [r3, #0]
}
 80016c6:	0018      	movs	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b005      	add	sp, #20
 80016cc:	bd90      	pop	{r4, r7, pc}
 80016ce:	46c0      	nop			@ (mov r8, r8)
 80016d0:	20000038 	.word	0x20000038
 80016d4:	20000030 	.word	0x20000030
 80016d8:	20000034 	.word	0x20000034

080016dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016e0:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <HAL_IncTick+0x1c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	001a      	movs	r2, r3
 80016e6:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <HAL_IncTick+0x20>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	18d2      	adds	r2, r2, r3
 80016ec:	4b03      	ldr	r3, [pc, #12]	@ (80016fc <HAL_IncTick+0x20>)
 80016ee:	601a      	str	r2, [r3, #0]
}
 80016f0:	46c0      	nop			@ (mov r8, r8)
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			@ (mov r8, r8)
 80016f8:	20000038 	.word	0x20000038
 80016fc:	20000780 	.word	0x20000780

08001700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b02      	ldr	r3, [pc, #8]	@ (8001710 <HAL_GetTick+0x10>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	0018      	movs	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			@ (mov r8, r8)
 8001710:	20000780 	.word	0x20000780

08001714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff fff0 	bl	8001700 <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3301      	adds	r3, #1
 800172c:	d005      	beq.n	800173a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172e:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <HAL_Delay+0x44>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	001a      	movs	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	189b      	adds	r3, r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173a:	46c0      	nop			@ (mov r8, r8)
 800173c:	f7ff ffe0 	bl	8001700 <HAL_GetTick>
 8001740:	0002      	movs	r2, r0
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	429a      	cmp	r2, r3
 800174a:	d8f7      	bhi.n	800173c <HAL_Delay+0x28>
  {
  }
}
 800174c:	46c0      	nop			@ (mov r8, r8)
 800174e:	46c0      	nop			@ (mov r8, r8)
 8001750:	46bd      	mov	sp, r7
 8001752:	b004      	add	sp, #16
 8001754:	bd80      	pop	{r7, pc}
 8001756:	46c0      	nop			@ (mov r8, r8)
 8001758:	20000038 	.word	0x20000038

0800175c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a05      	ldr	r2, [pc, #20]	@ (8001780 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800176c:	401a      	ands	r2, r3
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	601a      	str	r2, [r3, #0]
}
 8001776:	46c0      	nop			@ (mov r8, r8)
 8001778:	46bd      	mov	sp, r7
 800177a:	b002      	add	sp, #8
 800177c:	bd80      	pop	{r7, pc}
 800177e:	46c0      	nop			@ (mov r8, r8)
 8001780:	fe3fffff 	.word	0xfe3fffff

08001784 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	23e0      	movs	r3, #224	@ 0xe0
 8001792:	045b      	lsls	r3, r3, #17
 8001794:	4013      	ands	r3, r2
}
 8001796:	0018      	movs	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	b002      	add	sp, #8
 800179c:	bd80      	pop	{r7, pc}

0800179e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	2104      	movs	r1, #4
 80017b2:	400a      	ands	r2, r1
 80017b4:	2107      	movs	r1, #7
 80017b6:	4091      	lsls	r1, r2
 80017b8:	000a      	movs	r2, r1
 80017ba:	43d2      	mvns	r2, r2
 80017bc:	401a      	ands	r2, r3
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	2104      	movs	r1, #4
 80017c2:	400b      	ands	r3, r1
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4099      	lsls	r1, r3
 80017c8:	000b      	movs	r3, r1
 80017ca:	431a      	orrs	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80017d0:	46c0      	nop			@ (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b004      	add	sp, #16
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	2104      	movs	r1, #4
 80017ea:	400a      	ands	r2, r1
 80017ec:	2107      	movs	r1, #7
 80017ee:	4091      	lsls	r1, r2
 80017f0:	000a      	movs	r2, r1
 80017f2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	2104      	movs	r1, #4
 80017f8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80017fa:	40da      	lsrs	r2, r3
 80017fc:	0013      	movs	r3, r2
}
 80017fe:	0018      	movs	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	b002      	add	sp, #8
 8001804:	bd80      	pop	{r7, pc}

08001806 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	23c0      	movs	r3, #192	@ 0xc0
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	4013      	ands	r3, r2
 8001818:	d101      	bne.n	800181e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800181e:	2300      	movs	r3, #0
}
 8001820:	0018      	movs	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	b002      	add	sp, #8
 8001826:	bd80      	pop	{r7, pc}

08001828 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	211f      	movs	r1, #31
 800183c:	400a      	ands	r2, r1
 800183e:	210f      	movs	r1, #15
 8001840:	4091      	lsls	r1, r2
 8001842:	000a      	movs	r2, r1
 8001844:	43d2      	mvns	r2, r2
 8001846:	401a      	ands	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	0e9b      	lsrs	r3, r3, #26
 800184c:	210f      	movs	r1, #15
 800184e:	4019      	ands	r1, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	201f      	movs	r0, #31
 8001854:	4003      	ands	r3, r0
 8001856:	4099      	lsls	r1, r3
 8001858:	000b      	movs	r3, r1
 800185a:	431a      	orrs	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001860:	46c0      	nop			@ (mov r8, r8)
 8001862:	46bd      	mov	sp, r7
 8001864:	b004      	add	sp, #16
 8001866:	bd80      	pop	{r7, pc}

08001868 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	035b      	lsls	r3, r3, #13
 800187a:	0b5b      	lsrs	r3, r3, #13
 800187c:	431a      	orrs	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001882:	46c0      	nop			@ (mov r8, r8)
 8001884:	46bd      	mov	sp, r7
 8001886:	b002      	add	sp, #8
 8001888:	bd80      	pop	{r7, pc}

0800188a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	0352      	lsls	r2, r2, #13
 800189c:	0b52      	lsrs	r2, r2, #13
 800189e:	43d2      	mvns	r2, r2
 80018a0:	401a      	ands	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018a6:	46c0      	nop			@ (mov r8, r8)
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b002      	add	sp, #8
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	0212      	lsls	r2, r2, #8
 80018c4:	43d2      	mvns	r2, r2
 80018c6:	401a      	ands	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	400b      	ands	r3, r1
 80018d0:	4904      	ldr	r1, [pc, #16]	@ (80018e4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80018d2:	400b      	ands	r3, r1
 80018d4:	431a      	orrs	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	46bd      	mov	sp, r7
 80018de:	b004      	add	sp, #16
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	46c0      	nop			@ (mov r8, r8)
 80018e4:	07ffff00 	.word	0x07ffff00

080018e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	4a05      	ldr	r2, [pc, #20]	@ (800190c <LL_ADC_EnableInternalRegulator+0x24>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	2280      	movs	r2, #128	@ 0x80
 80018fa:	0552      	lsls	r2, r2, #21
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001902:	46c0      	nop			@ (mov r8, r8)
 8001904:	46bd      	mov	sp, r7
 8001906:	b002      	add	sp, #8
 8001908:	bd80      	pop	{r7, pc}
 800190a:	46c0      	nop			@ (mov r8, r8)
 800190c:	6fffffe8 	.word	0x6fffffe8

08001910 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	2380      	movs	r3, #128	@ 0x80
 800191e:	055b      	lsls	r3, r3, #21
 8001920:	401a      	ands	r2, r3
 8001922:	2380      	movs	r3, #128	@ 0x80
 8001924:	055b      	lsls	r3, r3, #21
 8001926:	429a      	cmp	r2, r3
 8001928:	d101      	bne.n	800192e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800192e:	2300      	movs	r3, #0
}
 8001930:	0018      	movs	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	b002      	add	sp, #8
 8001936:	bd80      	pop	{r7, pc}

08001938 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	4a04      	ldr	r2, [pc, #16]	@ (8001958 <LL_ADC_Enable+0x20>)
 8001946:	4013      	ands	r3, r2
 8001948:	2201      	movs	r2, #1
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001950:	46c0      	nop			@ (mov r8, r8)
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}
 8001958:	7fffffe8 	.word	0x7fffffe8

0800195c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4a04      	ldr	r2, [pc, #16]	@ (800197c <LL_ADC_Disable+0x20>)
 800196a:	4013      	ands	r3, r2
 800196c:	2202      	movs	r2, #2
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001974:	46c0      	nop			@ (mov r8, r8)
 8001976:	46bd      	mov	sp, r7
 8001978:	b002      	add	sp, #8
 800197a:	bd80      	pop	{r7, pc}
 800197c:	7fffffe8 	.word	0x7fffffe8

08001980 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2201      	movs	r2, #1
 800198e:	4013      	ands	r3, r2
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <LL_ADC_IsEnabled+0x18>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <LL_ADC_IsEnabled+0x1a>
 8001998:	2300      	movs	r3, #0
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	b002      	add	sp, #8
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2202      	movs	r2, #2
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d101      	bne.n	80019ba <LL_ADC_IsDisableOngoing+0x18>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <LL_ADC_IsDisableOngoing+0x1a>
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	0018      	movs	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	b002      	add	sp, #8
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	4a04      	ldr	r2, [pc, #16]	@ (80019e4 <LL_ADC_REG_StartConversion+0x20>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	2204      	movs	r2, #4
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019dc:	46c0      	nop			@ (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	b002      	add	sp, #8
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	7fffffe8 	.word	0x7fffffe8

080019e8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	4a04      	ldr	r2, [pc, #16]	@ (8001a08 <LL_ADC_REG_StopConversion+0x20>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	2210      	movs	r2, #16
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001a00:	46c0      	nop			@ (mov r8, r8)
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b002      	add	sp, #8
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	7fffffe8 	.word	0x7fffffe8

08001a0c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2204      	movs	r2, #4
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d101      	bne.n	8001a24 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	0018      	movs	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b002      	add	sp, #8
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a38:	231f      	movs	r3, #31
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e17f      	b.n	8001d56 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10a      	bne.n	8001a74 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7ff fbff 	bl	8001264 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2254      	movs	r2, #84	@ 0x54
 8001a70:	2100      	movs	r1, #0
 8001a72:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f7ff ff49 	bl	8001910 <LL_ADC_IsInternalRegulatorEnabled>
 8001a7e:	1e03      	subs	r3, r0, #0
 8001a80:	d115      	bne.n	8001aae <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	0018      	movs	r0, r3
 8001a88:	f7ff ff2e 	bl	80018e8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a8c:	4bb4      	ldr	r3, [pc, #720]	@ (8001d60 <HAL_ADC_Init+0x330>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	49b4      	ldr	r1, [pc, #720]	@ (8001d64 <HAL_ADC_Init+0x334>)
 8001a92:	0018      	movs	r0, r3
 8001a94:	f7fe fb34 	bl	8000100 <__udivsi3>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001aa0:	e002      	b.n	8001aa8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f9      	bne.n	8001aa2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f7ff ff2c 	bl	8001910 <LL_ADC_IsInternalRegulatorEnabled>
 8001ab8:	1e03      	subs	r3, r0, #0
 8001aba:	d10f      	bne.n	8001adc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac0:	2210      	movs	r2, #16
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001acc:	2201      	movs	r2, #1
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ad4:	231f      	movs	r3, #31
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	2201      	movs	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7ff ff93 	bl	8001a0c <LL_ADC_REG_IsConversionOngoing>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aee:	2210      	movs	r2, #16
 8001af0:	4013      	ands	r3, r2
 8001af2:	d000      	beq.n	8001af6 <HAL_ADC_Init+0xc6>
 8001af4:	e122      	b.n	8001d3c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d000      	beq.n	8001afe <HAL_ADC_Init+0xce>
 8001afc:	e11e      	b.n	8001d3c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b02:	4a99      	ldr	r2, [pc, #612]	@ (8001d68 <HAL_ADC_Init+0x338>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	2202      	movs	r2, #2
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	0018      	movs	r0, r3
 8001b14:	f7ff ff34 	bl	8001980 <LL_ADC_IsEnabled>
 8001b18:	1e03      	subs	r3, r0, #0
 8001b1a:	d000      	beq.n	8001b1e <HAL_ADC_Init+0xee>
 8001b1c:	e0ad      	b.n	8001c7a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	7e1b      	ldrb	r3, [r3, #24]
 8001b26:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001b28:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7e5b      	ldrb	r3, [r3, #25]
 8001b2e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001b30:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7e9b      	ldrb	r3, [r3, #26]
 8001b36:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001b38:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <HAL_ADC_Init+0x118>
 8001b42:	2380      	movs	r3, #128	@ 0x80
 8001b44:	015b      	lsls	r3, r3, #5
 8001b46:	e000      	b.n	8001b4a <HAL_ADC_Init+0x11a>
 8001b48:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001b4a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001b50:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	da04      	bge.n	8001b64 <HAL_ADC_Init+0x134>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	085b      	lsrs	r3, r3, #1
 8001b62:	e001      	b.n	8001b68 <HAL_ADC_Init+0x138>
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001b68:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	212c      	movs	r1, #44	@ 0x2c
 8001b6e:	5c5b      	ldrb	r3, [r3, r1]
 8001b70:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001b72:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	5c9b      	ldrb	r3, [r3, r2]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d115      	bne.n	8001bb0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7e9b      	ldrb	r3, [r3, #26]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d105      	bne.n	8001b98 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2280      	movs	r2, #128	@ 0x80
 8001b90:	0252      	lsls	r2, r2, #9
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	e00b      	b.n	8001bb0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba8:	2201      	movs	r2, #1
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00a      	beq.n	8001bce <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bbc:	23e0      	movs	r3, #224	@ 0xe0
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4a65      	ldr	r2, [pc, #404]	@ (8001d6c <HAL_ADC_Init+0x33c>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	0019      	movs	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	0f9b      	lsrs	r3, r3, #30
 8001bea:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	223c      	movs	r2, #60	@ 0x3c
 8001bfc:	5c9b      	ldrb	r3, [r3, r2]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d111      	bne.n	8001c26 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	0f9b      	lsrs	r3, r3, #30
 8001c08:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001c0e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001c14:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001c1a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	2201      	movs	r2, #1
 8001c22:	4313      	orrs	r3, r2
 8001c24:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	4a50      	ldr	r2, [pc, #320]	@ (8001d70 <HAL_ADC_Init+0x340>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	0019      	movs	r1, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	23c0      	movs	r3, #192	@ 0xc0
 8001c42:	061b      	lsls	r3, r3, #24
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d018      	beq.n	8001c7a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001c4c:	2380      	movs	r3, #128	@ 0x80
 8001c4e:	05db      	lsls	r3, r3, #23
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d012      	beq.n	8001c7a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001c58:	2380      	movs	r3, #128	@ 0x80
 8001c5a:	061b      	lsls	r3, r3, #24
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d00c      	beq.n	8001c7a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001c60:	4b44      	ldr	r3, [pc, #272]	@ (8001d74 <HAL_ADC_Init+0x344>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a44      	ldr	r2, [pc, #272]	@ (8001d78 <HAL_ADC_Init+0x348>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	0019      	movs	r1, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	23f0      	movs	r3, #240	@ 0xf0
 8001c70:	039b      	lsls	r3, r3, #14
 8001c72:	401a      	ands	r2, r3
 8001c74:	4b3f      	ldr	r3, [pc, #252]	@ (8001d74 <HAL_ADC_Init+0x344>)
 8001c76:	430a      	orrs	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c82:	001a      	movs	r2, r3
 8001c84:	2100      	movs	r1, #0
 8001c86:	f7ff fd8a 	bl	800179e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c92:	493a      	ldr	r1, [pc, #232]	@ (8001d7c <HAL_ADC_Init+0x34c>)
 8001c94:	001a      	movs	r2, r3
 8001c96:	f7ff fd82 	bl	800179e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2110      	movs	r1, #16
 8001cae:	4249      	negs	r1, r1
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001cb4:	e018      	b.n	8001ce8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691a      	ldr	r2, [r3, #16]
 8001cba:	2380      	movs	r3, #128	@ 0x80
 8001cbc:	039b      	lsls	r3, r3, #14
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d112      	bne.n	8001ce8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	221c      	movs	r2, #28
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2210      	movs	r2, #16
 8001cd6:	4252      	negs	r2, r2
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	0011      	movs	r1, r2
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2100      	movs	r1, #0
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f7ff fd72 	bl	80017d8 <LL_ADC_GetSamplingTimeCommonChannels>
 8001cf4:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d10b      	bne.n	8001d16 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d08:	2203      	movs	r2, #3
 8001d0a:	4393      	bics	r3, r2
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001d14:	e01c      	b.n	8001d50 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1a:	2212      	movs	r2, #18
 8001d1c:	4393      	bics	r3, r2
 8001d1e:	2210      	movs	r2, #16
 8001d20:	431a      	orrs	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001d32:	231f      	movs	r3, #31
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001d3a:	e009      	b.n	8001d50 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d40:	2210      	movs	r2, #16
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d48:	231f      	movs	r3, #31
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001d50:	231f      	movs	r3, #31
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	781b      	ldrb	r3, [r3, #0]
}
 8001d56:	0018      	movs	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b008      	add	sp, #32
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			@ (mov r8, r8)
 8001d60:	20000030 	.word	0x20000030
 8001d64:	00030d40 	.word	0x00030d40
 8001d68:	fffffefd 	.word	0xfffffefd
 8001d6c:	ffde0201 	.word	0xffde0201
 8001d70:	1ffffc02 	.word	0x1ffffc02
 8001d74:	40012708 	.word	0x40012708
 8001d78:	ffc3ffff 	.word	0xffc3ffff
 8001d7c:	07ffff04 	.word	0x07ffff04

08001d80 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7ff fe3d 	bl	8001a0c <LL_ADC_REG_IsConversionOngoing>
 8001d92:	1e03      	subs	r3, r0, #0
 8001d94:	d135      	bne.n	8001e02 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2254      	movs	r2, #84	@ 0x54
 8001d9a:	5c9b      	ldrb	r3, [r3, r2]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_ADC_Start+0x24>
 8001da0:	2302      	movs	r3, #2
 8001da2:	e035      	b.n	8001e10 <HAL_ADC_Start+0x90>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2254      	movs	r2, #84	@ 0x54
 8001da8:	2101      	movs	r1, #1
 8001daa:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001dac:	250f      	movs	r5, #15
 8001dae:	197c      	adds	r4, r7, r5
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	0018      	movs	r0, r3
 8001db4:	f000 fb28 	bl	8002408 <ADC_Enable>
 8001db8:	0003      	movs	r3, r0
 8001dba:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001dbc:	197b      	adds	r3, r7, r5
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d119      	bne.n	8001df8 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc8:	4a13      	ldr	r2, [pc, #76]	@ (8001e18 <HAL_ADC_Start+0x98>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2280      	movs	r2, #128	@ 0x80
 8001dce:	0052      	lsls	r2, r2, #1
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	221c      	movs	r2, #28
 8001de2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2254      	movs	r2, #84	@ 0x54
 8001de8:	2100      	movs	r1, #0
 8001dea:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	0018      	movs	r0, r3
 8001df2:	f7ff fde7 	bl	80019c4 <LL_ADC_REG_StartConversion>
 8001df6:	e008      	b.n	8001e0a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2254      	movs	r2, #84	@ 0x54
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	5499      	strb	r1, [r3, r2]
 8001e00:	e003      	b.n	8001e0a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e02:	230f      	movs	r3, #15
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	2202      	movs	r2, #2
 8001e08:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001e0a:	230f      	movs	r3, #15
 8001e0c:	18fb      	adds	r3, r7, r3
 8001e0e:	781b      	ldrb	r3, [r3, #0]
}
 8001e10:	0018      	movs	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b004      	add	sp, #16
 8001e16:	bdb0      	pop	{r4, r5, r7, pc}
 8001e18:	fffff0fe 	.word	0xfffff0fe

08001e1c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001e1c:	b5b0      	push	{r4, r5, r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2254      	movs	r2, #84	@ 0x54
 8001e28:	5c9b      	ldrb	r3, [r3, r2]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_ADC_Stop+0x16>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e029      	b.n	8001e86 <HAL_ADC_Stop+0x6a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2254      	movs	r2, #84	@ 0x54
 8001e36:	2101      	movs	r1, #1
 8001e38:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001e3a:	250f      	movs	r5, #15
 8001e3c:	197c      	adds	r4, r7, r5
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	0018      	movs	r0, r3
 8001e42:	f000 fa9f 	bl	8002384 <ADC_ConversionStop>
 8001e46:	0003      	movs	r3, r0
 8001e48:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001e4a:	197b      	adds	r3, r7, r5
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d112      	bne.n	8001e78 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001e52:	197c      	adds	r4, r7, r5
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	0018      	movs	r0, r3
 8001e58:	f000 fb5c 	bl	8002514 <ADC_Disable>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e60:	197b      	adds	r3, r7, r5
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d107      	bne.n	8001e78 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6c:	4a08      	ldr	r2, [pc, #32]	@ (8001e90 <HAL_ADC_Stop+0x74>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2201      	movs	r2, #1
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2254      	movs	r2, #84	@ 0x54
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001e80:	230f      	movs	r3, #15
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	781b      	ldrb	r3, [r3, #0]
}
 8001e86:	0018      	movs	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b004      	add	sp, #16
 8001e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	fffffefe 	.word	0xfffffefe

08001e94 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d102      	bne.n	8001eac <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001ea6:	2308      	movs	r3, #8
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	e00f      	b.n	8001ecc <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d007      	beq.n	8001ec8 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e072      	b.n	8001fae <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001ec8:	2304      	movs	r3, #4
 8001eca:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ecc:	f7ff fc18 	bl	8001700 <HAL_GetTick>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001ed4:	e01f      	b.n	8001f16 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	d01c      	beq.n	8001f16 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001edc:	f7ff fc10 	bl	8001700 <HAL_GetTick>
 8001ee0:	0002      	movs	r2, r0
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d302      	bcc.n	8001ef2 <HAL_ADC_PollForConversion+0x5e>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d111      	bne.n	8001f16 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4013      	ands	r3, r2
 8001efc:	d10b      	bne.n	8001f16 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f02:	2204      	movs	r2, #4
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2254      	movs	r2, #84	@ 0x54
 8001f0e:	2100      	movs	r1, #0
 8001f10:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e04b      	b.n	8001fae <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d0d9      	beq.n	8001ed6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f26:	2280      	movs	r2, #128	@ 0x80
 8001f28:	0092      	lsls	r2, r2, #2
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7ff fc66 	bl	8001806 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f3a:	1e03      	subs	r3, r0, #0
 8001f3c:	d02e      	beq.n	8001f9c <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	7e9b      	ldrb	r3, [r3, #26]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d12a      	bne.n	8001f9c <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d123      	bne.n	8001f9c <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f7ff fd57 	bl	8001a0c <LL_ADC_REG_IsConversionOngoing>
 8001f5e:	1e03      	subs	r3, r0, #0
 8001f60:	d110      	bne.n	8001f84 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	210c      	movs	r1, #12
 8001f6e:	438a      	bics	r2, r1
 8001f70:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f76:	4a10      	ldr	r2, [pc, #64]	@ (8001fb8 <HAL_ADC_PollForConversion+0x124>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f82:	e00b      	b.n	8001f9c <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f88:	2220      	movs	r2, #32
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f94:	2201      	movs	r2, #1
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7e1b      	ldrb	r3, [r3, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d103      	bne.n	8001fac <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	220c      	movs	r2, #12
 8001faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	0018      	movs	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b004      	add	sp, #16
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			@ (mov r8, r8)
 8001fb8:	fffffefe 	.word	0xfffffefe

08001fbc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001fca:	0018      	movs	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b002      	add	sp, #8
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fde:	2317      	movs	r3, #23
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2254      	movs	r2, #84	@ 0x54
 8001fee:	5c9b      	ldrb	r3, [r3, r2]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x24>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e1c0      	b.n	800237a <HAL_ADC_ConfigChannel+0x3a6>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2254      	movs	r2, #84	@ 0x54
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	0018      	movs	r0, r3
 8002006:	f7ff fd01 	bl	8001a0c <LL_ADC_REG_IsConversionOngoing>
 800200a:	1e03      	subs	r3, r0, #0
 800200c:	d000      	beq.n	8002010 <HAL_ADC_ConfigChannel+0x3c>
 800200e:	e1a3      	b.n	8002358 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d100      	bne.n	800201a <HAL_ADC_ConfigChannel+0x46>
 8002018:	e143      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	2380      	movs	r3, #128	@ 0x80
 8002020:	061b      	lsls	r3, r3, #24
 8002022:	429a      	cmp	r2, r3
 8002024:	d004      	beq.n	8002030 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800202a:	4ac1      	ldr	r2, [pc, #772]	@ (8002330 <HAL_ADC_ConfigChannel+0x35c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d108      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	0019      	movs	r1, r3
 800203a:	0010      	movs	r0, r2
 800203c:	f7ff fc14 	bl	8001868 <LL_ADC_REG_SetSequencerChAdd>
 8002040:	e0c9      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	211f      	movs	r1, #31
 800204c:	400b      	ands	r3, r1
 800204e:	210f      	movs	r1, #15
 8002050:	4099      	lsls	r1, r3
 8002052:	000b      	movs	r3, r1
 8002054:	43db      	mvns	r3, r3
 8002056:	4013      	ands	r3, r2
 8002058:	0019      	movs	r1, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	035b      	lsls	r3, r3, #13
 8002060:	0b5b      	lsrs	r3, r3, #13
 8002062:	d105      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x9c>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	0e9b      	lsrs	r3, r3, #26
 800206a:	221f      	movs	r2, #31
 800206c:	4013      	ands	r3, r2
 800206e:	e098      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2201      	movs	r2, #1
 8002076:	4013      	ands	r3, r2
 8002078:	d000      	beq.n	800207c <HAL_ADC_ConfigChannel+0xa8>
 800207a:	e091      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x1cc>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2202      	movs	r2, #2
 8002082:	4013      	ands	r3, r2
 8002084:	d000      	beq.n	8002088 <HAL_ADC_ConfigChannel+0xb4>
 8002086:	e089      	b.n	800219c <HAL_ADC_ConfigChannel+0x1c8>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2204      	movs	r2, #4
 800208e:	4013      	ands	r3, r2
 8002090:	d000      	beq.n	8002094 <HAL_ADC_ConfigChannel+0xc0>
 8002092:	e081      	b.n	8002198 <HAL_ADC_ConfigChannel+0x1c4>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2208      	movs	r2, #8
 800209a:	4013      	ands	r3, r2
 800209c:	d000      	beq.n	80020a0 <HAL_ADC_ConfigChannel+0xcc>
 800209e:	e079      	b.n	8002194 <HAL_ADC_ConfigChannel+0x1c0>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2210      	movs	r2, #16
 80020a6:	4013      	ands	r3, r2
 80020a8:	d000      	beq.n	80020ac <HAL_ADC_ConfigChannel+0xd8>
 80020aa:	e071      	b.n	8002190 <HAL_ADC_ConfigChannel+0x1bc>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2220      	movs	r2, #32
 80020b2:	4013      	ands	r3, r2
 80020b4:	d000      	beq.n	80020b8 <HAL_ADC_ConfigChannel+0xe4>
 80020b6:	e069      	b.n	800218c <HAL_ADC_ConfigChannel+0x1b8>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2240      	movs	r2, #64	@ 0x40
 80020be:	4013      	ands	r3, r2
 80020c0:	d000      	beq.n	80020c4 <HAL_ADC_ConfigChannel+0xf0>
 80020c2:	e061      	b.n	8002188 <HAL_ADC_ConfigChannel+0x1b4>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2280      	movs	r2, #128	@ 0x80
 80020ca:	4013      	ands	r3, r2
 80020cc:	d000      	beq.n	80020d0 <HAL_ADC_ConfigChannel+0xfc>
 80020ce:	e059      	b.n	8002184 <HAL_ADC_ConfigChannel+0x1b0>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	2380      	movs	r3, #128	@ 0x80
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4013      	ands	r3, r2
 80020da:	d151      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x1ac>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	2380      	movs	r3, #128	@ 0x80
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4013      	ands	r3, r2
 80020e6:	d149      	bne.n	800217c <HAL_ADC_ConfigChannel+0x1a8>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	2380      	movs	r3, #128	@ 0x80
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4013      	ands	r3, r2
 80020f2:	d141      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x1a4>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	2380      	movs	r3, #128	@ 0x80
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	4013      	ands	r3, r2
 80020fe:	d139      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x1a0>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2380      	movs	r3, #128	@ 0x80
 8002106:	015b      	lsls	r3, r3, #5
 8002108:	4013      	ands	r3, r2
 800210a:	d131      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x19c>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	2380      	movs	r3, #128	@ 0x80
 8002112:	019b      	lsls	r3, r3, #6
 8002114:	4013      	ands	r3, r2
 8002116:	d129      	bne.n	800216c <HAL_ADC_ConfigChannel+0x198>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	2380      	movs	r3, #128	@ 0x80
 800211e:	01db      	lsls	r3, r3, #7
 8002120:	4013      	ands	r3, r2
 8002122:	d121      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x194>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	2380      	movs	r3, #128	@ 0x80
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	4013      	ands	r3, r2
 800212e:	d119      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x190>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2380      	movs	r3, #128	@ 0x80
 8002136:	025b      	lsls	r3, r3, #9
 8002138:	4013      	ands	r3, r2
 800213a:	d111      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x18c>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	2380      	movs	r3, #128	@ 0x80
 8002142:	029b      	lsls	r3, r3, #10
 8002144:	4013      	ands	r3, r2
 8002146:	d109      	bne.n	800215c <HAL_ADC_ConfigChannel+0x188>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	2380      	movs	r3, #128	@ 0x80
 800214e:	02db      	lsls	r3, r3, #11
 8002150:	4013      	ands	r3, r2
 8002152:	d001      	beq.n	8002158 <HAL_ADC_ConfigChannel+0x184>
 8002154:	2312      	movs	r3, #18
 8002156:	e024      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002158:	2300      	movs	r3, #0
 800215a:	e022      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ce>
 800215c:	2311      	movs	r3, #17
 800215e:	e020      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002160:	2310      	movs	r3, #16
 8002162:	e01e      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002164:	230f      	movs	r3, #15
 8002166:	e01c      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002168:	230e      	movs	r3, #14
 800216a:	e01a      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ce>
 800216c:	230d      	movs	r3, #13
 800216e:	e018      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002170:	230c      	movs	r3, #12
 8002172:	e016      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002174:	230b      	movs	r3, #11
 8002176:	e014      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002178:	230a      	movs	r3, #10
 800217a:	e012      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ce>
 800217c:	2309      	movs	r3, #9
 800217e:	e010      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002180:	2308      	movs	r3, #8
 8002182:	e00e      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002184:	2307      	movs	r3, #7
 8002186:	e00c      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002188:	2306      	movs	r3, #6
 800218a:	e00a      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ce>
 800218c:	2305      	movs	r3, #5
 800218e:	e008      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002190:	2304      	movs	r3, #4
 8002192:	e006      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002194:	2303      	movs	r3, #3
 8002196:	e004      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002198:	2302      	movs	r3, #2
 800219a:	e002      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ce>
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ce>
 80021a0:	2300      	movs	r3, #0
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	6852      	ldr	r2, [r2, #4]
 80021a6:	201f      	movs	r0, #31
 80021a8:	4002      	ands	r2, r0
 80021aa:	4093      	lsls	r3, r2
 80021ac:	000a      	movs	r2, r1
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d808      	bhi.n	80021d6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	001a      	movs	r2, r3
 80021d2:	f7ff fb29 	bl	8001828 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	6819      	ldr	r1, [r3, #0]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	001a      	movs	r2, r3
 80021e4:	f7ff fb64 	bl	80018b0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db00      	blt.n	80021f2 <HAL_ADC_ConfigChannel+0x21e>
 80021f0:	e0bc      	b.n	800236c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021f2:	4b50      	ldr	r3, [pc, #320]	@ (8002334 <HAL_ADC_ConfigChannel+0x360>)
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7ff fac5 	bl	8001784 <LL_ADC_GetCommonPathInternalCh>
 80021fa:	0003      	movs	r3, r0
 80021fc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a4d      	ldr	r2, [pc, #308]	@ (8002338 <HAL_ADC_ConfigChannel+0x364>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d122      	bne.n	800224e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	2380      	movs	r3, #128	@ 0x80
 800220c:	041b      	lsls	r3, r3, #16
 800220e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002210:	d11d      	bne.n	800224e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2280      	movs	r2, #128	@ 0x80
 8002216:	0412      	lsls	r2, r2, #16
 8002218:	4313      	orrs	r3, r2
 800221a:	4a46      	ldr	r2, [pc, #280]	@ (8002334 <HAL_ADC_ConfigChannel+0x360>)
 800221c:	0019      	movs	r1, r3
 800221e:	0010      	movs	r0, r2
 8002220:	f7ff fa9c 	bl	800175c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002224:	4b45      	ldr	r3, [pc, #276]	@ (800233c <HAL_ADC_ConfigChannel+0x368>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4945      	ldr	r1, [pc, #276]	@ (8002340 <HAL_ADC_ConfigChannel+0x36c>)
 800222a:	0018      	movs	r0, r3
 800222c:	f7fd ff68 	bl	8000100 <__udivsi3>
 8002230:	0003      	movs	r3, r0
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	0013      	movs	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	189b      	adds	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800223e:	e002      	b.n	8002246 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	3b01      	subs	r3, #1
 8002244:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f9      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800224c:	e08e      	b.n	800236c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a3c      	ldr	r2, [pc, #240]	@ (8002344 <HAL_ADC_ConfigChannel+0x370>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d10e      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	2380      	movs	r3, #128	@ 0x80
 800225c:	045b      	lsls	r3, r3, #17
 800225e:	4013      	ands	r3, r2
 8002260:	d109      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	2280      	movs	r2, #128	@ 0x80
 8002266:	0452      	lsls	r2, r2, #17
 8002268:	4313      	orrs	r3, r2
 800226a:	4a32      	ldr	r2, [pc, #200]	@ (8002334 <HAL_ADC_ConfigChannel+0x360>)
 800226c:	0019      	movs	r1, r3
 800226e:	0010      	movs	r0, r2
 8002270:	f7ff fa74 	bl	800175c <LL_ADC_SetCommonPathInternalCh>
 8002274:	e07a      	b.n	800236c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a33      	ldr	r2, [pc, #204]	@ (8002348 <HAL_ADC_ConfigChannel+0x374>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d000      	beq.n	8002282 <HAL_ADC_ConfigChannel+0x2ae>
 8002280:	e074      	b.n	800236c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	2380      	movs	r3, #128	@ 0x80
 8002286:	03db      	lsls	r3, r3, #15
 8002288:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800228a:	d000      	beq.n	800228e <HAL_ADC_ConfigChannel+0x2ba>
 800228c:	e06e      	b.n	800236c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2280      	movs	r2, #128	@ 0x80
 8002292:	03d2      	lsls	r2, r2, #15
 8002294:	4313      	orrs	r3, r2
 8002296:	4a27      	ldr	r2, [pc, #156]	@ (8002334 <HAL_ADC_ConfigChannel+0x360>)
 8002298:	0019      	movs	r1, r3
 800229a:	0010      	movs	r0, r2
 800229c:	f7ff fa5e 	bl	800175c <LL_ADC_SetCommonPathInternalCh>
 80022a0:	e064      	b.n	800236c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	2380      	movs	r3, #128	@ 0x80
 80022a8:	061b      	lsls	r3, r3, #24
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d004      	beq.n	80022b8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80022b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002330 <HAL_ADC_ConfigChannel+0x35c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d107      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	0019      	movs	r1, r3
 80022c2:	0010      	movs	r0, r2
 80022c4:	f7ff fae1 	bl	800188a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	da4d      	bge.n	800236c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022d0:	4b18      	ldr	r3, [pc, #96]	@ (8002334 <HAL_ADC_ConfigChannel+0x360>)
 80022d2:	0018      	movs	r0, r3
 80022d4:	f7ff fa56 	bl	8001784 <LL_ADC_GetCommonPathInternalCh>
 80022d8:	0003      	movs	r3, r0
 80022da:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a15      	ldr	r2, [pc, #84]	@ (8002338 <HAL_ADC_ConfigChannel+0x364>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d108      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4a18      	ldr	r2, [pc, #96]	@ (800234c <HAL_ADC_ConfigChannel+0x378>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	4a11      	ldr	r2, [pc, #68]	@ (8002334 <HAL_ADC_ConfigChannel+0x360>)
 80022ee:	0019      	movs	r1, r3
 80022f0:	0010      	movs	r0, r2
 80022f2:	f7ff fa33 	bl	800175c <LL_ADC_SetCommonPathInternalCh>
 80022f6:	e039      	b.n	800236c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a11      	ldr	r2, [pc, #68]	@ (8002344 <HAL_ADC_ConfigChannel+0x370>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d108      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4a12      	ldr	r2, [pc, #72]	@ (8002350 <HAL_ADC_ConfigChannel+0x37c>)
 8002306:	4013      	ands	r3, r2
 8002308:	4a0a      	ldr	r2, [pc, #40]	@ (8002334 <HAL_ADC_ConfigChannel+0x360>)
 800230a:	0019      	movs	r1, r3
 800230c:	0010      	movs	r0, r2
 800230e:	f7ff fa25 	bl	800175c <LL_ADC_SetCommonPathInternalCh>
 8002312:	e02b      	b.n	800236c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0b      	ldr	r2, [pc, #44]	@ (8002348 <HAL_ADC_ConfigChannel+0x374>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d126      	bne.n	800236c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4a0c      	ldr	r2, [pc, #48]	@ (8002354 <HAL_ADC_ConfigChannel+0x380>)
 8002322:	4013      	ands	r3, r2
 8002324:	4a03      	ldr	r2, [pc, #12]	@ (8002334 <HAL_ADC_ConfigChannel+0x360>)
 8002326:	0019      	movs	r1, r3
 8002328:	0010      	movs	r0, r2
 800232a:	f7ff fa17 	bl	800175c <LL_ADC_SetCommonPathInternalCh>
 800232e:	e01d      	b.n	800236c <HAL_ADC_ConfigChannel+0x398>
 8002330:	80000004 	.word	0x80000004
 8002334:	40012708 	.word	0x40012708
 8002338:	b0001000 	.word	0xb0001000
 800233c:	20000030 	.word	0x20000030
 8002340:	00030d40 	.word	0x00030d40
 8002344:	b8004000 	.word	0xb8004000
 8002348:	b4002000 	.word	0xb4002000
 800234c:	ff7fffff 	.word	0xff7fffff
 8002350:	feffffff 	.word	0xfeffffff
 8002354:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235c:	2220      	movs	r2, #32
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002364:	2317      	movs	r3, #23
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2254      	movs	r2, #84	@ 0x54
 8002370:	2100      	movs	r1, #0
 8002372:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002374:	2317      	movs	r3, #23
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	781b      	ldrb	r3, [r3, #0]
}
 800237a:	0018      	movs	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	b006      	add	sp, #24
 8002380:	bd80      	pop	{r7, pc}
 8002382:	46c0      	nop			@ (mov r8, r8)

08002384 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	0018      	movs	r0, r3
 8002392:	f7ff fb3b 	bl	8001a0c <LL_ADC_REG_IsConversionOngoing>
 8002396:	1e03      	subs	r3, r0, #0
 8002398:	d031      	beq.n	80023fe <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	0018      	movs	r0, r3
 80023a0:	f7ff faff 	bl	80019a2 <LL_ADC_IsDisableOngoing>
 80023a4:	1e03      	subs	r3, r0, #0
 80023a6:	d104      	bne.n	80023b2 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	0018      	movs	r0, r3
 80023ae:	f7ff fb1b 	bl	80019e8 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023b2:	f7ff f9a5 	bl	8001700 <HAL_GetTick>
 80023b6:	0003      	movs	r3, r0
 80023b8:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80023ba:	e01a      	b.n	80023f2 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80023bc:	f7ff f9a0 	bl	8001700 <HAL_GetTick>
 80023c0:	0002      	movs	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d913      	bls.n	80023f2 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2204      	movs	r2, #4
 80023d2:	4013      	ands	r3, r2
 80023d4:	d00d      	beq.n	80023f2 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023da:	2210      	movs	r2, #16
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e6:	2201      	movs	r2, #1
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e006      	b.n	8002400 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2204      	movs	r2, #4
 80023fa:	4013      	ands	r3, r2
 80023fc:	d1de      	bne.n	80023bc <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	0018      	movs	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	b004      	add	sp, #16
 8002406:	bd80      	pop	{r7, pc}

08002408 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0018      	movs	r0, r3
 800241a:	f7ff fab1 	bl	8001980 <LL_ADC_IsEnabled>
 800241e:	1e03      	subs	r3, r0, #0
 8002420:	d000      	beq.n	8002424 <ADC_Enable+0x1c>
 8002422:	e069      	b.n	80024f8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	4a36      	ldr	r2, [pc, #216]	@ (8002504 <ADC_Enable+0xfc>)
 800242c:	4013      	ands	r3, r2
 800242e:	d00d      	beq.n	800244c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002434:	2210      	movs	r2, #16
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002440:	2201      	movs	r2, #1
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e056      	b.n	80024fa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0018      	movs	r0, r3
 8002452:	f7ff fa71 	bl	8001938 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002456:	4b2c      	ldr	r3, [pc, #176]	@ (8002508 <ADC_Enable+0x100>)
 8002458:	0018      	movs	r0, r3
 800245a:	f7ff f993 	bl	8001784 <LL_ADC_GetCommonPathInternalCh>
 800245e:	0002      	movs	r2, r0
 8002460:	2380      	movs	r3, #128	@ 0x80
 8002462:	041b      	lsls	r3, r3, #16
 8002464:	4013      	ands	r3, r2
 8002466:	d00f      	beq.n	8002488 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002468:	4b28      	ldr	r3, [pc, #160]	@ (800250c <ADC_Enable+0x104>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4928      	ldr	r1, [pc, #160]	@ (8002510 <ADC_Enable+0x108>)
 800246e:	0018      	movs	r0, r3
 8002470:	f7fd fe46 	bl	8000100 <__udivsi3>
 8002474:	0003      	movs	r3, r0
 8002476:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002478:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800247a:	e002      	b.n	8002482 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	3b01      	subs	r3, #1
 8002480:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f9      	bne.n	800247c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	7e5b      	ldrb	r3, [r3, #25]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d033      	beq.n	80024f8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002490:	f7ff f936 	bl	8001700 <HAL_GetTick>
 8002494:	0003      	movs	r3, r0
 8002496:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002498:	e027      	b.n	80024ea <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	0018      	movs	r0, r3
 80024a0:	f7ff fa6e 	bl	8001980 <LL_ADC_IsEnabled>
 80024a4:	1e03      	subs	r3, r0, #0
 80024a6:	d104      	bne.n	80024b2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	0018      	movs	r0, r3
 80024ae:	f7ff fa43 	bl	8001938 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024b2:	f7ff f925 	bl	8001700 <HAL_GetTick>
 80024b6:	0002      	movs	r2, r0
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d914      	bls.n	80024ea <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2201      	movs	r2, #1
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d00d      	beq.n	80024ea <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d2:	2210      	movs	r2, #16
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024de:	2201      	movs	r2, #1
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e007      	b.n	80024fa <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2201      	movs	r2, #1
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d1d0      	bne.n	800249a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	0018      	movs	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b004      	add	sp, #16
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			@ (mov r8, r8)
 8002504:	80000017 	.word	0x80000017
 8002508:	40012708 	.word	0x40012708
 800250c:	20000030 	.word	0x20000030
 8002510:	00030d40 	.word	0x00030d40

08002514 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	0018      	movs	r0, r3
 8002522:	f7ff fa3e 	bl	80019a2 <LL_ADC_IsDisableOngoing>
 8002526:	0003      	movs	r3, r0
 8002528:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	0018      	movs	r0, r3
 8002530:	f7ff fa26 	bl	8001980 <LL_ADC_IsEnabled>
 8002534:	1e03      	subs	r3, r0, #0
 8002536:	d046      	beq.n	80025c6 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d143      	bne.n	80025c6 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2205      	movs	r2, #5
 8002546:	4013      	ands	r3, r2
 8002548:	2b01      	cmp	r3, #1
 800254a:	d10d      	bne.n	8002568 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0018      	movs	r0, r3
 8002552:	f7ff fa03 	bl	800195c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2203      	movs	r2, #3
 800255c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800255e:	f7ff f8cf 	bl	8001700 <HAL_GetTick>
 8002562:	0003      	movs	r3, r0
 8002564:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002566:	e028      	b.n	80025ba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256c:	2210      	movs	r2, #16
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002578:	2201      	movs	r2, #1
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e021      	b.n	80025c8 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002584:	f7ff f8bc 	bl	8001700 <HAL_GetTick>
 8002588:	0002      	movs	r2, r0
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d913      	bls.n	80025ba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2201      	movs	r2, #1
 800259a:	4013      	ands	r3, r2
 800259c:	d00d      	beq.n	80025ba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a2:	2210      	movs	r2, #16
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ae:	2201      	movs	r2, #1
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e006      	b.n	80025c8 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2201      	movs	r2, #1
 80025c2:	4013      	ands	r3, r2
 80025c4:	d1de      	bne.n	8002584 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b004      	add	sp, #16
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	0002      	movs	r2, r0
 80025d8:	6039      	str	r1, [r7, #0]
 80025da:	1dfb      	adds	r3, r7, #7
 80025dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025de:	1dfb      	adds	r3, r7, #7
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80025e4:	d828      	bhi.n	8002638 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025e6:	4a2f      	ldr	r2, [pc, #188]	@ (80026a4 <__NVIC_SetPriority+0xd4>)
 80025e8:	1dfb      	adds	r3, r7, #7
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	33c0      	adds	r3, #192	@ 0xc0
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	589b      	ldr	r3, [r3, r2]
 80025f6:	1dfa      	adds	r2, r7, #7
 80025f8:	7812      	ldrb	r2, [r2, #0]
 80025fa:	0011      	movs	r1, r2
 80025fc:	2203      	movs	r2, #3
 80025fe:	400a      	ands	r2, r1
 8002600:	00d2      	lsls	r2, r2, #3
 8002602:	21ff      	movs	r1, #255	@ 0xff
 8002604:	4091      	lsls	r1, r2
 8002606:	000a      	movs	r2, r1
 8002608:	43d2      	mvns	r2, r2
 800260a:	401a      	ands	r2, r3
 800260c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	019b      	lsls	r3, r3, #6
 8002612:	22ff      	movs	r2, #255	@ 0xff
 8002614:	401a      	ands	r2, r3
 8002616:	1dfb      	adds	r3, r7, #7
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	0018      	movs	r0, r3
 800261c:	2303      	movs	r3, #3
 800261e:	4003      	ands	r3, r0
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002624:	481f      	ldr	r0, [pc, #124]	@ (80026a4 <__NVIC_SetPriority+0xd4>)
 8002626:	1dfb      	adds	r3, r7, #7
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	b25b      	sxtb	r3, r3
 800262c:	089b      	lsrs	r3, r3, #2
 800262e:	430a      	orrs	r2, r1
 8002630:	33c0      	adds	r3, #192	@ 0xc0
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002636:	e031      	b.n	800269c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002638:	4a1b      	ldr	r2, [pc, #108]	@ (80026a8 <__NVIC_SetPriority+0xd8>)
 800263a:	1dfb      	adds	r3, r7, #7
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	0019      	movs	r1, r3
 8002640:	230f      	movs	r3, #15
 8002642:	400b      	ands	r3, r1
 8002644:	3b08      	subs	r3, #8
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	3306      	adds	r3, #6
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	18d3      	adds	r3, r2, r3
 800264e:	3304      	adds	r3, #4
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	1dfa      	adds	r2, r7, #7
 8002654:	7812      	ldrb	r2, [r2, #0]
 8002656:	0011      	movs	r1, r2
 8002658:	2203      	movs	r2, #3
 800265a:	400a      	ands	r2, r1
 800265c:	00d2      	lsls	r2, r2, #3
 800265e:	21ff      	movs	r1, #255	@ 0xff
 8002660:	4091      	lsls	r1, r2
 8002662:	000a      	movs	r2, r1
 8002664:	43d2      	mvns	r2, r2
 8002666:	401a      	ands	r2, r3
 8002668:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	019b      	lsls	r3, r3, #6
 800266e:	22ff      	movs	r2, #255	@ 0xff
 8002670:	401a      	ands	r2, r3
 8002672:	1dfb      	adds	r3, r7, #7
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	0018      	movs	r0, r3
 8002678:	2303      	movs	r3, #3
 800267a:	4003      	ands	r3, r0
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002680:	4809      	ldr	r0, [pc, #36]	@ (80026a8 <__NVIC_SetPriority+0xd8>)
 8002682:	1dfb      	adds	r3, r7, #7
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	001c      	movs	r4, r3
 8002688:	230f      	movs	r3, #15
 800268a:	4023      	ands	r3, r4
 800268c:	3b08      	subs	r3, #8
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	430a      	orrs	r2, r1
 8002692:	3306      	adds	r3, #6
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	18c3      	adds	r3, r0, r3
 8002698:	3304      	adds	r3, #4
 800269a:	601a      	str	r2, [r3, #0]
}
 800269c:	46c0      	nop			@ (mov r8, r8)
 800269e:	46bd      	mov	sp, r7
 80026a0:	b003      	add	sp, #12
 80026a2:	bd90      	pop	{r4, r7, pc}
 80026a4:	e000e100 	.word	0xe000e100
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	1e5a      	subs	r2, r3, #1
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	045b      	lsls	r3, r3, #17
 80026bc:	429a      	cmp	r2, r3
 80026be:	d301      	bcc.n	80026c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c0:	2301      	movs	r3, #1
 80026c2:	e010      	b.n	80026e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c4:	4b0a      	ldr	r3, [pc, #40]	@ (80026f0 <SysTick_Config+0x44>)
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	3a01      	subs	r2, #1
 80026ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026cc:	2301      	movs	r3, #1
 80026ce:	425b      	negs	r3, r3
 80026d0:	2103      	movs	r1, #3
 80026d2:	0018      	movs	r0, r3
 80026d4:	f7ff ff7c 	bl	80025d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <SysTick_Config+0x44>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026de:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <SysTick_Config+0x44>)
 80026e0:	2207      	movs	r2, #7
 80026e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	0018      	movs	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b002      	add	sp, #8
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	e000e010 	.word	0xe000e010

080026f4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	210f      	movs	r1, #15
 8002700:	187b      	adds	r3, r7, r1
 8002702:	1c02      	adds	r2, r0, #0
 8002704:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	187b      	adds	r3, r7, r1
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	b25b      	sxtb	r3, r3
 800270e:	0011      	movs	r1, r2
 8002710:	0018      	movs	r0, r3
 8002712:	f7ff ff5d 	bl	80025d0 <__NVIC_SetPriority>
}
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	46bd      	mov	sp, r7
 800271a:	b004      	add	sp, #16
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	0018      	movs	r0, r3
 800272a:	f7ff ffbf 	bl	80026ac <SysTick_Config>
 800272e:	0003      	movs	r3, r0
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b002      	add	sp, #8
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002746:	e147      	b.n	80029d8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2101      	movs	r1, #1
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4091      	lsls	r1, r2
 8002752:	000a      	movs	r2, r1
 8002754:	4013      	ands	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d100      	bne.n	8002760 <HAL_GPIO_Init+0x28>
 800275e:	e138      	b.n	80029d2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2203      	movs	r2, #3
 8002766:	4013      	ands	r3, r2
 8002768:	2b01      	cmp	r3, #1
 800276a:	d005      	beq.n	8002778 <HAL_GPIO_Init+0x40>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2203      	movs	r2, #3
 8002772:	4013      	ands	r3, r2
 8002774:	2b02      	cmp	r3, #2
 8002776:	d130      	bne.n	80027da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	2203      	movs	r2, #3
 8002784:	409a      	lsls	r2, r3
 8002786:	0013      	movs	r3, r2
 8002788:	43da      	mvns	r2, r3
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4013      	ands	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	409a      	lsls	r2, r3
 800279a:	0013      	movs	r3, r2
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027ae:	2201      	movs	r2, #1
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	409a      	lsls	r2, r3
 80027b4:	0013      	movs	r3, r2
 80027b6:	43da      	mvns	r2, r3
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	091b      	lsrs	r3, r3, #4
 80027c4:	2201      	movs	r2, #1
 80027c6:	401a      	ands	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	409a      	lsls	r2, r3
 80027cc:	0013      	movs	r3, r2
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2203      	movs	r2, #3
 80027e0:	4013      	ands	r3, r2
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d017      	beq.n	8002816 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	2203      	movs	r2, #3
 80027f2:	409a      	lsls	r2, r3
 80027f4:	0013      	movs	r3, r2
 80027f6:	43da      	mvns	r2, r3
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	409a      	lsls	r2, r3
 8002808:	0013      	movs	r3, r2
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2203      	movs	r2, #3
 800281c:	4013      	ands	r3, r2
 800281e:	2b02      	cmp	r3, #2
 8002820:	d123      	bne.n	800286a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	08da      	lsrs	r2, r3, #3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3208      	adds	r2, #8
 800282a:	0092      	lsls	r2, r2, #2
 800282c:	58d3      	ldr	r3, [r2, r3]
 800282e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2207      	movs	r2, #7
 8002834:	4013      	ands	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	220f      	movs	r2, #15
 800283a:	409a      	lsls	r2, r3
 800283c:	0013      	movs	r3, r2
 800283e:	43da      	mvns	r2, r3
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4013      	ands	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	691a      	ldr	r2, [r3, #16]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2107      	movs	r1, #7
 800284e:	400b      	ands	r3, r1
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	409a      	lsls	r2, r3
 8002854:	0013      	movs	r3, r2
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	08da      	lsrs	r2, r3, #3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3208      	adds	r2, #8
 8002864:	0092      	lsls	r2, r2, #2
 8002866:	6939      	ldr	r1, [r7, #16]
 8002868:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	2203      	movs	r2, #3
 8002876:	409a      	lsls	r2, r3
 8002878:	0013      	movs	r3, r2
 800287a:	43da      	mvns	r2, r3
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2203      	movs	r2, #3
 8002888:	401a      	ands	r2, r3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	409a      	lsls	r2, r3
 8002890:	0013      	movs	r3, r2
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	23c0      	movs	r3, #192	@ 0xc0
 80028a4:	029b      	lsls	r3, r3, #10
 80028a6:	4013      	ands	r3, r2
 80028a8:	d100      	bne.n	80028ac <HAL_GPIO_Init+0x174>
 80028aa:	e092      	b.n	80029d2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80028ac:	4a50      	ldr	r2, [pc, #320]	@ (80029f0 <HAL_GPIO_Init+0x2b8>)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	3318      	adds	r3, #24
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	589b      	ldr	r3, [r3, r2]
 80028b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2203      	movs	r2, #3
 80028be:	4013      	ands	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	220f      	movs	r2, #15
 80028c4:	409a      	lsls	r2, r3
 80028c6:	0013      	movs	r3, r2
 80028c8:	43da      	mvns	r2, r3
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	23a0      	movs	r3, #160	@ 0xa0
 80028d4:	05db      	lsls	r3, r3, #23
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d013      	beq.n	8002902 <HAL_GPIO_Init+0x1ca>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a45      	ldr	r2, [pc, #276]	@ (80029f4 <HAL_GPIO_Init+0x2bc>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00d      	beq.n	80028fe <HAL_GPIO_Init+0x1c6>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a44      	ldr	r2, [pc, #272]	@ (80029f8 <HAL_GPIO_Init+0x2c0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d007      	beq.n	80028fa <HAL_GPIO_Init+0x1c2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a43      	ldr	r2, [pc, #268]	@ (80029fc <HAL_GPIO_Init+0x2c4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d101      	bne.n	80028f6 <HAL_GPIO_Init+0x1be>
 80028f2:	2303      	movs	r3, #3
 80028f4:	e006      	b.n	8002904 <HAL_GPIO_Init+0x1cc>
 80028f6:	2305      	movs	r3, #5
 80028f8:	e004      	b.n	8002904 <HAL_GPIO_Init+0x1cc>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e002      	b.n	8002904 <HAL_GPIO_Init+0x1cc>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <HAL_GPIO_Init+0x1cc>
 8002902:	2300      	movs	r3, #0
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	2103      	movs	r1, #3
 8002908:	400a      	ands	r2, r1
 800290a:	00d2      	lsls	r2, r2, #3
 800290c:	4093      	lsls	r3, r2
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002914:	4936      	ldr	r1, [pc, #216]	@ (80029f0 <HAL_GPIO_Init+0x2b8>)
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	089b      	lsrs	r3, r3, #2
 800291a:	3318      	adds	r3, #24
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002922:	4b33      	ldr	r3, [pc, #204]	@ (80029f0 <HAL_GPIO_Init+0x2b8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	43da      	mvns	r2, r3
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4013      	ands	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	2380      	movs	r3, #128	@ 0x80
 8002938:	035b      	lsls	r3, r3, #13
 800293a:	4013      	ands	r3, r2
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002946:	4b2a      	ldr	r3, [pc, #168]	@ (80029f0 <HAL_GPIO_Init+0x2b8>)
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800294c:	4b28      	ldr	r3, [pc, #160]	@ (80029f0 <HAL_GPIO_Init+0x2b8>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	43da      	mvns	r2, r3
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	2380      	movs	r3, #128	@ 0x80
 8002962:	039b      	lsls	r3, r3, #14
 8002964:	4013      	ands	r3, r2
 8002966:	d003      	beq.n	8002970 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002970:	4b1f      	ldr	r3, [pc, #124]	@ (80029f0 <HAL_GPIO_Init+0x2b8>)
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002976:	4a1e      	ldr	r2, [pc, #120]	@ (80029f0 <HAL_GPIO_Init+0x2b8>)
 8002978:	2384      	movs	r3, #132	@ 0x84
 800297a:	58d3      	ldr	r3, [r2, r3]
 800297c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	43da      	mvns	r2, r3
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	2380      	movs	r3, #128	@ 0x80
 800298e:	029b      	lsls	r3, r3, #10
 8002990:	4013      	ands	r3, r2
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800299c:	4914      	ldr	r1, [pc, #80]	@ (80029f0 <HAL_GPIO_Init+0x2b8>)
 800299e:	2284      	movs	r2, #132	@ 0x84
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80029a4:	4a12      	ldr	r2, [pc, #72]	@ (80029f0 <HAL_GPIO_Init+0x2b8>)
 80029a6:	2380      	movs	r3, #128	@ 0x80
 80029a8:	58d3      	ldr	r3, [r2, r3]
 80029aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	43da      	mvns	r2, r3
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4013      	ands	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	2380      	movs	r3, #128	@ 0x80
 80029bc:	025b      	lsls	r3, r3, #9
 80029be:	4013      	ands	r3, r2
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029ca:	4909      	ldr	r1, [pc, #36]	@ (80029f0 <HAL_GPIO_Init+0x2b8>)
 80029cc:	2280      	movs	r2, #128	@ 0x80
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	3301      	adds	r3, #1
 80029d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	40da      	lsrs	r2, r3
 80029e0:	1e13      	subs	r3, r2, #0
 80029e2:	d000      	beq.n	80029e6 <HAL_GPIO_Init+0x2ae>
 80029e4:	e6b0      	b.n	8002748 <HAL_GPIO_Init+0x10>
  }
}
 80029e6:	46c0      	nop			@ (mov r8, r8)
 80029e8:	46c0      	nop			@ (mov r8, r8)
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b006      	add	sp, #24
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021800 	.word	0x40021800
 80029f4:	50000400 	.word	0x50000400
 80029f8:	50000800 	.word	0x50000800
 80029fc:	50000c00 	.word	0x50000c00

08002a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	0008      	movs	r0, r1
 8002a0a:	0011      	movs	r1, r2
 8002a0c:	1cbb      	adds	r3, r7, #2
 8002a0e:	1c02      	adds	r2, r0, #0
 8002a10:	801a      	strh	r2, [r3, #0]
 8002a12:	1c7b      	adds	r3, r7, #1
 8002a14:	1c0a      	adds	r2, r1, #0
 8002a16:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a18:	1c7b      	adds	r3, r7, #1
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d004      	beq.n	8002a2a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a20:	1cbb      	adds	r3, r7, #2
 8002a22:	881a      	ldrh	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a28:	e003      	b.n	8002a32 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a2a:	1cbb      	adds	r3, r7, #2
 8002a2c:	881a      	ldrh	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b002      	add	sp, #8
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e08f      	b.n	8002b6e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2241      	movs	r2, #65	@ 0x41
 8002a52:	5c9b      	ldrb	r3, [r3, r2]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d107      	bne.n	8002a6a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2240      	movs	r2, #64	@ 0x40
 8002a5e:	2100      	movs	r1, #0
 8002a60:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	0018      	movs	r0, r3
 8002a66:	f7fe fc41 	bl	80012ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2241      	movs	r2, #65	@ 0x41
 8002a6e:	2124      	movs	r1, #36	@ 0x24
 8002a70:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	438a      	bics	r2, r1
 8002a80:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	493b      	ldr	r1, [pc, #236]	@ (8002b78 <HAL_I2C_Init+0x13c>)
 8002a8c:	400a      	ands	r2, r1
 8002a8e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4938      	ldr	r1, [pc, #224]	@ (8002b7c <HAL_I2C_Init+0x140>)
 8002a9c:	400a      	ands	r2, r1
 8002a9e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d108      	bne.n	8002aba <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2180      	movs	r1, #128	@ 0x80
 8002ab2:	0209      	lsls	r1, r1, #8
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	e007      	b.n	8002aca <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2184      	movs	r1, #132	@ 0x84
 8002ac4:	0209      	lsls	r1, r1, #8
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d109      	bne.n	8002ae6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2180      	movs	r1, #128	@ 0x80
 8002ade:	0109      	lsls	r1, r1, #4
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	e007      	b.n	8002af6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4923      	ldr	r1, [pc, #140]	@ (8002b80 <HAL_I2C_Init+0x144>)
 8002af2:	400a      	ands	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4920      	ldr	r1, [pc, #128]	@ (8002b84 <HAL_I2C_Init+0x148>)
 8002b02:	430a      	orrs	r2, r1
 8002b04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	491a      	ldr	r1, [pc, #104]	@ (8002b7c <HAL_I2C_Init+0x140>)
 8002b12:	400a      	ands	r2, r1
 8002b14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69d9      	ldr	r1, [r3, #28]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1a      	ldr	r2, [r3, #32]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2241      	movs	r2, #65	@ 0x41
 8002b5a:	2120      	movs	r1, #32
 8002b5c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2242      	movs	r2, #66	@ 0x42
 8002b68:	2100      	movs	r1, #0
 8002b6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	0018      	movs	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b002      	add	sp, #8
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	46c0      	nop			@ (mov r8, r8)
 8002b78:	f0ffffff 	.word	0xf0ffffff
 8002b7c:	ffff7fff 	.word	0xffff7fff
 8002b80:	fffff7ff 	.word	0xfffff7ff
 8002b84:	02008000 	.word	0x02008000

08002b88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2241      	movs	r2, #65	@ 0x41
 8002b96:	5c9b      	ldrb	r3, [r3, r2]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d138      	bne.n	8002c10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2240      	movs	r2, #64	@ 0x40
 8002ba2:	5c9b      	ldrb	r3, [r3, r2]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e032      	b.n	8002c12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2240      	movs	r2, #64	@ 0x40
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2241      	movs	r2, #65	@ 0x41
 8002bb8:	2124      	movs	r1, #36	@ 0x24
 8002bba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	438a      	bics	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4911      	ldr	r1, [pc, #68]	@ (8002c1c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002bd8:	400a      	ands	r2, r1
 8002bda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6819      	ldr	r1, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2241      	movs	r2, #65	@ 0x41
 8002c00:	2120      	movs	r1, #32
 8002c02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2240      	movs	r2, #64	@ 0x40
 8002c08:	2100      	movs	r1, #0
 8002c0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e000      	b.n	8002c12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c10:	2302      	movs	r3, #2
  }
}
 8002c12:	0018      	movs	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b002      	add	sp, #8
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	46c0      	nop			@ (mov r8, r8)
 8002c1c:	ffffefff 	.word	0xffffefff

08002c20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2241      	movs	r2, #65	@ 0x41
 8002c2e:	5c9b      	ldrb	r3, [r3, r2]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	d139      	bne.n	8002caa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2240      	movs	r2, #64	@ 0x40
 8002c3a:	5c9b      	ldrb	r3, [r3, r2]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e033      	b.n	8002cac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2240      	movs	r2, #64	@ 0x40
 8002c48:	2101      	movs	r1, #1
 8002c4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2241      	movs	r2, #65	@ 0x41
 8002c50:	2124      	movs	r1, #36	@ 0x24
 8002c52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2101      	movs	r1, #1
 8002c60:	438a      	bics	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a11      	ldr	r2, [pc, #68]	@ (8002cb4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2101      	movs	r1, #1
 8002c92:	430a      	orrs	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2241      	movs	r2, #65	@ 0x41
 8002c9a:	2120      	movs	r1, #32
 8002c9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2240      	movs	r2, #64	@ 0x40
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	e000      	b.n	8002cac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002caa:	2302      	movs	r3, #2
  }
}
 8002cac:	0018      	movs	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b004      	add	sp, #16
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	fffff0ff 	.word	0xfffff0ff

08002cb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002cc0:	4b19      	ldr	r3, [pc, #100]	@ (8002d28 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a19      	ldr	r2, [pc, #100]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	0019      	movs	r1, r3
 8002cca:	4b17      	ldr	r3, [pc, #92]	@ (8002d28 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	2380      	movs	r3, #128	@ 0x80
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d11f      	bne.n	8002d1c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002cdc:	4b14      	ldr	r3, [pc, #80]	@ (8002d30 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	0013      	movs	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	189b      	adds	r3, r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4912      	ldr	r1, [pc, #72]	@ (8002d34 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002cea:	0018      	movs	r0, r3
 8002cec:	f7fd fa08 	bl	8000100 <__udivsi3>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cf6:	e008      	b.n	8002d0a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	3b01      	subs	r3, #1
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	e001      	b.n	8002d0a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e009      	b.n	8002d1e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d0a:	4b07      	ldr	r3, [pc, #28]	@ (8002d28 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	2380      	movs	r3, #128	@ 0x80
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	401a      	ands	r2, r3
 8002d14:	2380      	movs	r3, #128	@ 0x80
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d0ed      	beq.n	8002cf8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	0018      	movs	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b004      	add	sp, #16
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	40007000 	.word	0x40007000
 8002d2c:	fffff9ff 	.word	0xfffff9ff
 8002d30:	20000030 	.word	0x20000030
 8002d34:	000f4240 	.word	0x000f4240

08002d38 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002d3c:	4b03      	ldr	r3, [pc, #12]	@ (8002d4c <LL_RCC_GetAPB1Prescaler+0x14>)
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	23e0      	movs	r3, #224	@ 0xe0
 8002d42:	01db      	lsls	r3, r3, #7
 8002d44:	4013      	ands	r3, r2
}
 8002d46:	0018      	movs	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40021000 	.word	0x40021000

08002d50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e2f3      	b.n	800334a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2201      	movs	r2, #1
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d100      	bne.n	8002d6e <HAL_RCC_OscConfig+0x1e>
 8002d6c:	e07c      	b.n	8002e68 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d6e:	4bc3      	ldr	r3, [pc, #780]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2238      	movs	r2, #56	@ 0x38
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d78:	4bc0      	ldr	r3, [pc, #768]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	4013      	ands	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	d102      	bne.n	8002d8e <HAL_RCC_OscConfig+0x3e>
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	d002      	beq.n	8002d94 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d10b      	bne.n	8002dac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	4bb9      	ldr	r3, [pc, #740]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	2380      	movs	r3, #128	@ 0x80
 8002d9a:	029b      	lsls	r3, r3, #10
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d062      	beq.n	8002e66 <HAL_RCC_OscConfig+0x116>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d15e      	bne.n	8002e66 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e2ce      	b.n	800334a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	2380      	movs	r3, #128	@ 0x80
 8002db2:	025b      	lsls	r3, r3, #9
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x78>
 8002db8:	4bb0      	ldr	r3, [pc, #704]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4baf      	ldr	r3, [pc, #700]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002dbe:	2180      	movs	r1, #128	@ 0x80
 8002dc0:	0249      	lsls	r1, r1, #9
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	e020      	b.n	8002e0a <HAL_RCC_OscConfig+0xba>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	23a0      	movs	r3, #160	@ 0xa0
 8002dce:	02db      	lsls	r3, r3, #11
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d10e      	bne.n	8002df2 <HAL_RCC_OscConfig+0xa2>
 8002dd4:	4ba9      	ldr	r3, [pc, #676]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4ba8      	ldr	r3, [pc, #672]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002dda:	2180      	movs	r1, #128	@ 0x80
 8002ddc:	02c9      	lsls	r1, r1, #11
 8002dde:	430a      	orrs	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	4ba6      	ldr	r3, [pc, #664]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4ba5      	ldr	r3, [pc, #660]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002de8:	2180      	movs	r1, #128	@ 0x80
 8002dea:	0249      	lsls	r1, r1, #9
 8002dec:	430a      	orrs	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	e00b      	b.n	8002e0a <HAL_RCC_OscConfig+0xba>
 8002df2:	4ba2      	ldr	r3, [pc, #648]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4ba1      	ldr	r3, [pc, #644]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002df8:	49a1      	ldr	r1, [pc, #644]	@ (8003080 <HAL_RCC_OscConfig+0x330>)
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	4b9f      	ldr	r3, [pc, #636]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	4b9e      	ldr	r3, [pc, #632]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002e04:	499f      	ldr	r1, [pc, #636]	@ (8003084 <HAL_RCC_OscConfig+0x334>)
 8002e06:	400a      	ands	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d014      	beq.n	8002e3c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e12:	f7fe fc75 	bl	8001700 <HAL_GetTick>
 8002e16:	0003      	movs	r3, r0
 8002e18:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e1c:	f7fe fc70 	bl	8001700 <HAL_GetTick>
 8002e20:	0002      	movs	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	@ 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e28d      	b.n	800334a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e2e:	4b93      	ldr	r3, [pc, #588]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	2380      	movs	r3, #128	@ 0x80
 8002e34:	029b      	lsls	r3, r3, #10
 8002e36:	4013      	ands	r3, r2
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0xcc>
 8002e3a:	e015      	b.n	8002e68 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fc60 	bl	8001700 <HAL_GetTick>
 8002e40:	0003      	movs	r3, r0
 8002e42:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e46:	f7fe fc5b 	bl	8001700 <HAL_GetTick>
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b64      	cmp	r3, #100	@ 0x64
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e278      	b.n	800334a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e58:	4b88      	ldr	r3, [pc, #544]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	2380      	movs	r3, #128	@ 0x80
 8002e5e:	029b      	lsls	r3, r3, #10
 8002e60:	4013      	ands	r3, r2
 8002e62:	d1f0      	bne.n	8002e46 <HAL_RCC_OscConfig+0xf6>
 8002e64:	e000      	b.n	8002e68 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e66:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d100      	bne.n	8002e74 <HAL_RCC_OscConfig+0x124>
 8002e72:	e099      	b.n	8002fa8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e74:	4b81      	ldr	r3, [pc, #516]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2238      	movs	r2, #56	@ 0x38
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e7e:	4b7f      	ldr	r3, [pc, #508]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	2203      	movs	r2, #3
 8002e84:	4013      	ands	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2b10      	cmp	r3, #16
 8002e8c:	d102      	bne.n	8002e94 <HAL_RCC_OscConfig+0x144>
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d002      	beq.n	8002e9a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d135      	bne.n	8002f06 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e9a:	4b78      	ldr	r3, [pc, #480]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	2380      	movs	r3, #128	@ 0x80
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d005      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x162>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e24b      	b.n	800334a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb2:	4b72      	ldr	r3, [pc, #456]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4a74      	ldr	r2, [pc, #464]	@ (8003088 <HAL_RCC_OscConfig+0x338>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	0019      	movs	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	021a      	lsls	r2, r3, #8
 8002ec2:	4b6e      	ldr	r3, [pc, #440]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d112      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002ece:	4b6b      	ldr	r3, [pc, #428]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a6e      	ldr	r2, [pc, #440]	@ (800308c <HAL_RCC_OscConfig+0x33c>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	4b67      	ldr	r3, [pc, #412]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002ee2:	4b66      	ldr	r3, [pc, #408]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	0adb      	lsrs	r3, r3, #11
 8002ee8:	2207      	movs	r2, #7
 8002eea:	4013      	ands	r3, r2
 8002eec:	4a68      	ldr	r2, [pc, #416]	@ (8003090 <HAL_RCC_OscConfig+0x340>)
 8002eee:	40da      	lsrs	r2, r3
 8002ef0:	4b68      	ldr	r3, [pc, #416]	@ (8003094 <HAL_RCC_OscConfig+0x344>)
 8002ef2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ef4:	4b68      	ldr	r3, [pc, #416]	@ (8003098 <HAL_RCC_OscConfig+0x348>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7fe fba5 	bl	8001648 <HAL_InitTick>
 8002efe:	1e03      	subs	r3, r0, #0
 8002f00:	d051      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e221      	b.n	800334a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d030      	beq.n	8002f70 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a5e      	ldr	r2, [pc, #376]	@ (800308c <HAL_RCC_OscConfig+0x33c>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	0019      	movs	r1, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	4b57      	ldr	r3, [pc, #348]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002f22:	4b56      	ldr	r3, [pc, #344]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	4b55      	ldr	r3, [pc, #340]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002f28:	2180      	movs	r1, #128	@ 0x80
 8002f2a:	0049      	lsls	r1, r1, #1
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fe fbe6 	bl	8001700 <HAL_GetTick>
 8002f34:	0003      	movs	r3, r0
 8002f36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f3a:	f7fe fbe1 	bl	8001700 <HAL_GetTick>
 8002f3e:	0002      	movs	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e1fe      	b.n	800334a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f4c:	4b4b      	ldr	r3, [pc, #300]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	2380      	movs	r3, #128	@ 0x80
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4013      	ands	r3, r2
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f58:	4b48      	ldr	r3, [pc, #288]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4a4a      	ldr	r2, [pc, #296]	@ (8003088 <HAL_RCC_OscConfig+0x338>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	0019      	movs	r1, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	021a      	lsls	r2, r3, #8
 8002f68:	4b44      	ldr	r3, [pc, #272]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	e01b      	b.n	8002fa8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002f70:	4b42      	ldr	r3, [pc, #264]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b41      	ldr	r3, [pc, #260]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002f76:	4949      	ldr	r1, [pc, #292]	@ (800309c <HAL_RCC_OscConfig+0x34c>)
 8002f78:	400a      	ands	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7fe fbc0 	bl	8001700 <HAL_GetTick>
 8002f80:	0003      	movs	r3, r0
 8002f82:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f86:	f7fe fbbb 	bl	8001700 <HAL_GetTick>
 8002f8a:	0002      	movs	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e1d8      	b.n	800334a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f98:	4b38      	ldr	r3, [pc, #224]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	2380      	movs	r3, #128	@ 0x80
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x236>
 8002fa4:	e000      	b.n	8002fa8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fa6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2208      	movs	r2, #8
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d047      	beq.n	8003042 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002fb2:	4b32      	ldr	r3, [pc, #200]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2238      	movs	r2, #56	@ 0x38
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b18      	cmp	r3, #24
 8002fbc:	d10a      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d03c      	beq.n	8003042 <HAL_RCC_OscConfig+0x2f2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d138      	bne.n	8003042 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e1ba      	b.n	800334a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d019      	beq.n	8003010 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002fdc:	4b27      	ldr	r3, [pc, #156]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002fde:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002fe0:	4b26      	ldr	r3, [pc, #152]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fb8a 	bl	8001700 <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff2:	f7fe fb85 	bl	8001700 <HAL_GetTick>
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e1a2      	b.n	800334a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003004:	4b1d      	ldr	r3, [pc, #116]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8003006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003008:	2202      	movs	r2, #2
 800300a:	4013      	ands	r3, r2
 800300c:	d0f1      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x2a2>
 800300e:	e018      	b.n	8003042 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003010:	4b1a      	ldr	r3, [pc, #104]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8003012:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003014:	4b19      	ldr	r3, [pc, #100]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8003016:	2101      	movs	r1, #1
 8003018:	438a      	bics	r2, r1
 800301a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe fb70 	bl	8001700 <HAL_GetTick>
 8003020:	0003      	movs	r3, r0
 8003022:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003026:	f7fe fb6b 	bl	8001700 <HAL_GetTick>
 800302a:	0002      	movs	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e188      	b.n	800334a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003038:	4b10      	ldr	r3, [pc, #64]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 800303a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800303c:	2202      	movs	r2, #2
 800303e:	4013      	ands	r3, r2
 8003040:	d1f1      	bne.n	8003026 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2204      	movs	r2, #4
 8003048:	4013      	ands	r3, r2
 800304a:	d100      	bne.n	800304e <HAL_RCC_OscConfig+0x2fe>
 800304c:	e0c6      	b.n	80031dc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800304e:	231f      	movs	r3, #31
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003056:	4b09      	ldr	r3, [pc, #36]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2238      	movs	r2, #56	@ 0x38
 800305c:	4013      	ands	r3, r2
 800305e:	2b20      	cmp	r3, #32
 8003060:	d11e      	bne.n	80030a0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003062:	4b06      	ldr	r3, [pc, #24]	@ (800307c <HAL_RCC_OscConfig+0x32c>)
 8003064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003066:	2202      	movs	r2, #2
 8003068:	4013      	ands	r3, r2
 800306a:	d100      	bne.n	800306e <HAL_RCC_OscConfig+0x31e>
 800306c:	e0b6      	b.n	80031dc <HAL_RCC_OscConfig+0x48c>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d000      	beq.n	8003078 <HAL_RCC_OscConfig+0x328>
 8003076:	e0b1      	b.n	80031dc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e166      	b.n	800334a <HAL_RCC_OscConfig+0x5fa>
 800307c:	40021000 	.word	0x40021000
 8003080:	fffeffff 	.word	0xfffeffff
 8003084:	fffbffff 	.word	0xfffbffff
 8003088:	ffff80ff 	.word	0xffff80ff
 800308c:	ffffc7ff 	.word	0xffffc7ff
 8003090:	00f42400 	.word	0x00f42400
 8003094:	20000030 	.word	0x20000030
 8003098:	20000034 	.word	0x20000034
 800309c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030a0:	4bac      	ldr	r3, [pc, #688]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 80030a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030a4:	2380      	movs	r3, #128	@ 0x80
 80030a6:	055b      	lsls	r3, r3, #21
 80030a8:	4013      	ands	r3, r2
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_OscConfig+0x360>
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <HAL_RCC_OscConfig+0x362>
 80030b0:	2300      	movs	r3, #0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d011      	beq.n	80030da <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80030b6:	4ba7      	ldr	r3, [pc, #668]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 80030b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030ba:	4ba6      	ldr	r3, [pc, #664]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 80030bc:	2180      	movs	r1, #128	@ 0x80
 80030be:	0549      	lsls	r1, r1, #21
 80030c0:	430a      	orrs	r2, r1
 80030c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030c4:	4ba3      	ldr	r3, [pc, #652]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 80030c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030c8:	2380      	movs	r3, #128	@ 0x80
 80030ca:	055b      	lsls	r3, r3, #21
 80030cc:	4013      	ands	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80030d2:	231f      	movs	r3, #31
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030da:	4b9f      	ldr	r3, [pc, #636]	@ (8003358 <HAL_RCC_OscConfig+0x608>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	2380      	movs	r3, #128	@ 0x80
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4013      	ands	r3, r2
 80030e4:	d11a      	bne.n	800311c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030e6:	4b9c      	ldr	r3, [pc, #624]	@ (8003358 <HAL_RCC_OscConfig+0x608>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4b9b      	ldr	r3, [pc, #620]	@ (8003358 <HAL_RCC_OscConfig+0x608>)
 80030ec:	2180      	movs	r1, #128	@ 0x80
 80030ee:	0049      	lsls	r1, r1, #1
 80030f0:	430a      	orrs	r2, r1
 80030f2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80030f4:	f7fe fb04 	bl	8001700 <HAL_GetTick>
 80030f8:	0003      	movs	r3, r0
 80030fa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030fe:	f7fe faff 	bl	8001700 <HAL_GetTick>
 8003102:	0002      	movs	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e11c      	b.n	800334a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003110:	4b91      	ldr	r3, [pc, #580]	@ (8003358 <HAL_RCC_OscConfig+0x608>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	2380      	movs	r3, #128	@ 0x80
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4013      	ands	r3, r2
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d106      	bne.n	8003132 <HAL_RCC_OscConfig+0x3e2>
 8003124:	4b8b      	ldr	r3, [pc, #556]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 8003126:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003128:	4b8a      	ldr	r3, [pc, #552]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 800312a:	2101      	movs	r1, #1
 800312c:	430a      	orrs	r2, r1
 800312e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003130:	e01c      	b.n	800316c <HAL_RCC_OscConfig+0x41c>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b05      	cmp	r3, #5
 8003138:	d10c      	bne.n	8003154 <HAL_RCC_OscConfig+0x404>
 800313a:	4b86      	ldr	r3, [pc, #536]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 800313c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800313e:	4b85      	ldr	r3, [pc, #532]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 8003140:	2104      	movs	r1, #4
 8003142:	430a      	orrs	r2, r1
 8003144:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003146:	4b83      	ldr	r3, [pc, #524]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 8003148:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800314a:	4b82      	ldr	r3, [pc, #520]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 800314c:	2101      	movs	r1, #1
 800314e:	430a      	orrs	r2, r1
 8003150:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003152:	e00b      	b.n	800316c <HAL_RCC_OscConfig+0x41c>
 8003154:	4b7f      	ldr	r3, [pc, #508]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 8003156:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003158:	4b7e      	ldr	r3, [pc, #504]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 800315a:	2101      	movs	r1, #1
 800315c:	438a      	bics	r2, r1
 800315e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003160:	4b7c      	ldr	r3, [pc, #496]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 8003162:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003164:	4b7b      	ldr	r3, [pc, #492]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 8003166:	2104      	movs	r1, #4
 8003168:	438a      	bics	r2, r1
 800316a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d014      	beq.n	800319e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fe fac4 	bl	8001700 <HAL_GetTick>
 8003178:	0003      	movs	r3, r0
 800317a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800317c:	e009      	b.n	8003192 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7fe fabf 	bl	8001700 <HAL_GetTick>
 8003182:	0002      	movs	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	4a74      	ldr	r2, [pc, #464]	@ (800335c <HAL_RCC_OscConfig+0x60c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e0db      	b.n	800334a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003192:	4b70      	ldr	r3, [pc, #448]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 8003194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003196:	2202      	movs	r2, #2
 8003198:	4013      	ands	r3, r2
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x42e>
 800319c:	e013      	b.n	80031c6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319e:	f7fe faaf 	bl	8001700 <HAL_GetTick>
 80031a2:	0003      	movs	r3, r0
 80031a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031a6:	e009      	b.n	80031bc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a8:	f7fe faaa 	bl	8001700 <HAL_GetTick>
 80031ac:	0002      	movs	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	4a6a      	ldr	r2, [pc, #424]	@ (800335c <HAL_RCC_OscConfig+0x60c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e0c6      	b.n	800334a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031bc:	4b65      	ldr	r3, [pc, #404]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 80031be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c0:	2202      	movs	r2, #2
 80031c2:	4013      	ands	r3, r2
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80031c6:	231f      	movs	r3, #31
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d105      	bne.n	80031dc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80031d0:	4b60      	ldr	r3, [pc, #384]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 80031d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031d4:	4b5f      	ldr	r3, [pc, #380]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 80031d6:	4962      	ldr	r1, [pc, #392]	@ (8003360 <HAL_RCC_OscConfig+0x610>)
 80031d8:	400a      	ands	r2, r1
 80031da:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d100      	bne.n	80031e6 <HAL_RCC_OscConfig+0x496>
 80031e4:	e0b0      	b.n	8003348 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2238      	movs	r2, #56	@ 0x38
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b10      	cmp	r3, #16
 80031f0:	d100      	bne.n	80031f4 <HAL_RCC_OscConfig+0x4a4>
 80031f2:	e078      	b.n	80032e6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d153      	bne.n	80032a4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fc:	4b55      	ldr	r3, [pc, #340]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4b54      	ldr	r3, [pc, #336]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 8003202:	4958      	ldr	r1, [pc, #352]	@ (8003364 <HAL_RCC_OscConfig+0x614>)
 8003204:	400a      	ands	r2, r1
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fe fa7a 	bl	8001700 <HAL_GetTick>
 800320c:	0003      	movs	r3, r0
 800320e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003212:	f7fe fa75 	bl	8001700 <HAL_GetTick>
 8003216:	0002      	movs	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e092      	b.n	800334a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003224:	4b4b      	ldr	r3, [pc, #300]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	2380      	movs	r3, #128	@ 0x80
 800322a:	049b      	lsls	r3, r3, #18
 800322c:	4013      	ands	r3, r2
 800322e:	d1f0      	bne.n	8003212 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003230:	4b48      	ldr	r3, [pc, #288]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4a4c      	ldr	r2, [pc, #304]	@ (8003368 <HAL_RCC_OscConfig+0x618>)
 8003236:	4013      	ands	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1a      	ldr	r2, [r3, #32]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003248:	021b      	lsls	r3, r3, #8
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003256:	431a      	orrs	r2, r3
 8003258:	4b3e      	ldr	r3, [pc, #248]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 800325a:	430a      	orrs	r2, r1
 800325c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325e:	4b3d      	ldr	r3, [pc, #244]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4b3c      	ldr	r3, [pc, #240]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 8003264:	2180      	movs	r1, #128	@ 0x80
 8003266:	0449      	lsls	r1, r1, #17
 8003268:	430a      	orrs	r2, r1
 800326a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800326c:	4b39      	ldr	r3, [pc, #228]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	4b38      	ldr	r3, [pc, #224]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 8003272:	2180      	movs	r1, #128	@ 0x80
 8003274:	0549      	lsls	r1, r1, #21
 8003276:	430a      	orrs	r2, r1
 8003278:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327a:	f7fe fa41 	bl	8001700 <HAL_GetTick>
 800327e:	0003      	movs	r3, r0
 8003280:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003284:	f7fe fa3c 	bl	8001700 <HAL_GetTick>
 8003288:	0002      	movs	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e059      	b.n	800334a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003296:	4b2f      	ldr	r3, [pc, #188]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	2380      	movs	r3, #128	@ 0x80
 800329c:	049b      	lsls	r3, r3, #18
 800329e:	4013      	ands	r3, r2
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0x534>
 80032a2:	e051      	b.n	8003348 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 80032aa:	492e      	ldr	r1, [pc, #184]	@ (8003364 <HAL_RCC_OscConfig+0x614>)
 80032ac:	400a      	ands	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7fe fa26 	bl	8001700 <HAL_GetTick>
 80032b4:	0003      	movs	r3, r0
 80032b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ba:	f7fe fa21 	bl	8001700 <HAL_GetTick>
 80032be:	0002      	movs	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e03e      	b.n	800334a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032cc:	4b21      	ldr	r3, [pc, #132]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	2380      	movs	r3, #128	@ 0x80
 80032d2:	049b      	lsls	r3, r3, #18
 80032d4:	4013      	ands	r3, r2
 80032d6:	d1f0      	bne.n	80032ba <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80032d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 80032de:	4923      	ldr	r1, [pc, #140]	@ (800336c <HAL_RCC_OscConfig+0x61c>)
 80032e0:	400a      	ands	r2, r1
 80032e2:	60da      	str	r2, [r3, #12]
 80032e4:	e030      	b.n	8003348 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e02b      	b.n	800334a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80032f2:	4b18      	ldr	r3, [pc, #96]	@ (8003354 <HAL_RCC_OscConfig+0x604>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2203      	movs	r2, #3
 80032fc:	401a      	ands	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	429a      	cmp	r2, r3
 8003304:	d11e      	bne.n	8003344 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2270      	movs	r2, #112	@ 0x70
 800330a:	401a      	ands	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d117      	bne.n	8003344 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	23fe      	movs	r3, #254	@ 0xfe
 8003318:	01db      	lsls	r3, r3, #7
 800331a:	401a      	ands	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003320:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003322:	429a      	cmp	r2, r3
 8003324:	d10e      	bne.n	8003344 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	23f8      	movs	r3, #248	@ 0xf8
 800332a:	039b      	lsls	r3, r3, #14
 800332c:	401a      	ands	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003332:	429a      	cmp	r2, r3
 8003334:	d106      	bne.n	8003344 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	0f5b      	lsrs	r3, r3, #29
 800333a:	075a      	lsls	r2, r3, #29
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	0018      	movs	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	b008      	add	sp, #32
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			@ (mov r8, r8)
 8003354:	40021000 	.word	0x40021000
 8003358:	40007000 	.word	0x40007000
 800335c:	00001388 	.word	0x00001388
 8003360:	efffffff 	.word	0xefffffff
 8003364:	feffffff 	.word	0xfeffffff
 8003368:	1fc1808c 	.word	0x1fc1808c
 800336c:	effefffc 	.word	0xeffefffc

08003370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0e9      	b.n	8003558 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003384:	4b76      	ldr	r3, [pc, #472]	@ (8003560 <HAL_RCC_ClockConfig+0x1f0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2207      	movs	r2, #7
 800338a:	4013      	ands	r3, r2
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d91e      	bls.n	80033d0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003392:	4b73      	ldr	r3, [pc, #460]	@ (8003560 <HAL_RCC_ClockConfig+0x1f0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2207      	movs	r2, #7
 8003398:	4393      	bics	r3, r2
 800339a:	0019      	movs	r1, r3
 800339c:	4b70      	ldr	r3, [pc, #448]	@ (8003560 <HAL_RCC_ClockConfig+0x1f0>)
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033a4:	f7fe f9ac 	bl	8001700 <HAL_GetTick>
 80033a8:	0003      	movs	r3, r0
 80033aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033ac:	e009      	b.n	80033c2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ae:	f7fe f9a7 	bl	8001700 <HAL_GetTick>
 80033b2:	0002      	movs	r2, r0
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	4a6a      	ldr	r2, [pc, #424]	@ (8003564 <HAL_RCC_ClockConfig+0x1f4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e0ca      	b.n	8003558 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033c2:	4b67      	ldr	r3, [pc, #412]	@ (8003560 <HAL_RCC_ClockConfig+0x1f0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2207      	movs	r2, #7
 80033c8:	4013      	ands	r3, r2
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d1ee      	bne.n	80033ae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2202      	movs	r2, #2
 80033d6:	4013      	ands	r3, r2
 80033d8:	d015      	beq.n	8003406 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2204      	movs	r2, #4
 80033e0:	4013      	ands	r3, r2
 80033e2:	d006      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80033e4:	4b60      	ldr	r3, [pc, #384]	@ (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	4b5f      	ldr	r3, [pc, #380]	@ (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 80033ea:	21e0      	movs	r1, #224	@ 0xe0
 80033ec:	01c9      	lsls	r1, r1, #7
 80033ee:	430a      	orrs	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	4a5d      	ldr	r2, [pc, #372]	@ (800356c <HAL_RCC_ClockConfig+0x1fc>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	0019      	movs	r1, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	4b59      	ldr	r3, [pc, #356]	@ (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 8003402:	430a      	orrs	r2, r1
 8003404:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2201      	movs	r2, #1
 800340c:	4013      	ands	r3, r2
 800340e:	d057      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d107      	bne.n	8003428 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003418:	4b53      	ldr	r3, [pc, #332]	@ (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	2380      	movs	r3, #128	@ 0x80
 800341e:	029b      	lsls	r3, r3, #10
 8003420:	4013      	ands	r3, r2
 8003422:	d12b      	bne.n	800347c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e097      	b.n	8003558 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d107      	bne.n	8003440 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003430:	4b4d      	ldr	r3, [pc, #308]	@ (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	2380      	movs	r3, #128	@ 0x80
 8003436:	049b      	lsls	r3, r3, #18
 8003438:	4013      	ands	r3, r2
 800343a:	d11f      	bne.n	800347c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e08b      	b.n	8003558 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d107      	bne.n	8003458 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003448:	4b47      	ldr	r3, [pc, #284]	@ (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	2380      	movs	r3, #128	@ 0x80
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4013      	ands	r3, r2
 8003452:	d113      	bne.n	800347c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e07f      	b.n	8003558 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b03      	cmp	r3, #3
 800345e:	d106      	bne.n	800346e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003460:	4b41      	ldr	r3, [pc, #260]	@ (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 8003462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003464:	2202      	movs	r2, #2
 8003466:	4013      	ands	r3, r2
 8003468:	d108      	bne.n	800347c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e074      	b.n	8003558 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346e:	4b3e      	ldr	r3, [pc, #248]	@ (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 8003470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003472:	2202      	movs	r2, #2
 8003474:	4013      	ands	r3, r2
 8003476:	d101      	bne.n	800347c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e06d      	b.n	8003558 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800347c:	4b3a      	ldr	r3, [pc, #232]	@ (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2207      	movs	r2, #7
 8003482:	4393      	bics	r3, r2
 8003484:	0019      	movs	r1, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	4b37      	ldr	r3, [pc, #220]	@ (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 800348c:	430a      	orrs	r2, r1
 800348e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003490:	f7fe f936 	bl	8001700 <HAL_GetTick>
 8003494:	0003      	movs	r3, r0
 8003496:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003498:	e009      	b.n	80034ae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800349a:	f7fe f931 	bl	8001700 <HAL_GetTick>
 800349e:	0002      	movs	r2, r0
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	4a2f      	ldr	r2, [pc, #188]	@ (8003564 <HAL_RCC_ClockConfig+0x1f4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e054      	b.n	8003558 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2238      	movs	r2, #56	@ 0x38
 80034b4:	401a      	ands	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	429a      	cmp	r2, r3
 80034be:	d1ec      	bne.n	800349a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034c0:	4b27      	ldr	r3, [pc, #156]	@ (8003560 <HAL_RCC_ClockConfig+0x1f0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2207      	movs	r2, #7
 80034c6:	4013      	ands	r3, r2
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d21e      	bcs.n	800350c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	4b24      	ldr	r3, [pc, #144]	@ (8003560 <HAL_RCC_ClockConfig+0x1f0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2207      	movs	r2, #7
 80034d4:	4393      	bics	r3, r2
 80034d6:	0019      	movs	r1, r3
 80034d8:	4b21      	ldr	r3, [pc, #132]	@ (8003560 <HAL_RCC_ClockConfig+0x1f0>)
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034e0:	f7fe f90e 	bl	8001700 <HAL_GetTick>
 80034e4:	0003      	movs	r3, r0
 80034e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034e8:	e009      	b.n	80034fe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ea:	f7fe f909 	bl	8001700 <HAL_GetTick>
 80034ee:	0002      	movs	r2, r0
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003564 <HAL_RCC_ClockConfig+0x1f4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e02c      	b.n	8003558 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034fe:	4b18      	ldr	r3, [pc, #96]	@ (8003560 <HAL_RCC_ClockConfig+0x1f0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2207      	movs	r2, #7
 8003504:	4013      	ands	r3, r2
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d1ee      	bne.n	80034ea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2204      	movs	r2, #4
 8003512:	4013      	ands	r3, r2
 8003514:	d009      	beq.n	800352a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003516:	4b14      	ldr	r3, [pc, #80]	@ (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	4a15      	ldr	r2, [pc, #84]	@ (8003570 <HAL_RCC_ClockConfig+0x200>)
 800351c:	4013      	ands	r3, r2
 800351e:	0019      	movs	r1, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	4b10      	ldr	r3, [pc, #64]	@ (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 8003526:	430a      	orrs	r2, r1
 8003528:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800352a:	f000 f829 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 800352e:	0001      	movs	r1, r0
 8003530:	4b0d      	ldr	r3, [pc, #52]	@ (8003568 <HAL_RCC_ClockConfig+0x1f8>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	0a1b      	lsrs	r3, r3, #8
 8003536:	220f      	movs	r2, #15
 8003538:	401a      	ands	r2, r3
 800353a:	4b0e      	ldr	r3, [pc, #56]	@ (8003574 <HAL_RCC_ClockConfig+0x204>)
 800353c:	0092      	lsls	r2, r2, #2
 800353e:	58d3      	ldr	r3, [r2, r3]
 8003540:	221f      	movs	r2, #31
 8003542:	4013      	ands	r3, r2
 8003544:	000a      	movs	r2, r1
 8003546:	40da      	lsrs	r2, r3
 8003548:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <HAL_RCC_ClockConfig+0x208>)
 800354a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800354c:	4b0b      	ldr	r3, [pc, #44]	@ (800357c <HAL_RCC_ClockConfig+0x20c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	0018      	movs	r0, r3
 8003552:	f7fe f879 	bl	8001648 <HAL_InitTick>
 8003556:	0003      	movs	r3, r0
}
 8003558:	0018      	movs	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	b004      	add	sp, #16
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40022000 	.word	0x40022000
 8003564:	00001388 	.word	0x00001388
 8003568:	40021000 	.word	0x40021000
 800356c:	fffff0ff 	.word	0xfffff0ff
 8003570:	ffff8fff 	.word	0xffff8fff
 8003574:	08005444 	.word	0x08005444
 8003578:	20000030 	.word	0x20000030
 800357c:	20000034 	.word	0x20000034

08003580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003586:	4b3c      	ldr	r3, [pc, #240]	@ (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2238      	movs	r2, #56	@ 0x38
 800358c:	4013      	ands	r3, r2
 800358e:	d10f      	bne.n	80035b0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003590:	4b39      	ldr	r3, [pc, #228]	@ (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	0adb      	lsrs	r3, r3, #11
 8003596:	2207      	movs	r2, #7
 8003598:	4013      	ands	r3, r2
 800359a:	2201      	movs	r2, #1
 800359c:	409a      	lsls	r2, r3
 800359e:	0013      	movs	r3, r2
 80035a0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80035a2:	6839      	ldr	r1, [r7, #0]
 80035a4:	4835      	ldr	r0, [pc, #212]	@ (800367c <HAL_RCC_GetSysClockFreq+0xfc>)
 80035a6:	f7fc fdab 	bl	8000100 <__udivsi3>
 80035aa:	0003      	movs	r3, r0
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	e05d      	b.n	800366c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035b0:	4b31      	ldr	r3, [pc, #196]	@ (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2238      	movs	r2, #56	@ 0x38
 80035b6:	4013      	ands	r3, r2
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d102      	bne.n	80035c2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035bc:	4b30      	ldr	r3, [pc, #192]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x100>)
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	e054      	b.n	800366c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2238      	movs	r2, #56	@ 0x38
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d138      	bne.n	8003640 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80035ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	2203      	movs	r2, #3
 80035d4:	4013      	ands	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035d8:	4b27      	ldr	r3, [pc, #156]	@ (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	091b      	lsrs	r3, r3, #4
 80035de:	2207      	movs	r2, #7
 80035e0:	4013      	ands	r3, r2
 80035e2:	3301      	adds	r3, #1
 80035e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d10d      	bne.n	8003608 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	4824      	ldr	r0, [pc, #144]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x100>)
 80035f0:	f7fc fd86 	bl	8000100 <__udivsi3>
 80035f4:	0003      	movs	r3, r0
 80035f6:	0019      	movs	r1, r3
 80035f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	0a1b      	lsrs	r3, r3, #8
 80035fe:	227f      	movs	r2, #127	@ 0x7f
 8003600:	4013      	ands	r3, r2
 8003602:	434b      	muls	r3, r1
 8003604:	617b      	str	r3, [r7, #20]
        break;
 8003606:	e00d      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	481c      	ldr	r0, [pc, #112]	@ (800367c <HAL_RCC_GetSysClockFreq+0xfc>)
 800360c:	f7fc fd78 	bl	8000100 <__udivsi3>
 8003610:	0003      	movs	r3, r0
 8003612:	0019      	movs	r1, r3
 8003614:	4b18      	ldr	r3, [pc, #96]	@ (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	0a1b      	lsrs	r3, r3, #8
 800361a:	227f      	movs	r2, #127	@ 0x7f
 800361c:	4013      	ands	r3, r2
 800361e:	434b      	muls	r3, r1
 8003620:	617b      	str	r3, [r7, #20]
        break;
 8003622:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003624:	4b14      	ldr	r3, [pc, #80]	@ (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	0f5b      	lsrs	r3, r3, #29
 800362a:	2207      	movs	r2, #7
 800362c:	4013      	ands	r3, r2
 800362e:	3301      	adds	r3, #1
 8003630:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	6978      	ldr	r0, [r7, #20]
 8003636:	f7fc fd63 	bl	8000100 <__udivsi3>
 800363a:	0003      	movs	r3, r0
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	e015      	b.n	800366c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003640:	4b0d      	ldr	r3, [pc, #52]	@ (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2238      	movs	r2, #56	@ 0x38
 8003646:	4013      	ands	r3, r2
 8003648:	2b20      	cmp	r3, #32
 800364a:	d103      	bne.n	8003654 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800364c:	2380      	movs	r3, #128	@ 0x80
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	e00b      	b.n	800366c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003654:	4b08      	ldr	r3, [pc, #32]	@ (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2238      	movs	r2, #56	@ 0x38
 800365a:	4013      	ands	r3, r2
 800365c:	2b18      	cmp	r3, #24
 800365e:	d103      	bne.n	8003668 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003660:	23fa      	movs	r3, #250	@ 0xfa
 8003662:	01db      	lsls	r3, r3, #7
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	e001      	b.n	800366c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800366c:	693b      	ldr	r3, [r7, #16]
}
 800366e:	0018      	movs	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	b006      	add	sp, #24
 8003674:	bd80      	pop	{r7, pc}
 8003676:	46c0      	nop			@ (mov r8, r8)
 8003678:	40021000 	.word	0x40021000
 800367c:	00f42400 	.word	0x00f42400
 8003680:	007a1200 	.word	0x007a1200

08003684 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003688:	4b02      	ldr	r3, [pc, #8]	@ (8003694 <HAL_RCC_GetHCLKFreq+0x10>)
 800368a:	681b      	ldr	r3, [r3, #0]
}
 800368c:	0018      	movs	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	46c0      	nop			@ (mov r8, r8)
 8003694:	20000030 	.word	0x20000030

08003698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003698:	b5b0      	push	{r4, r5, r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800369c:	f7ff fff2 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036a0:	0004      	movs	r4, r0
 80036a2:	f7ff fb49 	bl	8002d38 <LL_RCC_GetAPB1Prescaler>
 80036a6:	0003      	movs	r3, r0
 80036a8:	0b1a      	lsrs	r2, r3, #12
 80036aa:	4b05      	ldr	r3, [pc, #20]	@ (80036c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036ac:	0092      	lsls	r2, r2, #2
 80036ae:	58d3      	ldr	r3, [r2, r3]
 80036b0:	221f      	movs	r2, #31
 80036b2:	4013      	ands	r3, r2
 80036b4:	40dc      	lsrs	r4, r3
 80036b6:	0023      	movs	r3, r4
}
 80036b8:	0018      	movs	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bdb0      	pop	{r4, r5, r7, pc}
 80036be:	46c0      	nop			@ (mov r8, r8)
 80036c0:	08005484 	.word	0x08005484

080036c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80036cc:	2313      	movs	r3, #19
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036d4:	2312      	movs	r3, #18
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	029b      	lsls	r3, r3, #10
 80036e4:	4013      	ands	r3, r2
 80036e6:	d100      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x26>
 80036e8:	e0a3      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ea:	2011      	movs	r0, #17
 80036ec:	183b      	adds	r3, r7, r0
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f2:	4b7f      	ldr	r3, [pc, #508]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80036f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036f6:	2380      	movs	r3, #128	@ 0x80
 80036f8:	055b      	lsls	r3, r3, #21
 80036fa:	4013      	ands	r3, r2
 80036fc:	d110      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fe:	4b7c      	ldr	r3, [pc, #496]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003700:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003702:	4b7b      	ldr	r3, [pc, #492]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003704:	2180      	movs	r1, #128	@ 0x80
 8003706:	0549      	lsls	r1, r1, #21
 8003708:	430a      	orrs	r2, r1
 800370a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800370c:	4b78      	ldr	r3, [pc, #480]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800370e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003710:	2380      	movs	r3, #128	@ 0x80
 8003712:	055b      	lsls	r3, r3, #21
 8003714:	4013      	ands	r3, r2
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800371a:	183b      	adds	r3, r7, r0
 800371c:	2201      	movs	r2, #1
 800371e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003720:	4b74      	ldr	r3, [pc, #464]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4b73      	ldr	r3, [pc, #460]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003726:	2180      	movs	r1, #128	@ 0x80
 8003728:	0049      	lsls	r1, r1, #1
 800372a:	430a      	orrs	r2, r1
 800372c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800372e:	f7fd ffe7 	bl	8001700 <HAL_GetTick>
 8003732:	0003      	movs	r3, r0
 8003734:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003736:	e00b      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003738:	f7fd ffe2 	bl	8001700 <HAL_GetTick>
 800373c:	0002      	movs	r2, r0
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d904      	bls.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003746:	2313      	movs	r3, #19
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	2203      	movs	r2, #3
 800374c:	701a      	strb	r2, [r3, #0]
        break;
 800374e:	e005      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003750:	4b68      	ldr	r3, [pc, #416]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	2380      	movs	r3, #128	@ 0x80
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	4013      	ands	r3, r2
 800375a:	d0ed      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800375c:	2313      	movs	r3, #19
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d154      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003766:	4b62      	ldr	r3, [pc, #392]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003768:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800376a:	23c0      	movs	r3, #192	@ 0xc0
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4013      	ands	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d019      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	429a      	cmp	r2, r3
 8003780:	d014      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003782:	4b5b      	ldr	r3, [pc, #364]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003786:	4a5c      	ldr	r2, [pc, #368]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003788:	4013      	ands	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800378c:	4b58      	ldr	r3, [pc, #352]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800378e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003790:	4b57      	ldr	r3, [pc, #348]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003792:	2180      	movs	r1, #128	@ 0x80
 8003794:	0249      	lsls	r1, r1, #9
 8003796:	430a      	orrs	r2, r1
 8003798:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800379a:	4b55      	ldr	r3, [pc, #340]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800379c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800379e:	4b54      	ldr	r3, [pc, #336]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037a0:	4956      	ldr	r1, [pc, #344]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80037a2:	400a      	ands	r2, r1
 80037a4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037a6:	4b52      	ldr	r3, [pc, #328]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2201      	movs	r2, #1
 80037b0:	4013      	ands	r3, r2
 80037b2:	d016      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fd ffa4 	bl	8001700 <HAL_GetTick>
 80037b8:	0003      	movs	r3, r0
 80037ba:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037bc:	e00c      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037be:	f7fd ff9f 	bl	8001700 <HAL_GetTick>
 80037c2:	0002      	movs	r2, r0
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	4a4d      	ldr	r2, [pc, #308]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d904      	bls.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80037ce:	2313      	movs	r3, #19
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	2203      	movs	r2, #3
 80037d4:	701a      	strb	r2, [r3, #0]
            break;
 80037d6:	e004      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037d8:	4b45      	ldr	r3, [pc, #276]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037dc:	2202      	movs	r2, #2
 80037de:	4013      	ands	r3, r2
 80037e0:	d0ed      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80037e2:	2313      	movs	r3, #19
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10a      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ec:	4b40      	ldr	r3, [pc, #256]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f0:	4a41      	ldr	r2, [pc, #260]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	0019      	movs	r1, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	4b3d      	ldr	r3, [pc, #244]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037fc:	430a      	orrs	r2, r1
 80037fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003800:	e00c      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003802:	2312      	movs	r3, #18
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	2213      	movs	r2, #19
 8003808:	18ba      	adds	r2, r7, r2
 800380a:	7812      	ldrb	r2, [r2, #0]
 800380c:	701a      	strb	r2, [r3, #0]
 800380e:	e005      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003810:	2312      	movs	r3, #18
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	2213      	movs	r2, #19
 8003816:	18ba      	adds	r2, r7, r2
 8003818:	7812      	ldrb	r2, [r2, #0]
 800381a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800381c:	2311      	movs	r3, #17
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d105      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003826:	4b32      	ldr	r3, [pc, #200]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003828:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800382a:	4b31      	ldr	r3, [pc, #196]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800382c:	4935      	ldr	r1, [pc, #212]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800382e:	400a      	ands	r2, r1
 8003830:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2201      	movs	r2, #1
 8003838:	4013      	ands	r3, r2
 800383a:	d009      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800383c:	4b2c      	ldr	r3, [pc, #176]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800383e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003840:	2203      	movs	r2, #3
 8003842:	4393      	bics	r3, r2
 8003844:	0019      	movs	r1, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	4b29      	ldr	r3, [pc, #164]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800384c:	430a      	orrs	r2, r1
 800384e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2220      	movs	r2, #32
 8003856:	4013      	ands	r3, r2
 8003858:	d009      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800385a:	4b25      	ldr	r3, [pc, #148]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800385c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800385e:	4a2a      	ldr	r2, [pc, #168]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003860:	4013      	ands	r3, r2
 8003862:	0019      	movs	r1, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	4b21      	ldr	r3, [pc, #132]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800386a:	430a      	orrs	r2, r1
 800386c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	2380      	movs	r3, #128	@ 0x80
 8003874:	01db      	lsls	r3, r3, #7
 8003876:	4013      	ands	r3, r2
 8003878:	d015      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800387a:	4b1d      	ldr	r3, [pc, #116]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800387c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	0899      	lsrs	r1, r3, #2
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	4b1a      	ldr	r3, [pc, #104]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003888:	430a      	orrs	r2, r1
 800388a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	2380      	movs	r3, #128	@ 0x80
 8003892:	05db      	lsls	r3, r3, #23
 8003894:	429a      	cmp	r2, r3
 8003896:	d106      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003898:	4b15      	ldr	r3, [pc, #84]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	4b14      	ldr	r3, [pc, #80]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800389e:	2180      	movs	r1, #128	@ 0x80
 80038a0:	0249      	lsls	r1, r1, #9
 80038a2:	430a      	orrs	r2, r1
 80038a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	2380      	movs	r3, #128	@ 0x80
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	4013      	ands	r3, r2
 80038b0:	d016      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80038b2:	4b0f      	ldr	r3, [pc, #60]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b6:	4a15      	ldr	r2, [pc, #84]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	0019      	movs	r1, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	4b0b      	ldr	r3, [pc, #44]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038c2:	430a      	orrs	r2, r1
 80038c4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	2380      	movs	r3, #128	@ 0x80
 80038cc:	01db      	lsls	r3, r3, #7
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d106      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80038d2:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038d8:	2180      	movs	r1, #128	@ 0x80
 80038da:	0249      	lsls	r1, r1, #9
 80038dc:	430a      	orrs	r2, r1
 80038de:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80038e0:	2312      	movs	r3, #18
 80038e2:	18fb      	adds	r3, r7, r3
 80038e4:	781b      	ldrb	r3, [r3, #0]
}
 80038e6:	0018      	movs	r0, r3
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b006      	add	sp, #24
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40007000 	.word	0x40007000
 80038f8:	fffffcff 	.word	0xfffffcff
 80038fc:	fffeffff 	.word	0xfffeffff
 8003900:	00001388 	.word	0x00001388
 8003904:	efffffff 	.word	0xefffffff
 8003908:	ffffcfff 	.word	0xffffcfff
 800390c:	ffff3fff 	.word	0xffff3fff

08003910 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e0a8      	b.n	8003a74 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	2382      	movs	r3, #130	@ 0x82
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	429a      	cmp	r2, r3
 8003934:	d009      	beq.n	800394a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	61da      	str	r2, [r3, #28]
 800393c:	e005      	b.n	800394a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	225d      	movs	r2, #93	@ 0x5d
 8003954:	5c9b      	ldrb	r3, [r3, r2]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d107      	bne.n	800396c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	225c      	movs	r2, #92	@ 0x5c
 8003960:	2100      	movs	r1, #0
 8003962:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	0018      	movs	r0, r3
 8003968:	f7fd fd22 	bl	80013b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	225d      	movs	r2, #93	@ 0x5d
 8003970:	2102      	movs	r1, #2
 8003972:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2140      	movs	r1, #64	@ 0x40
 8003980:	438a      	bics	r2, r1
 8003982:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	23e0      	movs	r3, #224	@ 0xe0
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	429a      	cmp	r2, r3
 800398e:	d902      	bls.n	8003996 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	e002      	b.n	800399c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003996:	2380      	movs	r3, #128	@ 0x80
 8003998:	015b      	lsls	r3, r3, #5
 800399a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	23f0      	movs	r3, #240	@ 0xf0
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d008      	beq.n	80039ba <HAL_SPI_Init+0xaa>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	23e0      	movs	r3, #224	@ 0xe0
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d002      	beq.n	80039ba <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	2382      	movs	r3, #130	@ 0x82
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	401a      	ands	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6899      	ldr	r1, [r3, #8]
 80039c8:	2384      	movs	r3, #132	@ 0x84
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	400b      	ands	r3, r1
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	2102      	movs	r1, #2
 80039d6:	400b      	ands	r3, r1
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	2101      	movs	r1, #1
 80039e0:	400b      	ands	r3, r1
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6999      	ldr	r1, [r3, #24]
 80039e8:	2380      	movs	r3, #128	@ 0x80
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	400b      	ands	r3, r1
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	2138      	movs	r1, #56	@ 0x38
 80039f6:	400b      	ands	r3, r1
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	2180      	movs	r1, #128	@ 0x80
 8003a00:	400b      	ands	r3, r1
 8003a02:	431a      	orrs	r2, r3
 8003a04:	0011      	movs	r1, r2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a0a:	2380      	movs	r3, #128	@ 0x80
 8003a0c:	019b      	lsls	r3, r3, #6
 8003a0e:	401a      	ands	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	0c1b      	lsrs	r3, r3, #16
 8003a1e:	2204      	movs	r2, #4
 8003a20:	401a      	ands	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a26:	2110      	movs	r1, #16
 8003a28:	400b      	ands	r3, r1
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a30:	2108      	movs	r1, #8
 8003a32:	400b      	ands	r3, r1
 8003a34:	431a      	orrs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68d9      	ldr	r1, [r3, #12]
 8003a3a:	23f0      	movs	r3, #240	@ 0xf0
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	400b      	ands	r3, r1
 8003a40:	431a      	orrs	r2, r3
 8003a42:	0011      	movs	r1, r2
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	2380      	movs	r3, #128	@ 0x80
 8003a48:	015b      	lsls	r3, r3, #5
 8003a4a:	401a      	ands	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	69da      	ldr	r2, [r3, #28]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4907      	ldr	r1, [pc, #28]	@ (8003a7c <HAL_SPI_Init+0x16c>)
 8003a60:	400a      	ands	r2, r1
 8003a62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	225d      	movs	r2, #93	@ 0x5d
 8003a6e:	2101      	movs	r1, #1
 8003a70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	0018      	movs	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b004      	add	sp, #16
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	fffff7ff 	.word	0xfffff7ff

08003a80 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	1dbb      	adds	r3, r7, #6
 8003a8e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a90:	231f      	movs	r3, #31
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	225c      	movs	r2, #92	@ 0x5c
 8003a9c:	5c9b      	ldrb	r3, [r3, r2]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d101      	bne.n	8003aa6 <HAL_SPI_Transmit+0x26>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e147      	b.n	8003d36 <HAL_SPI_Transmit+0x2b6>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	225c      	movs	r2, #92	@ 0x5c
 8003aaa:	2101      	movs	r1, #1
 8003aac:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003aae:	f7fd fe27 	bl	8001700 <HAL_GetTick>
 8003ab2:	0003      	movs	r3, r0
 8003ab4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003ab6:	2316      	movs	r3, #22
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	1dba      	adds	r2, r7, #6
 8003abc:	8812      	ldrh	r2, [r2, #0]
 8003abe:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	225d      	movs	r2, #93	@ 0x5d
 8003ac4:	5c9b      	ldrb	r3, [r3, r2]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d004      	beq.n	8003ad6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003acc:	231f      	movs	r3, #31
 8003ace:	18fb      	adds	r3, r7, r3
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ad4:	e128      	b.n	8003d28 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_SPI_Transmit+0x64>
 8003adc:	1dbb      	adds	r3, r7, #6
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d104      	bne.n	8003aee <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003ae4:	231f      	movs	r3, #31
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]
    goto error;
 8003aec:	e11c      	b.n	8003d28 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	225d      	movs	r2, #93	@ 0x5d
 8003af2:	2103      	movs	r1, #3
 8003af4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1dba      	adds	r2, r7, #6
 8003b06:	8812      	ldrh	r2, [r2, #0]
 8003b08:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1dba      	adds	r2, r7, #6
 8003b0e:	8812      	ldrh	r2, [r2, #0]
 8003b10:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2244      	movs	r2, #68	@ 0x44
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2246      	movs	r2, #70	@ 0x46
 8003b24:	2100      	movs	r1, #0
 8003b26:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	2380      	movs	r3, #128	@ 0x80
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d110      	bne.n	8003b62 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2140      	movs	r1, #64	@ 0x40
 8003b4c:	438a      	bics	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2180      	movs	r1, #128	@ 0x80
 8003b5c:	01c9      	lsls	r1, r1, #7
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2240      	movs	r2, #64	@ 0x40
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b40      	cmp	r3, #64	@ 0x40
 8003b6e:	d007      	beq.n	8003b80 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2140      	movs	r1, #64	@ 0x40
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	23e0      	movs	r3, #224	@ 0xe0
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d952      	bls.n	8003c32 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d004      	beq.n	8003b9e <HAL_SPI_Transmit+0x11e>
 8003b94:	2316      	movs	r3, #22
 8003b96:	18fb      	adds	r3, r7, r3
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d143      	bne.n	8003c26 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba2:	881a      	ldrh	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bae:	1c9a      	adds	r2, r3, #2
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bc2:	e030      	b.n	8003c26 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d112      	bne.n	8003bf8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd6:	881a      	ldrh	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be2:	1c9a      	adds	r2, r3, #2
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bf6:	e016      	b.n	8003c26 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bf8:	f7fd fd82 	bl	8001700 <HAL_GetTick>
 8003bfc:	0002      	movs	r2, r0
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d802      	bhi.n	8003c0e <HAL_SPI_Transmit+0x18e>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	d102      	bne.n	8003c14 <HAL_SPI_Transmit+0x194>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d108      	bne.n	8003c26 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003c14:	231f      	movs	r3, #31
 8003c16:	18fb      	adds	r3, r7, r3
 8003c18:	2203      	movs	r2, #3
 8003c1a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	225d      	movs	r2, #93	@ 0x5d
 8003c20:	2101      	movs	r1, #1
 8003c22:	5499      	strb	r1, [r3, r2]
          goto error;
 8003c24:	e080      	b.n	8003d28 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1c9      	bne.n	8003bc4 <HAL_SPI_Transmit+0x144>
 8003c30:	e053      	b.n	8003cda <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d004      	beq.n	8003c44 <HAL_SPI_Transmit+0x1c4>
 8003c3a:	2316      	movs	r3, #22
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d145      	bne.n	8003cd0 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	7812      	ldrb	r2, [r2, #0]
 8003c50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003c6a:	e031      	b.n	8003cd0 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2202      	movs	r2, #2
 8003c74:	4013      	ands	r3, r2
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d113      	bne.n	8003ca2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	330c      	adds	r3, #12
 8003c84:	7812      	ldrb	r2, [r2, #0]
 8003c86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ca0:	e016      	b.n	8003cd0 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ca2:	f7fd fd2d 	bl	8001700 <HAL_GetTick>
 8003ca6:	0002      	movs	r2, r0
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d802      	bhi.n	8003cb8 <HAL_SPI_Transmit+0x238>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	d102      	bne.n	8003cbe <HAL_SPI_Transmit+0x23e>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d108      	bne.n	8003cd0 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8003cbe:	231f      	movs	r3, #31
 8003cc0:	18fb      	adds	r3, r7, r3
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	225d      	movs	r2, #93	@ 0x5d
 8003cca:	2101      	movs	r1, #1
 8003ccc:	5499      	strb	r1, [r3, r2]
          goto error;
 8003cce:	e02b      	b.n	8003d28 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1c8      	bne.n	8003c6c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	6839      	ldr	r1, [r7, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f000 fcef 	bl	80046c4 <SPI_EndRxTxTransaction>
 8003ce6:	1e03      	subs	r3, r0, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10a      	bne.n	8003d0e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	613b      	str	r3, [r7, #16]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d004      	beq.n	8003d20 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8003d16:	231f      	movs	r3, #31
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	701a      	strb	r2, [r3, #0]
 8003d1e:	e003      	b.n	8003d28 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	225d      	movs	r2, #93	@ 0x5d
 8003d24:	2101      	movs	r1, #1
 8003d26:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	225c      	movs	r2, #92	@ 0x5c
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003d30:	231f      	movs	r3, #31
 8003d32:	18fb      	adds	r3, r7, r3
 8003d34:	781b      	ldrb	r3, [r3, #0]
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b008      	add	sp, #32
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d40:	b590      	push	{r4, r7, lr}
 8003d42:	b089      	sub	sp, #36	@ 0x24
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	1dbb      	adds	r3, r7, #6
 8003d4e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d50:	2117      	movs	r1, #23
 8003d52:	187b      	adds	r3, r7, r1
 8003d54:	2200      	movs	r2, #0
 8003d56:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	225d      	movs	r2, #93	@ 0x5d
 8003d5c:	5c9b      	ldrb	r3, [r3, r2]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d003      	beq.n	8003d6c <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8003d64:	187b      	adds	r3, r7, r1
 8003d66:	2202      	movs	r2, #2
 8003d68:	701a      	strb	r2, [r3, #0]
    goto error;
 8003d6a:	e12b      	b.n	8003fc4 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	2382      	movs	r3, #130	@ 0x82
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d113      	bne.n	8003da0 <HAL_SPI_Receive+0x60>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10f      	bne.n	8003da0 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	225d      	movs	r2, #93	@ 0x5d
 8003d84:	2104      	movs	r1, #4
 8003d86:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d88:	1dbb      	adds	r3, r7, #6
 8003d8a:	881c      	ldrh	r4, [r3, #0]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	68b9      	ldr	r1, [r7, #8]
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	0023      	movs	r3, r4
 8003d98:	f000 f924 	bl	8003fe4 <HAL_SPI_TransmitReceive>
 8003d9c:	0003      	movs	r3, r0
 8003d9e:	e118      	b.n	8003fd2 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	225c      	movs	r2, #92	@ 0x5c
 8003da4:	5c9b      	ldrb	r3, [r3, r2]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_SPI_Receive+0x6e>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e111      	b.n	8003fd2 <HAL_SPI_Receive+0x292>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	225c      	movs	r2, #92	@ 0x5c
 8003db2:	2101      	movs	r1, #1
 8003db4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003db6:	f7fd fca3 	bl	8001700 <HAL_GetTick>
 8003dba:	0003      	movs	r3, r0
 8003dbc:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_SPI_Receive+0x8c>
 8003dc4:	1dbb      	adds	r3, r7, #6
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d104      	bne.n	8003dd6 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8003dcc:	2317      	movs	r3, #23
 8003dce:	18fb      	adds	r3, r7, r3
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]
    goto error;
 8003dd4:	e0f6      	b.n	8003fc4 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	225d      	movs	r2, #93	@ 0x5d
 8003dda:	2104      	movs	r1, #4
 8003ddc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1dba      	adds	r2, r7, #6
 8003dee:	2144      	movs	r1, #68	@ 0x44
 8003df0:	8812      	ldrh	r2, [r2, #0]
 8003df2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	1dba      	adds	r2, r7, #6
 8003df8:	2146      	movs	r1, #70	@ 0x46
 8003dfa:	8812      	ldrh	r2, [r2, #0]
 8003dfc:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	23e0      	movs	r3, #224	@ 0xe0
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d908      	bls.n	8003e3a <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	496a      	ldr	r1, [pc, #424]	@ (8003fdc <HAL_SPI_Receive+0x29c>)
 8003e34:	400a      	ands	r2, r1
 8003e36:	605a      	str	r2, [r3, #4]
 8003e38:	e008      	b.n	8003e4c <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2180      	movs	r1, #128	@ 0x80
 8003e46:	0149      	lsls	r1, r1, #5
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	2380      	movs	r3, #128	@ 0x80
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d10f      	bne.n	8003e78 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2140      	movs	r1, #64	@ 0x40
 8003e64:	438a      	bics	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	495b      	ldr	r1, [pc, #364]	@ (8003fe0 <HAL_SPI_Receive+0x2a0>)
 8003e74:	400a      	ands	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2240      	movs	r2, #64	@ 0x40
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b40      	cmp	r3, #64	@ 0x40
 8003e84:	d007      	beq.n	8003e96 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2140      	movs	r1, #64	@ 0x40
 8003e92:	430a      	orrs	r2, r1
 8003e94:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	23e0      	movs	r3, #224	@ 0xe0
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d900      	bls.n	8003ea4 <HAL_SPI_Receive+0x164>
 8003ea2:	e071      	b.n	8003f88 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ea4:	e035      	b.n	8003f12 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2201      	movs	r2, #1
 8003eae:	4013      	ands	r3, r2
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d117      	bne.n	8003ee4 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	330c      	adds	r3, #12
 8003eba:	001a      	movs	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec0:	7812      	ldrb	r2, [r2, #0]
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2246      	movs	r2, #70	@ 0x46
 8003ed4:	5a9b      	ldrh	r3, [r3, r2]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b299      	uxth	r1, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2246      	movs	r2, #70	@ 0x46
 8003ee0:	5299      	strh	r1, [r3, r2]
 8003ee2:	e016      	b.n	8003f12 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ee4:	f7fd fc0c 	bl	8001700 <HAL_GetTick>
 8003ee8:	0002      	movs	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d802      	bhi.n	8003efa <HAL_SPI_Receive+0x1ba>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	d102      	bne.n	8003f00 <HAL_SPI_Receive+0x1c0>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d108      	bne.n	8003f12 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8003f00:	2317      	movs	r3, #23
 8003f02:	18fb      	adds	r3, r7, r3
 8003f04:	2203      	movs	r2, #3
 8003f06:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	225d      	movs	r2, #93	@ 0x5d
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	5499      	strb	r1, [r3, r2]
          goto error;
 8003f10:	e058      	b.n	8003fc4 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2246      	movs	r2, #70	@ 0x46
 8003f16:	5a9b      	ldrh	r3, [r3, r2]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1c3      	bne.n	8003ea6 <HAL_SPI_Receive+0x166>
 8003f1e:	e039      	b.n	8003f94 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2201      	movs	r2, #1
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d115      	bne.n	8003f5a <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f38:	b292      	uxth	r2, r2
 8003f3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f40:	1c9a      	adds	r2, r3, #2
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2246      	movs	r2, #70	@ 0x46
 8003f4a:	5a9b      	ldrh	r3, [r3, r2]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b299      	uxth	r1, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2246      	movs	r2, #70	@ 0x46
 8003f56:	5299      	strh	r1, [r3, r2]
 8003f58:	e016      	b.n	8003f88 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f5a:	f7fd fbd1 	bl	8001700 <HAL_GetTick>
 8003f5e:	0002      	movs	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d802      	bhi.n	8003f70 <HAL_SPI_Receive+0x230>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	d102      	bne.n	8003f76 <HAL_SPI_Receive+0x236>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d108      	bne.n	8003f88 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8003f76:	2317      	movs	r3, #23
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	225d      	movs	r2, #93	@ 0x5d
 8003f82:	2101      	movs	r1, #1
 8003f84:	5499      	strb	r1, [r3, r2]
          goto error;
 8003f86:	e01d      	b.n	8003fc4 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2246      	movs	r2, #70	@ 0x46
 8003f8c:	5a9b      	ldrh	r3, [r3, r2]
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1c5      	bne.n	8003f20 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	6839      	ldr	r1, [r7, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f000 fb34 	bl	8004608 <SPI_EndRxTransaction>
 8003fa0:	1e03      	subs	r3, r0, #0
 8003fa2:	d002      	beq.n	8003faa <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d004      	beq.n	8003fbc <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8003fb2:	2317      	movs	r3, #23
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	e003      	b.n	8003fc4 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	225d      	movs	r2, #93	@ 0x5d
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	225c      	movs	r2, #92	@ 0x5c
 8003fc8:	2100      	movs	r1, #0
 8003fca:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003fcc:	2317      	movs	r3, #23
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	781b      	ldrb	r3, [r3, #0]
}
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	b007      	add	sp, #28
 8003fd8:	bd90      	pop	{r4, r7, pc}
 8003fda:	46c0      	nop			@ (mov r8, r8)
 8003fdc:	ffffefff 	.word	0xffffefff
 8003fe0:	ffffbfff 	.word	0xffffbfff

08003fe4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08a      	sub	sp, #40	@ 0x28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	001a      	movs	r2, r3
 8003ff2:	1cbb      	adds	r3, r7, #2
 8003ff4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ffa:	2323      	movs	r3, #35	@ 0x23
 8003ffc:	18fb      	adds	r3, r7, r3
 8003ffe:	2200      	movs	r2, #0
 8004000:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	225c      	movs	r2, #92	@ 0x5c
 8004006:	5c9b      	ldrb	r3, [r3, r2]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_SPI_TransmitReceive+0x2c>
 800400c:	2302      	movs	r3, #2
 800400e:	e1c4      	b.n	800439a <HAL_SPI_TransmitReceive+0x3b6>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	225c      	movs	r2, #92	@ 0x5c
 8004014:	2101      	movs	r1, #1
 8004016:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004018:	f7fd fb72 	bl	8001700 <HAL_GetTick>
 800401c:	0003      	movs	r3, r0
 800401e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004020:	201b      	movs	r0, #27
 8004022:	183b      	adds	r3, r7, r0
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	215d      	movs	r1, #93	@ 0x5d
 8004028:	5c52      	ldrb	r2, [r2, r1]
 800402a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004032:	2312      	movs	r3, #18
 8004034:	18fb      	adds	r3, r7, r3
 8004036:	1cba      	adds	r2, r7, #2
 8004038:	8812      	ldrh	r2, [r2, #0]
 800403a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800403c:	183b      	adds	r3, r7, r0
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d011      	beq.n	8004068 <HAL_SPI_TransmitReceive+0x84>
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	2382      	movs	r3, #130	@ 0x82
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	429a      	cmp	r2, r3
 800404c:	d107      	bne.n	800405e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d103      	bne.n	800405e <HAL_SPI_TransmitReceive+0x7a>
 8004056:	183b      	adds	r3, r7, r0
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b04      	cmp	r3, #4
 800405c:	d004      	beq.n	8004068 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800405e:	2323      	movs	r3, #35	@ 0x23
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	2202      	movs	r2, #2
 8004064:	701a      	strb	r2, [r3, #0]
    goto error;
 8004066:	e191      	b.n	800438c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d006      	beq.n	800407c <HAL_SPI_TransmitReceive+0x98>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_SPI_TransmitReceive+0x98>
 8004074:	1cbb      	adds	r3, r7, #2
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d104      	bne.n	8004086 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800407c:	2323      	movs	r3, #35	@ 0x23
 800407e:	18fb      	adds	r3, r7, r3
 8004080:	2201      	movs	r2, #1
 8004082:	701a      	strb	r2, [r3, #0]
    goto error;
 8004084:	e182      	b.n	800438c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	225d      	movs	r2, #93	@ 0x5d
 800408a:	5c9b      	ldrb	r3, [r3, r2]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b04      	cmp	r3, #4
 8004090:	d003      	beq.n	800409a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	225d      	movs	r2, #93	@ 0x5d
 8004096:	2105      	movs	r1, #5
 8004098:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1cba      	adds	r2, r7, #2
 80040aa:	2146      	movs	r1, #70	@ 0x46
 80040ac:	8812      	ldrh	r2, [r2, #0]
 80040ae:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	1cba      	adds	r2, r7, #2
 80040b4:	2144      	movs	r1, #68	@ 0x44
 80040b6:	8812      	ldrh	r2, [r2, #0]
 80040b8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	1cba      	adds	r2, r7, #2
 80040c4:	8812      	ldrh	r2, [r2, #0]
 80040c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	1cba      	adds	r2, r7, #2
 80040cc:	8812      	ldrh	r2, [r2, #0]
 80040ce:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	23e0      	movs	r3, #224	@ 0xe0
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d908      	bls.n	80040fa <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	49ac      	ldr	r1, [pc, #688]	@ (80043a4 <HAL_SPI_TransmitReceive+0x3c0>)
 80040f4:	400a      	ands	r2, r1
 80040f6:	605a      	str	r2, [r3, #4]
 80040f8:	e008      	b.n	800410c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2180      	movs	r1, #128	@ 0x80
 8004106:	0149      	lsls	r1, r1, #5
 8004108:	430a      	orrs	r2, r1
 800410a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2240      	movs	r2, #64	@ 0x40
 8004114:	4013      	ands	r3, r2
 8004116:	2b40      	cmp	r3, #64	@ 0x40
 8004118:	d007      	beq.n	800412a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2140      	movs	r1, #64	@ 0x40
 8004126:	430a      	orrs	r2, r1
 8004128:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	23e0      	movs	r3, #224	@ 0xe0
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	429a      	cmp	r2, r3
 8004134:	d800      	bhi.n	8004138 <HAL_SPI_TransmitReceive+0x154>
 8004136:	e083      	b.n	8004240 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_SPI_TransmitReceive+0x168>
 8004140:	2312      	movs	r3, #18
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d000      	beq.n	800414c <HAL_SPI_TransmitReceive+0x168>
 800414a:	e06d      	b.n	8004228 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004150:	881a      	ldrh	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415c:	1c9a      	adds	r2, r3, #2
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004170:	e05a      	b.n	8004228 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2202      	movs	r2, #2
 800417a:	4013      	ands	r3, r2
 800417c:	2b02      	cmp	r3, #2
 800417e:	d11b      	bne.n	80041b8 <HAL_SPI_TransmitReceive+0x1d4>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d016      	beq.n	80041b8 <HAL_SPI_TransmitReceive+0x1d4>
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	2b01      	cmp	r3, #1
 800418e:	d113      	bne.n	80041b8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004194:	881a      	ldrh	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a0:	1c9a      	adds	r2, r3, #2
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2201      	movs	r2, #1
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d11c      	bne.n	8004200 <HAL_SPI_TransmitReceive+0x21c>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2246      	movs	r2, #70	@ 0x46
 80041ca:	5a9b      	ldrh	r3, [r3, r2]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d016      	beq.n	8004200 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	b292      	uxth	r2, r2
 80041de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e4:	1c9a      	adds	r2, r3, #2
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2246      	movs	r2, #70	@ 0x46
 80041ee:	5a9b      	ldrh	r3, [r3, r2]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b299      	uxth	r1, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2246      	movs	r2, #70	@ 0x46
 80041fa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041fc:	2301      	movs	r3, #1
 80041fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004200:	f7fd fa7e 	bl	8001700 <HAL_GetTick>
 8004204:	0002      	movs	r2, r0
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800420c:	429a      	cmp	r2, r3
 800420e:	d80b      	bhi.n	8004228 <HAL_SPI_TransmitReceive+0x244>
 8004210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004212:	3301      	adds	r3, #1
 8004214:	d008      	beq.n	8004228 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8004216:	2323      	movs	r3, #35	@ 0x23
 8004218:	18fb      	adds	r3, r7, r3
 800421a:	2203      	movs	r2, #3
 800421c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	225d      	movs	r2, #93	@ 0x5d
 8004222:	2101      	movs	r1, #1
 8004224:	5499      	strb	r1, [r3, r2]
        goto error;
 8004226:	e0b1      	b.n	800438c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d19f      	bne.n	8004172 <HAL_SPI_TransmitReceive+0x18e>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2246      	movs	r2, #70	@ 0x46
 8004236:	5a9b      	ldrh	r3, [r3, r2]
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d199      	bne.n	8004172 <HAL_SPI_TransmitReceive+0x18e>
 800423e:	e089      	b.n	8004354 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_SPI_TransmitReceive+0x270>
 8004248:	2312      	movs	r3, #18
 800424a:	18fb      	adds	r3, r7, r3
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d000      	beq.n	8004254 <HAL_SPI_TransmitReceive+0x270>
 8004252:	e074      	b.n	800433e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	7812      	ldrb	r2, [r2, #0]
 8004260:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800427a:	e060      	b.n	800433e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2202      	movs	r2, #2
 8004284:	4013      	ands	r3, r2
 8004286:	2b02      	cmp	r3, #2
 8004288:	d11c      	bne.n	80042c4 <HAL_SPI_TransmitReceive+0x2e0>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d017      	beq.n	80042c4 <HAL_SPI_TransmitReceive+0x2e0>
 8004294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004296:	2b01      	cmp	r3, #1
 8004298:	d114      	bne.n	80042c4 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	330c      	adds	r3, #12
 80042a4:	7812      	ldrb	r2, [r2, #0]
 80042a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2201      	movs	r2, #1
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d11e      	bne.n	8004310 <HAL_SPI_TransmitReceive+0x32c>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2246      	movs	r2, #70	@ 0x46
 80042d6:	5a9b      	ldrh	r3, [r3, r2]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d018      	beq.n	8004310 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	330c      	adds	r3, #12
 80042e4:	001a      	movs	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	7812      	ldrb	r2, [r2, #0]
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2246      	movs	r2, #70	@ 0x46
 80042fe:	5a9b      	ldrh	r3, [r3, r2]
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b299      	uxth	r1, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2246      	movs	r2, #70	@ 0x46
 800430a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800430c:	2301      	movs	r3, #1
 800430e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004310:	f7fd f9f6 	bl	8001700 <HAL_GetTick>
 8004314:	0002      	movs	r2, r0
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800431c:	429a      	cmp	r2, r3
 800431e:	d802      	bhi.n	8004326 <HAL_SPI_TransmitReceive+0x342>
 8004320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004322:	3301      	adds	r3, #1
 8004324:	d102      	bne.n	800432c <HAL_SPI_TransmitReceive+0x348>
 8004326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004328:	2b00      	cmp	r3, #0
 800432a:	d108      	bne.n	800433e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800432c:	2323      	movs	r3, #35	@ 0x23
 800432e:	18fb      	adds	r3, r7, r3
 8004330:	2203      	movs	r2, #3
 8004332:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	225d      	movs	r2, #93	@ 0x5d
 8004338:	2101      	movs	r1, #1
 800433a:	5499      	strb	r1, [r3, r2]
        goto error;
 800433c:	e026      	b.n	800438c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004342:	b29b      	uxth	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d199      	bne.n	800427c <HAL_SPI_TransmitReceive+0x298>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2246      	movs	r2, #70	@ 0x46
 800434c:	5a9b      	ldrh	r3, [r3, r2]
 800434e:	b29b      	uxth	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d193      	bne.n	800427c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	0018      	movs	r0, r3
 800435c:	f000 f9b2 	bl	80046c4 <SPI_EndRxTxTransaction>
 8004360:	1e03      	subs	r3, r0, #0
 8004362:	d006      	beq.n	8004372 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8004364:	2323      	movs	r3, #35	@ 0x23
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	2201      	movs	r2, #1
 800436a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004376:	2b00      	cmp	r3, #0
 8004378:	d004      	beq.n	8004384 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800437a:	2323      	movs	r3, #35	@ 0x23
 800437c:	18fb      	adds	r3, r7, r3
 800437e:	2201      	movs	r2, #1
 8004380:	701a      	strb	r2, [r3, #0]
 8004382:	e003      	b.n	800438c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	225d      	movs	r2, #93	@ 0x5d
 8004388:	2101      	movs	r1, #1
 800438a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	225c      	movs	r2, #92	@ 0x5c
 8004390:	2100      	movs	r1, #0
 8004392:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004394:	2323      	movs	r3, #35	@ 0x23
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	781b      	ldrb	r3, [r3, #0]
}
 800439a:	0018      	movs	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	b00a      	add	sp, #40	@ 0x28
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	46c0      	nop			@ (mov r8, r8)
 80043a4:	ffffefff 	.word	0xffffefff

080043a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	1dfb      	adds	r3, r7, #7
 80043b6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043b8:	f7fd f9a2 	bl	8001700 <HAL_GetTick>
 80043bc:	0002      	movs	r2, r0
 80043be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	18d3      	adds	r3, r2, r3
 80043c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043c8:	f7fd f99a 	bl	8001700 <HAL_GetTick>
 80043cc:	0003      	movs	r3, r0
 80043ce:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043d0:	4b3a      	ldr	r3, [pc, #232]	@ (80044bc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	015b      	lsls	r3, r3, #5
 80043d6:	0d1b      	lsrs	r3, r3, #20
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	4353      	muls	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043de:	e058      	b.n	8004492 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	3301      	adds	r3, #1
 80043e4:	d055      	beq.n	8004492 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043e6:	f7fd f98b 	bl	8001700 <HAL_GetTick>
 80043ea:	0002      	movs	r2, r0
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d902      	bls.n	80043fc <SPI_WaitFlagStateUntilTimeout+0x54>
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d142      	bne.n	8004482 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	21e0      	movs	r1, #224	@ 0xe0
 8004408:	438a      	bics	r2, r1
 800440a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	2382      	movs	r3, #130	@ 0x82
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	429a      	cmp	r2, r3
 8004416:	d113      	bne.n	8004440 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	2380      	movs	r3, #128	@ 0x80
 800441e:	021b      	lsls	r3, r3, #8
 8004420:	429a      	cmp	r2, r3
 8004422:	d005      	beq.n	8004430 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	2380      	movs	r3, #128	@ 0x80
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	429a      	cmp	r2, r3
 800442e:	d107      	bne.n	8004440 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2140      	movs	r1, #64	@ 0x40
 800443c:	438a      	bics	r2, r1
 800443e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004444:	2380      	movs	r3, #128	@ 0x80
 8004446:	019b      	lsls	r3, r3, #6
 8004448:	429a      	cmp	r2, r3
 800444a:	d110      	bne.n	800446e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	491a      	ldr	r1, [pc, #104]	@ (80044c0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004458:	400a      	ands	r2, r1
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2180      	movs	r1, #128	@ 0x80
 8004468:	0189      	lsls	r1, r1, #6
 800446a:	430a      	orrs	r2, r1
 800446c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	225d      	movs	r2, #93	@ 0x5d
 8004472:	2101      	movs	r1, #1
 8004474:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	225c      	movs	r2, #92	@ 0x5c
 800447a:	2100      	movs	r1, #0
 800447c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e017      	b.n	80044b2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	3b01      	subs	r3, #1
 8004490:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	4013      	ands	r3, r2
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	425a      	negs	r2, r3
 80044a2:	4153      	adcs	r3, r2
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	001a      	movs	r2, r3
 80044a8:	1dfb      	adds	r3, r7, #7
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d197      	bne.n	80043e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	0018      	movs	r0, r3
 80044b4:	46bd      	mov	sp, r7
 80044b6:	b008      	add	sp, #32
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	46c0      	nop			@ (mov r8, r8)
 80044bc:	20000030 	.word	0x20000030
 80044c0:	ffffdfff 	.word	0xffffdfff

080044c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08a      	sub	sp, #40	@ 0x28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80044d2:	2317      	movs	r3, #23
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	2200      	movs	r2, #0
 80044d8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80044da:	f7fd f911 	bl	8001700 <HAL_GetTick>
 80044de:	0002      	movs	r2, r0
 80044e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	18d3      	adds	r3, r2, r3
 80044e8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80044ea:	f7fd f909 	bl	8001700 <HAL_GetTick>
 80044ee:	0003      	movs	r3, r0
 80044f0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	330c      	adds	r3, #12
 80044f8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80044fa:	4b41      	ldr	r3, [pc, #260]	@ (8004600 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	0013      	movs	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	189b      	adds	r3, r3, r2
 8004504:	00da      	lsls	r2, r3, #3
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	0d1b      	lsrs	r3, r3, #20
 800450a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800450c:	4353      	muls	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004510:	e068      	b.n	80045e4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	23c0      	movs	r3, #192	@ 0xc0
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	429a      	cmp	r2, r3
 800451a:	d10a      	bne.n	8004532 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d107      	bne.n	8004532 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	b2da      	uxtb	r2, r3
 8004528:	2117      	movs	r1, #23
 800452a:	187b      	adds	r3, r7, r1
 800452c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800452e:	187b      	adds	r3, r7, r1
 8004530:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	3301      	adds	r3, #1
 8004536:	d055      	beq.n	80045e4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004538:	f7fd f8e2 	bl	8001700 <HAL_GetTick>
 800453c:	0002      	movs	r2, r0
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004544:	429a      	cmp	r2, r3
 8004546:	d902      	bls.n	800454e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454a:	2b00      	cmp	r3, #0
 800454c:	d142      	bne.n	80045d4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	21e0      	movs	r1, #224	@ 0xe0
 800455a:	438a      	bics	r2, r1
 800455c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	2382      	movs	r3, #130	@ 0x82
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	429a      	cmp	r2, r3
 8004568:	d113      	bne.n	8004592 <SPI_WaitFifoStateUntilTimeout+0xce>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	2380      	movs	r3, #128	@ 0x80
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	429a      	cmp	r2, r3
 8004574:	d005      	beq.n	8004582 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	2380      	movs	r3, #128	@ 0x80
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	429a      	cmp	r2, r3
 8004580:	d107      	bne.n	8004592 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2140      	movs	r1, #64	@ 0x40
 800458e:	438a      	bics	r2, r1
 8004590:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004596:	2380      	movs	r3, #128	@ 0x80
 8004598:	019b      	lsls	r3, r3, #6
 800459a:	429a      	cmp	r2, r3
 800459c:	d110      	bne.n	80045c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4916      	ldr	r1, [pc, #88]	@ (8004604 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80045aa:	400a      	ands	r2, r1
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2180      	movs	r1, #128	@ 0x80
 80045ba:	0189      	lsls	r1, r1, #6
 80045bc:	430a      	orrs	r2, r1
 80045be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	225d      	movs	r2, #93	@ 0x5d
 80045c4:	2101      	movs	r1, #1
 80045c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	225c      	movs	r2, #92	@ 0x5c
 80045cc:	2100      	movs	r1, #0
 80045ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e010      	b.n	80045f6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	4013      	ands	r3, r2
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d18e      	bne.n	8004512 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	0018      	movs	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b00a      	add	sp, #40	@ 0x28
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	46c0      	nop			@ (mov r8, r8)
 8004600:	20000030 	.word	0x20000030
 8004604:	ffffdfff 	.word	0xffffdfff

08004608 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	2382      	movs	r3, #130	@ 0x82
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	429a      	cmp	r2, r3
 800461e:	d113      	bne.n	8004648 <SPI_EndRxTransaction+0x40>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	2380      	movs	r3, #128	@ 0x80
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	429a      	cmp	r2, r3
 800462a:	d005      	beq.n	8004638 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	2380      	movs	r3, #128	@ 0x80
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	429a      	cmp	r2, r3
 8004636:	d107      	bne.n	8004648 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2140      	movs	r1, #64	@ 0x40
 8004644:	438a      	bics	r2, r1
 8004646:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	0013      	movs	r3, r2
 8004652:	2200      	movs	r2, #0
 8004654:	2180      	movs	r1, #128	@ 0x80
 8004656:	f7ff fea7 	bl	80043a8 <SPI_WaitFlagStateUntilTimeout>
 800465a:	1e03      	subs	r3, r0, #0
 800465c:	d007      	beq.n	800466e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004662:	2220      	movs	r2, #32
 8004664:	431a      	orrs	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e026      	b.n	80046bc <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	2382      	movs	r3, #130	@ 0x82
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	429a      	cmp	r2, r3
 8004678:	d11f      	bne.n	80046ba <SPI_EndRxTransaction+0xb2>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	2380      	movs	r3, #128	@ 0x80
 8004680:	021b      	lsls	r3, r3, #8
 8004682:	429a      	cmp	r2, r3
 8004684:	d005      	beq.n	8004692 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	2380      	movs	r3, #128	@ 0x80
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	429a      	cmp	r2, r3
 8004690:	d113      	bne.n	80046ba <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	23c0      	movs	r3, #192	@ 0xc0
 8004696:	00d9      	lsls	r1, r3, #3
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	0013      	movs	r3, r2
 80046a0:	2200      	movs	r2, #0
 80046a2:	f7ff ff0f 	bl	80044c4 <SPI_WaitFifoStateUntilTimeout>
 80046a6:	1e03      	subs	r3, r0, #0
 80046a8:	d007      	beq.n	80046ba <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ae:	2220      	movs	r2, #32
 80046b0:	431a      	orrs	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e000      	b.n	80046bc <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	0018      	movs	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	b004      	add	sp, #16
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	23c0      	movs	r3, #192	@ 0xc0
 80046d4:	0159      	lsls	r1, r3, #5
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	0013      	movs	r3, r2
 80046de:	2200      	movs	r2, #0
 80046e0:	f7ff fef0 	bl	80044c4 <SPI_WaitFifoStateUntilTimeout>
 80046e4:	1e03      	subs	r3, r0, #0
 80046e6:	d007      	beq.n	80046f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ec:	2220      	movs	r2, #32
 80046ee:	431a      	orrs	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e027      	b.n	8004748 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	0013      	movs	r3, r2
 8004702:	2200      	movs	r2, #0
 8004704:	2180      	movs	r1, #128	@ 0x80
 8004706:	f7ff fe4f 	bl	80043a8 <SPI_WaitFlagStateUntilTimeout>
 800470a:	1e03      	subs	r3, r0, #0
 800470c:	d007      	beq.n	800471e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004712:	2220      	movs	r2, #32
 8004714:	431a      	orrs	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e014      	b.n	8004748 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	23c0      	movs	r3, #192	@ 0xc0
 8004722:	00d9      	lsls	r1, r3, #3
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	0013      	movs	r3, r2
 800472c:	2200      	movs	r2, #0
 800472e:	f7ff fec9 	bl	80044c4 <SPI_WaitFifoStateUntilTimeout>
 8004732:	1e03      	subs	r3, r0, #0
 8004734:	d007      	beq.n	8004746 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800473a:	2220      	movs	r2, #32
 800473c:	431a      	orrs	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e000      	b.n	8004748 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	0018      	movs	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	b004      	add	sp, #16
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e046      	b.n	80047f0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2288      	movs	r2, #136	@ 0x88
 8004766:	589b      	ldr	r3, [r3, r2]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d107      	bne.n	800477c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2284      	movs	r2, #132	@ 0x84
 8004770:	2100      	movs	r1, #0
 8004772:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	0018      	movs	r0, r3
 8004778:	f7fc fe64 	bl	8001444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2288      	movs	r2, #136	@ 0x88
 8004780:	2124      	movs	r1, #36	@ 0x24
 8004782:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2101      	movs	r1, #1
 8004790:	438a      	bics	r2, r1
 8004792:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	0018      	movs	r0, r3
 80047a0:	f000 f996 	bl	8004ad0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	0018      	movs	r0, r3
 80047a8:	f000 f828 	bl	80047fc <UART_SetConfig>
 80047ac:	0003      	movs	r3, r0
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e01c      	b.n	80047f0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	490d      	ldr	r1, [pc, #52]	@ (80047f8 <HAL_UART_Init+0xa8>)
 80047c2:	400a      	ands	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	212a      	movs	r1, #42	@ 0x2a
 80047d2:	438a      	bics	r2, r1
 80047d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2101      	movs	r1, #1
 80047e2:	430a      	orrs	r2, r1
 80047e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	0018      	movs	r0, r3
 80047ea:	f000 fa25 	bl	8004c38 <UART_CheckIdleState>
 80047ee:	0003      	movs	r3, r0
}
 80047f0:	0018      	movs	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b002      	add	sp, #8
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	ffffb7ff 	.word	0xffffb7ff

080047fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004804:	231a      	movs	r3, #26
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	2200      	movs	r2, #0
 800480a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	4313      	orrs	r3, r2
 8004822:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4aa1      	ldr	r2, [pc, #644]	@ (8004ab0 <UART_SetConfig+0x2b4>)
 800482c:	4013      	ands	r3, r2
 800482e:	0019      	movs	r1, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69fa      	ldr	r2, [r7, #28]
 8004836:	430a      	orrs	r2, r1
 8004838:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	4a9c      	ldr	r2, [pc, #624]	@ (8004ab4 <UART_SetConfig+0x2b8>)
 8004842:	4013      	ands	r3, r2
 8004844:	0019      	movs	r1, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	4313      	orrs	r3, r2
 8004860:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	4a93      	ldr	r2, [pc, #588]	@ (8004ab8 <UART_SetConfig+0x2bc>)
 800486a:	4013      	ands	r3, r2
 800486c:	0019      	movs	r1, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69fa      	ldr	r2, [r7, #28]
 8004874:	430a      	orrs	r2, r1
 8004876:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487e:	220f      	movs	r2, #15
 8004880:	4393      	bics	r3, r2
 8004882:	0019      	movs	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a89      	ldr	r2, [pc, #548]	@ (8004abc <UART_SetConfig+0x2c0>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d127      	bne.n	80048ea <UART_SetConfig+0xee>
 800489a:	4b89      	ldr	r3, [pc, #548]	@ (8004ac0 <UART_SetConfig+0x2c4>)
 800489c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800489e:	2203      	movs	r2, #3
 80048a0:	4013      	ands	r3, r2
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d017      	beq.n	80048d6 <UART_SetConfig+0xda>
 80048a6:	d81b      	bhi.n	80048e0 <UART_SetConfig+0xe4>
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d00a      	beq.n	80048c2 <UART_SetConfig+0xc6>
 80048ac:	d818      	bhi.n	80048e0 <UART_SetConfig+0xe4>
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <UART_SetConfig+0xbc>
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d00a      	beq.n	80048cc <UART_SetConfig+0xd0>
 80048b6:	e013      	b.n	80048e0 <UART_SetConfig+0xe4>
 80048b8:	231b      	movs	r3, #27
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]
 80048c0:	e021      	b.n	8004906 <UART_SetConfig+0x10a>
 80048c2:	231b      	movs	r3, #27
 80048c4:	18fb      	adds	r3, r7, r3
 80048c6:	2202      	movs	r2, #2
 80048c8:	701a      	strb	r2, [r3, #0]
 80048ca:	e01c      	b.n	8004906 <UART_SetConfig+0x10a>
 80048cc:	231b      	movs	r3, #27
 80048ce:	18fb      	adds	r3, r7, r3
 80048d0:	2204      	movs	r2, #4
 80048d2:	701a      	strb	r2, [r3, #0]
 80048d4:	e017      	b.n	8004906 <UART_SetConfig+0x10a>
 80048d6:	231b      	movs	r3, #27
 80048d8:	18fb      	adds	r3, r7, r3
 80048da:	2208      	movs	r2, #8
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	e012      	b.n	8004906 <UART_SetConfig+0x10a>
 80048e0:	231b      	movs	r3, #27
 80048e2:	18fb      	adds	r3, r7, r3
 80048e4:	2210      	movs	r2, #16
 80048e6:	701a      	strb	r2, [r3, #0]
 80048e8:	e00d      	b.n	8004906 <UART_SetConfig+0x10a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a75      	ldr	r2, [pc, #468]	@ (8004ac4 <UART_SetConfig+0x2c8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d104      	bne.n	80048fe <UART_SetConfig+0x102>
 80048f4:	231b      	movs	r3, #27
 80048f6:	18fb      	adds	r3, r7, r3
 80048f8:	2200      	movs	r2, #0
 80048fa:	701a      	strb	r2, [r3, #0]
 80048fc:	e003      	b.n	8004906 <UART_SetConfig+0x10a>
 80048fe:	231b      	movs	r3, #27
 8004900:	18fb      	adds	r3, r7, r3
 8004902:	2210      	movs	r2, #16
 8004904:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69da      	ldr	r2, [r3, #28]
 800490a:	2380      	movs	r3, #128	@ 0x80
 800490c:	021b      	lsls	r3, r3, #8
 800490e:	429a      	cmp	r2, r3
 8004910:	d000      	beq.n	8004914 <UART_SetConfig+0x118>
 8004912:	e065      	b.n	80049e0 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8004914:	231b      	movs	r3, #27
 8004916:	18fb      	adds	r3, r7, r3
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	2b08      	cmp	r3, #8
 800491c:	d015      	beq.n	800494a <UART_SetConfig+0x14e>
 800491e:	dc18      	bgt.n	8004952 <UART_SetConfig+0x156>
 8004920:	2b04      	cmp	r3, #4
 8004922:	d00d      	beq.n	8004940 <UART_SetConfig+0x144>
 8004924:	dc15      	bgt.n	8004952 <UART_SetConfig+0x156>
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <UART_SetConfig+0x134>
 800492a:	2b02      	cmp	r3, #2
 800492c:	d005      	beq.n	800493a <UART_SetConfig+0x13e>
 800492e:	e010      	b.n	8004952 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004930:	f7fe feb2 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8004934:	0003      	movs	r3, r0
 8004936:	617b      	str	r3, [r7, #20]
        break;
 8004938:	e012      	b.n	8004960 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800493a:	4b63      	ldr	r3, [pc, #396]	@ (8004ac8 <UART_SetConfig+0x2cc>)
 800493c:	617b      	str	r3, [r7, #20]
        break;
 800493e:	e00f      	b.n	8004960 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004940:	f7fe fe1e 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 8004944:	0003      	movs	r3, r0
 8004946:	617b      	str	r3, [r7, #20]
        break;
 8004948:	e00a      	b.n	8004960 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800494a:	2380      	movs	r3, #128	@ 0x80
 800494c:	021b      	lsls	r3, r3, #8
 800494e:	617b      	str	r3, [r7, #20]
        break;
 8004950:	e006      	b.n	8004960 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004956:	231a      	movs	r3, #26
 8004958:	18fb      	adds	r3, r7, r3
 800495a:	2201      	movs	r2, #1
 800495c:	701a      	strb	r2, [r3, #0]
        break;
 800495e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d100      	bne.n	8004968 <UART_SetConfig+0x16c>
 8004966:	e08d      	b.n	8004a84 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800496c:	4b57      	ldr	r3, [pc, #348]	@ (8004acc <UART_SetConfig+0x2d0>)
 800496e:	0052      	lsls	r2, r2, #1
 8004970:	5ad3      	ldrh	r3, [r2, r3]
 8004972:	0019      	movs	r1, r3
 8004974:	6978      	ldr	r0, [r7, #20]
 8004976:	f7fb fbc3 	bl	8000100 <__udivsi3>
 800497a:	0003      	movs	r3, r0
 800497c:	005a      	lsls	r2, r3, #1
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	085b      	lsrs	r3, r3, #1
 8004984:	18d2      	adds	r2, r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	0019      	movs	r1, r3
 800498c:	0010      	movs	r0, r2
 800498e:	f7fb fbb7 	bl	8000100 <__udivsi3>
 8004992:	0003      	movs	r3, r0
 8004994:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	2b0f      	cmp	r3, #15
 800499a:	d91c      	bls.n	80049d6 <UART_SetConfig+0x1da>
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	2380      	movs	r3, #128	@ 0x80
 80049a0:	025b      	lsls	r3, r3, #9
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d217      	bcs.n	80049d6 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	200e      	movs	r0, #14
 80049ac:	183b      	adds	r3, r7, r0
 80049ae:	210f      	movs	r1, #15
 80049b0:	438a      	bics	r2, r1
 80049b2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	085b      	lsrs	r3, r3, #1
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2207      	movs	r2, #7
 80049bc:	4013      	ands	r3, r2
 80049be:	b299      	uxth	r1, r3
 80049c0:	183b      	adds	r3, r7, r0
 80049c2:	183a      	adds	r2, r7, r0
 80049c4:	8812      	ldrh	r2, [r2, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	183a      	adds	r2, r7, r0
 80049d0:	8812      	ldrh	r2, [r2, #0]
 80049d2:	60da      	str	r2, [r3, #12]
 80049d4:	e056      	b.n	8004a84 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80049d6:	231a      	movs	r3, #26
 80049d8:	18fb      	adds	r3, r7, r3
 80049da:	2201      	movs	r2, #1
 80049dc:	701a      	strb	r2, [r3, #0]
 80049de:	e051      	b.n	8004a84 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049e0:	231b      	movs	r3, #27
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d015      	beq.n	8004a16 <UART_SetConfig+0x21a>
 80049ea:	dc18      	bgt.n	8004a1e <UART_SetConfig+0x222>
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d00d      	beq.n	8004a0c <UART_SetConfig+0x210>
 80049f0:	dc15      	bgt.n	8004a1e <UART_SetConfig+0x222>
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <UART_SetConfig+0x200>
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d005      	beq.n	8004a06 <UART_SetConfig+0x20a>
 80049fa:	e010      	b.n	8004a1e <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049fc:	f7fe fe4c 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8004a00:	0003      	movs	r3, r0
 8004a02:	617b      	str	r3, [r7, #20]
        break;
 8004a04:	e012      	b.n	8004a2c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a06:	4b30      	ldr	r3, [pc, #192]	@ (8004ac8 <UART_SetConfig+0x2cc>)
 8004a08:	617b      	str	r3, [r7, #20]
        break;
 8004a0a:	e00f      	b.n	8004a2c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a0c:	f7fe fdb8 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 8004a10:	0003      	movs	r3, r0
 8004a12:	617b      	str	r3, [r7, #20]
        break;
 8004a14:	e00a      	b.n	8004a2c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a16:	2380      	movs	r3, #128	@ 0x80
 8004a18:	021b      	lsls	r3, r3, #8
 8004a1a:	617b      	str	r3, [r7, #20]
        break;
 8004a1c:	e006      	b.n	8004a2c <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a22:	231a      	movs	r3, #26
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]
        break;
 8004a2a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d028      	beq.n	8004a84 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a36:	4b25      	ldr	r3, [pc, #148]	@ (8004acc <UART_SetConfig+0x2d0>)
 8004a38:	0052      	lsls	r2, r2, #1
 8004a3a:	5ad3      	ldrh	r3, [r2, r3]
 8004a3c:	0019      	movs	r1, r3
 8004a3e:	6978      	ldr	r0, [r7, #20]
 8004a40:	f7fb fb5e 	bl	8000100 <__udivsi3>
 8004a44:	0003      	movs	r3, r0
 8004a46:	001a      	movs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	085b      	lsrs	r3, r3, #1
 8004a4e:	18d2      	adds	r2, r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	0019      	movs	r1, r3
 8004a56:	0010      	movs	r0, r2
 8004a58:	f7fb fb52 	bl	8000100 <__udivsi3>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	2b0f      	cmp	r3, #15
 8004a64:	d90a      	bls.n	8004a7c <UART_SetConfig+0x280>
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	2380      	movs	r3, #128	@ 0x80
 8004a6a:	025b      	lsls	r3, r3, #9
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d205      	bcs.n	8004a7c <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	60da      	str	r2, [r3, #12]
 8004a7a:	e003      	b.n	8004a84 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004a7c:	231a      	movs	r3, #26
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	2201      	movs	r2, #1
 8004a82:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	226a      	movs	r2, #106	@ 0x6a
 8004a88:	2101      	movs	r1, #1
 8004a8a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2268      	movs	r2, #104	@ 0x68
 8004a90:	2101      	movs	r1, #1
 8004a92:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004aa0:	231a      	movs	r3, #26
 8004aa2:	18fb      	adds	r3, r7, r3
 8004aa4:	781b      	ldrb	r3, [r3, #0]
}
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b008      	add	sp, #32
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	46c0      	nop			@ (mov r8, r8)
 8004ab0:	cfff69f3 	.word	0xcfff69f3
 8004ab4:	ffffcfff 	.word	0xffffcfff
 8004ab8:	11fff4ff 	.word	0x11fff4ff
 8004abc:	40013800 	.word	0x40013800
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	40004400 	.word	0x40004400
 8004ac8:	00f42400 	.word	0x00f42400
 8004acc:	080054a4 	.word	0x080054a4

08004ad0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004adc:	2208      	movs	r2, #8
 8004ade:	4013      	ands	r3, r2
 8004ae0:	d00b      	beq.n	8004afa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	4a4a      	ldr	r2, [pc, #296]	@ (8004c14 <UART_AdvFeatureConfig+0x144>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	0019      	movs	r1, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afe:	2201      	movs	r2, #1
 8004b00:	4013      	ands	r3, r2
 8004b02:	d00b      	beq.n	8004b1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	4a43      	ldr	r2, [pc, #268]	@ (8004c18 <UART_AdvFeatureConfig+0x148>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	0019      	movs	r1, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b20:	2202      	movs	r2, #2
 8004b22:	4013      	ands	r3, r2
 8004b24:	d00b      	beq.n	8004b3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	4a3b      	ldr	r2, [pc, #236]	@ (8004c1c <UART_AdvFeatureConfig+0x14c>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	0019      	movs	r1, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b42:	2204      	movs	r2, #4
 8004b44:	4013      	ands	r3, r2
 8004b46:	d00b      	beq.n	8004b60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	4a34      	ldr	r2, [pc, #208]	@ (8004c20 <UART_AdvFeatureConfig+0x150>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	0019      	movs	r1, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b64:	2210      	movs	r2, #16
 8004b66:	4013      	ands	r3, r2
 8004b68:	d00b      	beq.n	8004b82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4a2c      	ldr	r2, [pc, #176]	@ (8004c24 <UART_AdvFeatureConfig+0x154>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	0019      	movs	r1, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b86:	2220      	movs	r2, #32
 8004b88:	4013      	ands	r3, r2
 8004b8a:	d00b      	beq.n	8004ba4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	4a25      	ldr	r2, [pc, #148]	@ (8004c28 <UART_AdvFeatureConfig+0x158>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	0019      	movs	r1, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba8:	2240      	movs	r2, #64	@ 0x40
 8004baa:	4013      	ands	r3, r2
 8004bac:	d01d      	beq.n	8004bea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c2c <UART_AdvFeatureConfig+0x15c>)
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	0019      	movs	r1, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bca:	2380      	movs	r3, #128	@ 0x80
 8004bcc:	035b      	lsls	r3, r3, #13
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d10b      	bne.n	8004bea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	4a15      	ldr	r2, [pc, #84]	@ (8004c30 <UART_AdvFeatureConfig+0x160>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	0019      	movs	r1, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bee:	2280      	movs	r2, #128	@ 0x80
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	d00b      	beq.n	8004c0c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8004c34 <UART_AdvFeatureConfig+0x164>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	0019      	movs	r1, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	605a      	str	r2, [r3, #4]
  }
}
 8004c0c:	46c0      	nop			@ (mov r8, r8)
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	b002      	add	sp, #8
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	ffff7fff 	.word	0xffff7fff
 8004c18:	fffdffff 	.word	0xfffdffff
 8004c1c:	fffeffff 	.word	0xfffeffff
 8004c20:	fffbffff 	.word	0xfffbffff
 8004c24:	ffffefff 	.word	0xffffefff
 8004c28:	ffffdfff 	.word	0xffffdfff
 8004c2c:	ffefffff 	.word	0xffefffff
 8004c30:	ff9fffff 	.word	0xff9fffff
 8004c34:	fff7ffff 	.word	0xfff7ffff

08004c38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b092      	sub	sp, #72	@ 0x48
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2290      	movs	r2, #144	@ 0x90
 8004c44:	2100      	movs	r1, #0
 8004c46:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c48:	f7fc fd5a 	bl	8001700 <HAL_GetTick>
 8004c4c:	0003      	movs	r3, r0
 8004c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2208      	movs	r2, #8
 8004c58:	4013      	ands	r3, r2
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d12d      	bne.n	8004cba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c60:	2280      	movs	r2, #128	@ 0x80
 8004c62:	0391      	lsls	r1, r2, #14
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	4a47      	ldr	r2, [pc, #284]	@ (8004d84 <UART_CheckIdleState+0x14c>)
 8004c68:	9200      	str	r2, [sp, #0]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f000 f88e 	bl	8004d8c <UART_WaitOnFlagUntilTimeout>
 8004c70:	1e03      	subs	r3, r0, #0
 8004c72:	d022      	beq.n	8004cba <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c74:	f3ef 8310 	mrs	r3, PRIMASK
 8004c78:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c7e:	2301      	movs	r3, #1
 8004c80:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c84:	f383 8810 	msr	PRIMASK, r3
}
 8004c88:	46c0      	nop			@ (mov r8, r8)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2180      	movs	r1, #128	@ 0x80
 8004c96:	438a      	bics	r2, r1
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca0:	f383 8810 	msr	PRIMASK, r3
}
 8004ca4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2288      	movs	r2, #136	@ 0x88
 8004caa:	2120      	movs	r1, #32
 8004cac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2284      	movs	r2, #132	@ 0x84
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e060      	b.n	8004d7c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2204      	movs	r2, #4
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d146      	bne.n	8004d56 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cca:	2280      	movs	r2, #128	@ 0x80
 8004ccc:	03d1      	lsls	r1, r2, #15
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	4a2c      	ldr	r2, [pc, #176]	@ (8004d84 <UART_CheckIdleState+0x14c>)
 8004cd2:	9200      	str	r2, [sp, #0]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f000 f859 	bl	8004d8c <UART_WaitOnFlagUntilTimeout>
 8004cda:	1e03      	subs	r3, r0, #0
 8004cdc:	d03b      	beq.n	8004d56 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cde:	f3ef 8310 	mrs	r3, PRIMASK
 8004ce2:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ce8:	2301      	movs	r3, #1
 8004cea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f383 8810 	msr	PRIMASK, r3
}
 8004cf2:	46c0      	nop			@ (mov r8, r8)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4922      	ldr	r1, [pc, #136]	@ (8004d88 <UART_CheckIdleState+0x150>)
 8004d00:	400a      	ands	r2, r1
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f383 8810 	msr	PRIMASK, r3
}
 8004d0e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d10:	f3ef 8310 	mrs	r3, PRIMASK
 8004d14:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d16:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	f383 8810 	msr	PRIMASK, r3
}
 8004d24:	46c0      	nop			@ (mov r8, r8)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2101      	movs	r1, #1
 8004d32:	438a      	bics	r2, r1
 8004d34:	609a      	str	r2, [r3, #8]
 8004d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	f383 8810 	msr	PRIMASK, r3
}
 8004d40:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	228c      	movs	r2, #140	@ 0x8c
 8004d46:	2120      	movs	r1, #32
 8004d48:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2284      	movs	r2, #132	@ 0x84
 8004d4e:	2100      	movs	r1, #0
 8004d50:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e012      	b.n	8004d7c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2288      	movs	r2, #136	@ 0x88
 8004d5a:	2120      	movs	r1, #32
 8004d5c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	228c      	movs	r2, #140	@ 0x8c
 8004d62:	2120      	movs	r1, #32
 8004d64:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2284      	movs	r2, #132	@ 0x84
 8004d76:	2100      	movs	r1, #0
 8004d78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	b010      	add	sp, #64	@ 0x40
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	01ffffff 	.word	0x01ffffff
 8004d88:	fffffedf 	.word	0xfffffedf

08004d8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	1dfb      	adds	r3, r7, #7
 8004d9a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9c:	e051      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	3301      	adds	r3, #1
 8004da2:	d04e      	beq.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da4:	f7fc fcac 	bl	8001700 <HAL_GetTick>
 8004da8:	0002      	movs	r2, r0
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d302      	bcc.n	8004dba <UART_WaitOnFlagUntilTimeout+0x2e>
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e051      	b.n	8004e62 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2204      	movs	r2, #4
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	d03b      	beq.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b80      	cmp	r3, #128	@ 0x80
 8004dce:	d038      	beq.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b40      	cmp	r3, #64	@ 0x40
 8004dd4:	d035      	beq.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	2208      	movs	r2, #8
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d111      	bne.n	8004e08 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2208      	movs	r2, #8
 8004dea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	0018      	movs	r0, r3
 8004df0:	f000 f83c 	bl	8004e6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2290      	movs	r2, #144	@ 0x90
 8004df8:	2108      	movs	r1, #8
 8004dfa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2284      	movs	r2, #132	@ 0x84
 8004e00:	2100      	movs	r1, #0
 8004e02:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e02c      	b.n	8004e62 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	69da      	ldr	r2, [r3, #28]
 8004e0e:	2380      	movs	r3, #128	@ 0x80
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	401a      	ands	r2, r3
 8004e14:	2380      	movs	r3, #128	@ 0x80
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d112      	bne.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2280      	movs	r2, #128	@ 0x80
 8004e22:	0112      	lsls	r2, r2, #4
 8004e24:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f000 f81f 	bl	8004e6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2290      	movs	r2, #144	@ 0x90
 8004e32:	2120      	movs	r1, #32
 8004e34:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2284      	movs	r2, #132	@ 0x84
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e00f      	b.n	8004e62 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	425a      	negs	r2, r3
 8004e52:	4153      	adcs	r3, r2
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	001a      	movs	r2, r3
 8004e58:	1dfb      	adds	r3, r7, #7
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d09e      	beq.n	8004d9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	0018      	movs	r0, r3
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b004      	add	sp, #16
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08e      	sub	sp, #56	@ 0x38
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e74:	f3ef 8310 	mrs	r3, PRIMASK
 8004e78:	617b      	str	r3, [r7, #20]
  return(result);
 8004e7a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e7e:	2301      	movs	r3, #1
 8004e80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	f383 8810 	msr	PRIMASK, r3
}
 8004e88:	46c0      	nop			@ (mov r8, r8)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4926      	ldr	r1, [pc, #152]	@ (8004f30 <UART_EndRxTransfer+0xc4>)
 8004e96:	400a      	ands	r2, r1
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	f383 8810 	msr	PRIMASK, r3
}
 8004ea4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eaa:	623b      	str	r3, [r7, #32]
  return(result);
 8004eac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004eae:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb6:	f383 8810 	msr	PRIMASK, r3
}
 8004eba:	46c0      	nop			@ (mov r8, r8)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	491b      	ldr	r1, [pc, #108]	@ (8004f34 <UART_EndRxTransfer+0xc8>)
 8004ec8:	400a      	ands	r2, r1
 8004eca:	609a      	str	r2, [r3, #8]
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed2:	f383 8810 	msr	PRIMASK, r3
}
 8004ed6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d118      	bne.n	8004f12 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eea:	2301      	movs	r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f383 8810 	msr	PRIMASK, r3
}
 8004ef4:	46c0      	nop			@ (mov r8, r8)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2110      	movs	r1, #16
 8004f02:	438a      	bics	r2, r1
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f383 8810 	msr	PRIMASK, r3
}
 8004f10:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	228c      	movs	r2, #140	@ 0x8c
 8004f16:	2120      	movs	r1, #32
 8004f18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004f26:	46c0      	nop			@ (mov r8, r8)
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b00e      	add	sp, #56	@ 0x38
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	46c0      	nop			@ (mov r8, r8)
 8004f30:	fffffedf 	.word	0xfffffedf
 8004f34:	effffffe 	.word	0xeffffffe

08004f38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2284      	movs	r2, #132	@ 0x84
 8004f44:	5c9b      	ldrb	r3, [r3, r2]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <HAL_UARTEx_DisableFifoMode+0x16>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e027      	b.n	8004f9e <HAL_UARTEx_DisableFifoMode+0x66>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2284      	movs	r2, #132	@ 0x84
 8004f52:	2101      	movs	r1, #1
 8004f54:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2288      	movs	r2, #136	@ 0x88
 8004f5a:	2124      	movs	r1, #36	@ 0x24
 8004f5c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2101      	movs	r1, #1
 8004f72:	438a      	bics	r2, r1
 8004f74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4a0b      	ldr	r2, [pc, #44]	@ (8004fa8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2288      	movs	r2, #136	@ 0x88
 8004f90:	2120      	movs	r1, #32
 8004f92:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2284      	movs	r2, #132	@ 0x84
 8004f98:	2100      	movs	r1, #0
 8004f9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	b004      	add	sp, #16
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	46c0      	nop			@ (mov r8, r8)
 8004fa8:	dfffffff 	.word	0xdfffffff

08004fac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2284      	movs	r2, #132	@ 0x84
 8004fba:	5c9b      	ldrb	r3, [r3, r2]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e02e      	b.n	8005022 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2284      	movs	r2, #132	@ 0x84
 8004fc8:	2101      	movs	r1, #1
 8004fca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2288      	movs	r2, #136	@ 0x88
 8004fd0:	2124      	movs	r1, #36	@ 0x24
 8004fd2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	438a      	bics	r2, r1
 8004fea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	08d9      	lsrs	r1, r3, #3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	0018      	movs	r0, r3
 8005004:	f000 f854 	bl	80050b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2288      	movs	r2, #136	@ 0x88
 8005014:	2120      	movs	r1, #32
 8005016:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2284      	movs	r2, #132	@ 0x84
 800501c:	2100      	movs	r1, #0
 800501e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	0018      	movs	r0, r3
 8005024:	46bd      	mov	sp, r7
 8005026:	b004      	add	sp, #16
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2284      	movs	r2, #132	@ 0x84
 800503a:	5c9b      	ldrb	r3, [r3, r2]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d101      	bne.n	8005044 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005040:	2302      	movs	r3, #2
 8005042:	e02f      	b.n	80050a4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2284      	movs	r2, #132	@ 0x84
 8005048:	2101      	movs	r1, #1
 800504a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2288      	movs	r2, #136	@ 0x88
 8005050:	2124      	movs	r1, #36	@ 0x24
 8005052:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2101      	movs	r1, #1
 8005068:	438a      	bics	r2, r1
 800506a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	4a0e      	ldr	r2, [pc, #56]	@ (80050ac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005074:	4013      	ands	r3, r2
 8005076:	0019      	movs	r1, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	0018      	movs	r0, r3
 8005086:	f000 f813 	bl	80050b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2288      	movs	r2, #136	@ 0x88
 8005096:	2120      	movs	r1, #32
 8005098:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2284      	movs	r2, #132	@ 0x84
 800509e:	2100      	movs	r1, #0
 80050a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	0018      	movs	r0, r3
 80050a6:	46bd      	mov	sp, r7
 80050a8:	b004      	add	sp, #16
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	f1ffffff 	.word	0xf1ffffff

080050b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80050b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d108      	bne.n	80050d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	226a      	movs	r2, #106	@ 0x6a
 80050c4:	2101      	movs	r1, #1
 80050c6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2268      	movs	r2, #104	@ 0x68
 80050cc:	2101      	movs	r1, #1
 80050ce:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80050d0:	e043      	b.n	800515a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80050d2:	260f      	movs	r6, #15
 80050d4:	19bb      	adds	r3, r7, r6
 80050d6:	2208      	movs	r2, #8
 80050d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80050da:	200e      	movs	r0, #14
 80050dc:	183b      	adds	r3, r7, r0
 80050de:	2208      	movs	r2, #8
 80050e0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	0e5b      	lsrs	r3, r3, #25
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	240d      	movs	r4, #13
 80050ee:	193b      	adds	r3, r7, r4
 80050f0:	2107      	movs	r1, #7
 80050f2:	400a      	ands	r2, r1
 80050f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	0f5b      	lsrs	r3, r3, #29
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	250c      	movs	r5, #12
 8005102:	197b      	adds	r3, r7, r5
 8005104:	2107      	movs	r1, #7
 8005106:	400a      	ands	r2, r1
 8005108:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800510a:	183b      	adds	r3, r7, r0
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	197a      	adds	r2, r7, r5
 8005110:	7812      	ldrb	r2, [r2, #0]
 8005112:	4914      	ldr	r1, [pc, #80]	@ (8005164 <UARTEx_SetNbDataToProcess+0xb4>)
 8005114:	5c8a      	ldrb	r2, [r1, r2]
 8005116:	435a      	muls	r2, r3
 8005118:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800511a:	197b      	adds	r3, r7, r5
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	4a12      	ldr	r2, [pc, #72]	@ (8005168 <UARTEx_SetNbDataToProcess+0xb8>)
 8005120:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005122:	0019      	movs	r1, r3
 8005124:	f7fb f876 	bl	8000214 <__divsi3>
 8005128:	0003      	movs	r3, r0
 800512a:	b299      	uxth	r1, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	226a      	movs	r2, #106	@ 0x6a
 8005130:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005132:	19bb      	adds	r3, r7, r6
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	193a      	adds	r2, r7, r4
 8005138:	7812      	ldrb	r2, [r2, #0]
 800513a:	490a      	ldr	r1, [pc, #40]	@ (8005164 <UARTEx_SetNbDataToProcess+0xb4>)
 800513c:	5c8a      	ldrb	r2, [r1, r2]
 800513e:	435a      	muls	r2, r3
 8005140:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005142:	193b      	adds	r3, r7, r4
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	4a08      	ldr	r2, [pc, #32]	@ (8005168 <UARTEx_SetNbDataToProcess+0xb8>)
 8005148:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800514a:	0019      	movs	r1, r3
 800514c:	f7fb f862 	bl	8000214 <__divsi3>
 8005150:	0003      	movs	r3, r0
 8005152:	b299      	uxth	r1, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2268      	movs	r2, #104	@ 0x68
 8005158:	5299      	strh	r1, [r3, r2]
}
 800515a:	46c0      	nop			@ (mov r8, r8)
 800515c:	46bd      	mov	sp, r7
 800515e:	b005      	add	sp, #20
 8005160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005162:	46c0      	nop			@ (mov r8, r8)
 8005164:	080054bc 	.word	0x080054bc
 8005168:	080054c4 	.word	0x080054c4

0800516c <malloc>:
 800516c:	b510      	push	{r4, lr}
 800516e:	4b03      	ldr	r3, [pc, #12]	@ (800517c <malloc+0x10>)
 8005170:	0001      	movs	r1, r0
 8005172:	6818      	ldr	r0, [r3, #0]
 8005174:	f000 f830 	bl	80051d8 <_malloc_r>
 8005178:	bd10      	pop	{r4, pc}
 800517a:	46c0      	nop			@ (mov r8, r8)
 800517c:	2000003c 	.word	0x2000003c

08005180 <free>:
 8005180:	b510      	push	{r4, lr}
 8005182:	4b03      	ldr	r3, [pc, #12]	@ (8005190 <free+0x10>)
 8005184:	0001      	movs	r1, r0
 8005186:	6818      	ldr	r0, [r3, #0]
 8005188:	f000 f906 	bl	8005398 <_free_r>
 800518c:	bd10      	pop	{r4, pc}
 800518e:	46c0      	nop			@ (mov r8, r8)
 8005190:	2000003c 	.word	0x2000003c

08005194 <sbrk_aligned>:
 8005194:	b570      	push	{r4, r5, r6, lr}
 8005196:	4e0f      	ldr	r6, [pc, #60]	@ (80051d4 <sbrk_aligned+0x40>)
 8005198:	000d      	movs	r5, r1
 800519a:	6831      	ldr	r1, [r6, #0]
 800519c:	0004      	movs	r4, r0
 800519e:	2900      	cmp	r1, #0
 80051a0:	d102      	bne.n	80051a8 <sbrk_aligned+0x14>
 80051a2:	f000 f8b1 	bl	8005308 <_sbrk_r>
 80051a6:	6030      	str	r0, [r6, #0]
 80051a8:	0029      	movs	r1, r5
 80051aa:	0020      	movs	r0, r4
 80051ac:	f000 f8ac 	bl	8005308 <_sbrk_r>
 80051b0:	1c43      	adds	r3, r0, #1
 80051b2:	d103      	bne.n	80051bc <sbrk_aligned+0x28>
 80051b4:	2501      	movs	r5, #1
 80051b6:	426d      	negs	r5, r5
 80051b8:	0028      	movs	r0, r5
 80051ba:	bd70      	pop	{r4, r5, r6, pc}
 80051bc:	2303      	movs	r3, #3
 80051be:	1cc5      	adds	r5, r0, #3
 80051c0:	439d      	bics	r5, r3
 80051c2:	42a8      	cmp	r0, r5
 80051c4:	d0f8      	beq.n	80051b8 <sbrk_aligned+0x24>
 80051c6:	1a29      	subs	r1, r5, r0
 80051c8:	0020      	movs	r0, r4
 80051ca:	f000 f89d 	bl	8005308 <_sbrk_r>
 80051ce:	3001      	adds	r0, #1
 80051d0:	d1f2      	bne.n	80051b8 <sbrk_aligned+0x24>
 80051d2:	e7ef      	b.n	80051b4 <sbrk_aligned+0x20>
 80051d4:	20000784 	.word	0x20000784

080051d8 <_malloc_r>:
 80051d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051da:	2203      	movs	r2, #3
 80051dc:	1ccb      	adds	r3, r1, #3
 80051de:	4393      	bics	r3, r2
 80051e0:	3308      	adds	r3, #8
 80051e2:	0005      	movs	r5, r0
 80051e4:	001f      	movs	r7, r3
 80051e6:	2b0c      	cmp	r3, #12
 80051e8:	d234      	bcs.n	8005254 <_malloc_r+0x7c>
 80051ea:	270c      	movs	r7, #12
 80051ec:	42b9      	cmp	r1, r7
 80051ee:	d833      	bhi.n	8005258 <_malloc_r+0x80>
 80051f0:	0028      	movs	r0, r5
 80051f2:	f000 f871 	bl	80052d8 <__malloc_lock>
 80051f6:	4e37      	ldr	r6, [pc, #220]	@ (80052d4 <_malloc_r+0xfc>)
 80051f8:	6833      	ldr	r3, [r6, #0]
 80051fa:	001c      	movs	r4, r3
 80051fc:	2c00      	cmp	r4, #0
 80051fe:	d12f      	bne.n	8005260 <_malloc_r+0x88>
 8005200:	0039      	movs	r1, r7
 8005202:	0028      	movs	r0, r5
 8005204:	f7ff ffc6 	bl	8005194 <sbrk_aligned>
 8005208:	0004      	movs	r4, r0
 800520a:	1c43      	adds	r3, r0, #1
 800520c:	d15f      	bne.n	80052ce <_malloc_r+0xf6>
 800520e:	6834      	ldr	r4, [r6, #0]
 8005210:	9400      	str	r4, [sp, #0]
 8005212:	9b00      	ldr	r3, [sp, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d14a      	bne.n	80052ae <_malloc_r+0xd6>
 8005218:	2c00      	cmp	r4, #0
 800521a:	d052      	beq.n	80052c2 <_malloc_r+0xea>
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	0028      	movs	r0, r5
 8005220:	18e3      	adds	r3, r4, r3
 8005222:	9900      	ldr	r1, [sp, #0]
 8005224:	9301      	str	r3, [sp, #4]
 8005226:	f000 f86f 	bl	8005308 <_sbrk_r>
 800522a:	9b01      	ldr	r3, [sp, #4]
 800522c:	4283      	cmp	r3, r0
 800522e:	d148      	bne.n	80052c2 <_malloc_r+0xea>
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	0028      	movs	r0, r5
 8005234:	1aff      	subs	r7, r7, r3
 8005236:	0039      	movs	r1, r7
 8005238:	f7ff ffac 	bl	8005194 <sbrk_aligned>
 800523c:	3001      	adds	r0, #1
 800523e:	d040      	beq.n	80052c2 <_malloc_r+0xea>
 8005240:	6823      	ldr	r3, [r4, #0]
 8005242:	19db      	adds	r3, r3, r7
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	6833      	ldr	r3, [r6, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	2a00      	cmp	r2, #0
 800524c:	d133      	bne.n	80052b6 <_malloc_r+0xde>
 800524e:	9b00      	ldr	r3, [sp, #0]
 8005250:	6033      	str	r3, [r6, #0]
 8005252:	e019      	b.n	8005288 <_malloc_r+0xb0>
 8005254:	2b00      	cmp	r3, #0
 8005256:	dac9      	bge.n	80051ec <_malloc_r+0x14>
 8005258:	230c      	movs	r3, #12
 800525a:	602b      	str	r3, [r5, #0]
 800525c:	2000      	movs	r0, #0
 800525e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005260:	6821      	ldr	r1, [r4, #0]
 8005262:	1bc9      	subs	r1, r1, r7
 8005264:	d420      	bmi.n	80052a8 <_malloc_r+0xd0>
 8005266:	290b      	cmp	r1, #11
 8005268:	d90a      	bls.n	8005280 <_malloc_r+0xa8>
 800526a:	19e2      	adds	r2, r4, r7
 800526c:	6027      	str	r7, [r4, #0]
 800526e:	42a3      	cmp	r3, r4
 8005270:	d104      	bne.n	800527c <_malloc_r+0xa4>
 8005272:	6032      	str	r2, [r6, #0]
 8005274:	6863      	ldr	r3, [r4, #4]
 8005276:	6011      	str	r1, [r2, #0]
 8005278:	6053      	str	r3, [r2, #4]
 800527a:	e005      	b.n	8005288 <_malloc_r+0xb0>
 800527c:	605a      	str	r2, [r3, #4]
 800527e:	e7f9      	b.n	8005274 <_malloc_r+0x9c>
 8005280:	6862      	ldr	r2, [r4, #4]
 8005282:	42a3      	cmp	r3, r4
 8005284:	d10e      	bne.n	80052a4 <_malloc_r+0xcc>
 8005286:	6032      	str	r2, [r6, #0]
 8005288:	0028      	movs	r0, r5
 800528a:	f000 f82d 	bl	80052e8 <__malloc_unlock>
 800528e:	0020      	movs	r0, r4
 8005290:	2207      	movs	r2, #7
 8005292:	300b      	adds	r0, #11
 8005294:	1d23      	adds	r3, r4, #4
 8005296:	4390      	bics	r0, r2
 8005298:	1ac2      	subs	r2, r0, r3
 800529a:	4298      	cmp	r0, r3
 800529c:	d0df      	beq.n	800525e <_malloc_r+0x86>
 800529e:	1a1b      	subs	r3, r3, r0
 80052a0:	50a3      	str	r3, [r4, r2]
 80052a2:	e7dc      	b.n	800525e <_malloc_r+0x86>
 80052a4:	605a      	str	r2, [r3, #4]
 80052a6:	e7ef      	b.n	8005288 <_malloc_r+0xb0>
 80052a8:	0023      	movs	r3, r4
 80052aa:	6864      	ldr	r4, [r4, #4]
 80052ac:	e7a6      	b.n	80051fc <_malloc_r+0x24>
 80052ae:	9c00      	ldr	r4, [sp, #0]
 80052b0:	6863      	ldr	r3, [r4, #4]
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	e7ad      	b.n	8005212 <_malloc_r+0x3a>
 80052b6:	001a      	movs	r2, r3
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	42a3      	cmp	r3, r4
 80052bc:	d1fb      	bne.n	80052b6 <_malloc_r+0xde>
 80052be:	2300      	movs	r3, #0
 80052c0:	e7da      	b.n	8005278 <_malloc_r+0xa0>
 80052c2:	230c      	movs	r3, #12
 80052c4:	0028      	movs	r0, r5
 80052c6:	602b      	str	r3, [r5, #0]
 80052c8:	f000 f80e 	bl	80052e8 <__malloc_unlock>
 80052cc:	e7c6      	b.n	800525c <_malloc_r+0x84>
 80052ce:	6007      	str	r7, [r0, #0]
 80052d0:	e7da      	b.n	8005288 <_malloc_r+0xb0>
 80052d2:	46c0      	nop			@ (mov r8, r8)
 80052d4:	20000788 	.word	0x20000788

080052d8 <__malloc_lock>:
 80052d8:	b510      	push	{r4, lr}
 80052da:	4802      	ldr	r0, [pc, #8]	@ (80052e4 <__malloc_lock+0xc>)
 80052dc:	f000 f850 	bl	8005380 <__retarget_lock_acquire_recursive>
 80052e0:	bd10      	pop	{r4, pc}
 80052e2:	46c0      	nop			@ (mov r8, r8)
 80052e4:	200008c8 	.word	0x200008c8

080052e8 <__malloc_unlock>:
 80052e8:	b510      	push	{r4, lr}
 80052ea:	4802      	ldr	r0, [pc, #8]	@ (80052f4 <__malloc_unlock+0xc>)
 80052ec:	f000 f849 	bl	8005382 <__retarget_lock_release_recursive>
 80052f0:	bd10      	pop	{r4, pc}
 80052f2:	46c0      	nop			@ (mov r8, r8)
 80052f4:	200008c8 	.word	0x200008c8

080052f8 <memset>:
 80052f8:	0003      	movs	r3, r0
 80052fa:	1882      	adds	r2, r0, r2
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d100      	bne.n	8005302 <memset+0xa>
 8005300:	4770      	bx	lr
 8005302:	7019      	strb	r1, [r3, #0]
 8005304:	3301      	adds	r3, #1
 8005306:	e7f9      	b.n	80052fc <memset+0x4>

08005308 <_sbrk_r>:
 8005308:	2300      	movs	r3, #0
 800530a:	b570      	push	{r4, r5, r6, lr}
 800530c:	4d06      	ldr	r5, [pc, #24]	@ (8005328 <_sbrk_r+0x20>)
 800530e:	0004      	movs	r4, r0
 8005310:	0008      	movs	r0, r1
 8005312:	602b      	str	r3, [r5, #0]
 8005314:	f7fc f912 	bl	800153c <_sbrk>
 8005318:	1c43      	adds	r3, r0, #1
 800531a:	d103      	bne.n	8005324 <_sbrk_r+0x1c>
 800531c:	682b      	ldr	r3, [r5, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d000      	beq.n	8005324 <_sbrk_r+0x1c>
 8005322:	6023      	str	r3, [r4, #0]
 8005324:	bd70      	pop	{r4, r5, r6, pc}
 8005326:	46c0      	nop			@ (mov r8, r8)
 8005328:	200008c4 	.word	0x200008c4

0800532c <__errno>:
 800532c:	4b01      	ldr	r3, [pc, #4]	@ (8005334 <__errno+0x8>)
 800532e:	6818      	ldr	r0, [r3, #0]
 8005330:	4770      	bx	lr
 8005332:	46c0      	nop			@ (mov r8, r8)
 8005334:	2000003c 	.word	0x2000003c

08005338 <__libc_init_array>:
 8005338:	b570      	push	{r4, r5, r6, lr}
 800533a:	2600      	movs	r6, #0
 800533c:	4c0c      	ldr	r4, [pc, #48]	@ (8005370 <__libc_init_array+0x38>)
 800533e:	4d0d      	ldr	r5, [pc, #52]	@ (8005374 <__libc_init_array+0x3c>)
 8005340:	1b64      	subs	r4, r4, r5
 8005342:	10a4      	asrs	r4, r4, #2
 8005344:	42a6      	cmp	r6, r4
 8005346:	d109      	bne.n	800535c <__libc_init_array+0x24>
 8005348:	2600      	movs	r6, #0
 800534a:	f000 f86f 	bl	800542c <_init>
 800534e:	4c0a      	ldr	r4, [pc, #40]	@ (8005378 <__libc_init_array+0x40>)
 8005350:	4d0a      	ldr	r5, [pc, #40]	@ (800537c <__libc_init_array+0x44>)
 8005352:	1b64      	subs	r4, r4, r5
 8005354:	10a4      	asrs	r4, r4, #2
 8005356:	42a6      	cmp	r6, r4
 8005358:	d105      	bne.n	8005366 <__libc_init_array+0x2e>
 800535a:	bd70      	pop	{r4, r5, r6, pc}
 800535c:	00b3      	lsls	r3, r6, #2
 800535e:	58eb      	ldr	r3, [r5, r3]
 8005360:	4798      	blx	r3
 8005362:	3601      	adds	r6, #1
 8005364:	e7ee      	b.n	8005344 <__libc_init_array+0xc>
 8005366:	00b3      	lsls	r3, r6, #2
 8005368:	58eb      	ldr	r3, [r5, r3]
 800536a:	4798      	blx	r3
 800536c:	3601      	adds	r6, #1
 800536e:	e7f2      	b.n	8005356 <__libc_init_array+0x1e>
 8005370:	080054cc 	.word	0x080054cc
 8005374:	080054cc 	.word	0x080054cc
 8005378:	080054d0 	.word	0x080054d0
 800537c:	080054cc 	.word	0x080054cc

08005380 <__retarget_lock_acquire_recursive>:
 8005380:	4770      	bx	lr

08005382 <__retarget_lock_release_recursive>:
 8005382:	4770      	bx	lr

08005384 <memcpy>:
 8005384:	2300      	movs	r3, #0
 8005386:	b510      	push	{r4, lr}
 8005388:	429a      	cmp	r2, r3
 800538a:	d100      	bne.n	800538e <memcpy+0xa>
 800538c:	bd10      	pop	{r4, pc}
 800538e:	5ccc      	ldrb	r4, [r1, r3]
 8005390:	54c4      	strb	r4, [r0, r3]
 8005392:	3301      	adds	r3, #1
 8005394:	e7f8      	b.n	8005388 <memcpy+0x4>
	...

08005398 <_free_r>:
 8005398:	b570      	push	{r4, r5, r6, lr}
 800539a:	0005      	movs	r5, r0
 800539c:	1e0c      	subs	r4, r1, #0
 800539e:	d010      	beq.n	80053c2 <_free_r+0x2a>
 80053a0:	3c04      	subs	r4, #4
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	da00      	bge.n	80053aa <_free_r+0x12>
 80053a8:	18e4      	adds	r4, r4, r3
 80053aa:	0028      	movs	r0, r5
 80053ac:	f7ff ff94 	bl	80052d8 <__malloc_lock>
 80053b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005428 <_free_r+0x90>)
 80053b2:	6813      	ldr	r3, [r2, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d105      	bne.n	80053c4 <_free_r+0x2c>
 80053b8:	6063      	str	r3, [r4, #4]
 80053ba:	6014      	str	r4, [r2, #0]
 80053bc:	0028      	movs	r0, r5
 80053be:	f7ff ff93 	bl	80052e8 <__malloc_unlock>
 80053c2:	bd70      	pop	{r4, r5, r6, pc}
 80053c4:	42a3      	cmp	r3, r4
 80053c6:	d908      	bls.n	80053da <_free_r+0x42>
 80053c8:	6820      	ldr	r0, [r4, #0]
 80053ca:	1821      	adds	r1, r4, r0
 80053cc:	428b      	cmp	r3, r1
 80053ce:	d1f3      	bne.n	80053b8 <_free_r+0x20>
 80053d0:	6819      	ldr	r1, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	1809      	adds	r1, r1, r0
 80053d6:	6021      	str	r1, [r4, #0]
 80053d8:	e7ee      	b.n	80053b8 <_free_r+0x20>
 80053da:	001a      	movs	r2, r3
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <_free_r+0x4e>
 80053e2:	42a3      	cmp	r3, r4
 80053e4:	d9f9      	bls.n	80053da <_free_r+0x42>
 80053e6:	6811      	ldr	r1, [r2, #0]
 80053e8:	1850      	adds	r0, r2, r1
 80053ea:	42a0      	cmp	r0, r4
 80053ec:	d10b      	bne.n	8005406 <_free_r+0x6e>
 80053ee:	6820      	ldr	r0, [r4, #0]
 80053f0:	1809      	adds	r1, r1, r0
 80053f2:	1850      	adds	r0, r2, r1
 80053f4:	6011      	str	r1, [r2, #0]
 80053f6:	4283      	cmp	r3, r0
 80053f8:	d1e0      	bne.n	80053bc <_free_r+0x24>
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	1841      	adds	r1, r0, r1
 8005400:	6011      	str	r1, [r2, #0]
 8005402:	6053      	str	r3, [r2, #4]
 8005404:	e7da      	b.n	80053bc <_free_r+0x24>
 8005406:	42a0      	cmp	r0, r4
 8005408:	d902      	bls.n	8005410 <_free_r+0x78>
 800540a:	230c      	movs	r3, #12
 800540c:	602b      	str	r3, [r5, #0]
 800540e:	e7d5      	b.n	80053bc <_free_r+0x24>
 8005410:	6820      	ldr	r0, [r4, #0]
 8005412:	1821      	adds	r1, r4, r0
 8005414:	428b      	cmp	r3, r1
 8005416:	d103      	bne.n	8005420 <_free_r+0x88>
 8005418:	6819      	ldr	r1, [r3, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	1809      	adds	r1, r1, r0
 800541e:	6021      	str	r1, [r4, #0]
 8005420:	6063      	str	r3, [r4, #4]
 8005422:	6054      	str	r4, [r2, #4]
 8005424:	e7ca      	b.n	80053bc <_free_r+0x24>
 8005426:	46c0      	nop			@ (mov r8, r8)
 8005428:	20000788 	.word	0x20000788

0800542c <_init>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	46c0      	nop			@ (mov r8, r8)
 8005430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005432:	bc08      	pop	{r3}
 8005434:	469e      	mov	lr, r3
 8005436:	4770      	bx	lr

08005438 <_fini>:
 8005438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543a:	46c0      	nop			@ (mov r8, r8)
 800543c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543e:	bc08      	pop	{r3}
 8005440:	469e      	mov	lr, r3
 8005442:	4770      	bx	lr
